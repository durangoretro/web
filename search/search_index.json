{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Durango Retro Computer","text":"<p>A retro-inspired architecture</p> <p>Welcome to the Durango Computer Web Page.</p> <p>Durango is an Open Source and Open hardware project to create a retro computer system, using the 65C02 microprocessor and standard 74-series logic chips. From the creation of all the hardware architecture, to all the tools and information to create a new Development System for this computer.</p> <p></p> Durango\u00b7X Computer main board <p>In this web page you can find all the information about this project; from building a brand new Durango\u00b7X computer, to the Software and tools wrote to develop new programs and games for this computer.</p> <p></p> Durango\u00b7X Computer With Keyboard  and Gamepad interface <p>Of course, there is more; we are trying to create all the tools, software and libraries needed to develop new software using modern tools like Docker images or creating user friendly libraries. Or you may just enjoy the already made Durango software, with or without an actual Durango computer!</p>"},{"location":"#want-to-enjoy-all-of-this-right-now-wait-no-more","title":"Want to enjoy all of this right now? Wait no more!","text":""},{"location":"#any-questions-read-the-faq","title":"Any questions? Read the FAQ.","text":""},{"location":"#looking-for-something-have-a-look-at-the-site-map","title":"Looking for something? Have a look at the site map","text":"<p>This project is made by the Durango Computer Team with the collaboration of La Jaquer\u00eda.</p> <p>Also, a big shout out to Sam Falvo, BigEd, Andr\u00e9 Fachat, Garth Wilson, Michal Kowalski, the late Lee Davidson and all the nice folks at 6502.org for their friendly help, support and inspiration!</p>"},{"location":"about/","title":"About","text":"<p>Site map) Home &gt; About</p>"},{"location":"about/#about-the-durango-project","title":"About the Durango Project","text":"<p>Durango is a project developed by zuiko21, with the help of La Jaquer\u00eda, to create a computer using the 6502 microprocessor with its own architecture.</p> <p>This is an Open Hardware and Open Source Software Project. You can find all our projects in our Github Organization.</p>"},{"location":"about/#durango-computer-team","title":"Durango Computer Team","text":"<p>The Durango Computer Team is the people behind the project, working together to design and implement the hardware and software for Durango.</p> <p>Of course everyone can become part of the Durango Computer Team, thanks to the open Hardware and Open Source initiative. Here you can find the core people of the Durango Computer Team:</p> Zuiko21 Emiliollbb Zerasul 6502 Guru. Father of Durango-X Born in the 80's, always looking for cool projects to learn from Software Engineer that loves the retro world."},{"location":"community/","title":"Community","text":"<p>Site map) Home &gt; Community</p>"},{"location":"community/#community","title":"Community","text":"<p>Durango is an open project that you can colaborate, participate and share any content about this project or related with Retro Computing. To help participating in this project you have the following tools:</p> <ul> <li>Github Issues and Pull Requests: you can create and discuss Durango issues; and of course you can contribute to the software sending Pull Requests and help making Durango a better project.</li> <li>Discord Server: As a community we have a Discord Server to discuss and see all the information related with Durango. You can use this invitation to enter the discord Server.</li> </ul> <p>Remember: Durango is a open Community and everyone is welcome.</p>"},{"location":"faq/","title":"FAQ","text":"<p>Site map) Home &gt; FAQ</p>"},{"location":"faq/#frequently-asked-questions-faq","title":"Frequently Asked Questions (FAQ)","text":"<p>Here you can find some questions about the Durango Project and all the projects related with it.</p>"},{"location":"faq/#what-is-durango","title":"What is Durango?","text":"<p>Durango is an Open Hardware and Open Source project, lead by the Durango Computer Team, intended for learning how to create a Home Computer using the 6502 microprocessor. With this project you can build a computer from scratch, creating the minimum software base and even a gaming platform.</p>"},{"location":"faq/#how-i-can-get-a-durango-computer","title":"How I can get a Durango Computer?","text":"<p>You can build a Durango Computer getting the PCBs made and all the components, as you can see in the Getting Started Page. You can find information about Hardware and Software in this Web site as well.</p>"},{"location":"faq/#can-i-purchase-a-durango-computer","title":"Can I purchase a Durango Computer?","text":"<p>No. Currently it's in development stage and there is no plan to sell any Durango Computers. You can build your own Durango from the supplied design, anyway.</p>"},{"location":"faq/#do-i-need-a-durango-computer-in-order-to-develop-for-this-platform","title":"Do I need a Durango Computer in order to develop for this platform?","text":"<p>No. We provide Development Tools to create and run your own Durango Software, like an emulator, a C Library and even a Docker Image containing all the tools for development.</p>"},{"location":"faq/#can-i-contribute-for-this-project","title":"Can I contribute for this Project?","text":"<p>Of course! This is an Open Hardware and Open Source project. You can find the source code of all of our Project in our Github Organization.</p>"},{"location":"hardware/","title":"Hardware","text":"<p>Site map) Home &gt; Hardware</p>"},{"location":"hardware/#hardware","title":"Hardware","text":"<p>The physical devices in the Durango ecosystem:</p>"},{"location":"hardware/#precursors","title":"Precursors","text":"<p>Former experiments before the definitive Durango\u00b7X computer:</p> <ul> <li>Baja</li> <li>SDd / Chihuahua</li> <li>Durango\u00b7PROTO</li> <li>Abandoned projects</li> </ul>"},{"location":"hardware/#the-durango-architecture","title":"The Durango architecture","text":"<p>All the current stuff:</p>"},{"location":"hardware/#range","title":"Range","text":"<p>Durango's not alone... choose your flavour!</p>"},{"location":"hardware/#durangox-sbc","title":"Durango\u00b7X SBC","text":"<p>The main computer: what it does, how it works and how can it be improved.</p> <ol> <li>Overview</li> <li>Specs and options<ol> <li>v1 and improvements for v2</li> <li>Options</li> <li>Palette</li> <li>IRQ generation</li> </ol> </li> <li>Theory of Operation</li> <li>Hacks<ul> <li>Hardware PAUSE</li> <li>Overclocking</li> <li>Alternative oscillator</li> <li>PowerDurango</li> </ul> </li> </ol>"},{"location":"hardware/#cartridges","title":"Cartridges","text":"<p>The classic way to get software up and running on Durango... with a modern twist.</p> <ol> <li>Overview &amp; pinout</li> <li>mini-cartridge</li> <li>devCart<ul> <li>Overview</li> <li>ShadowRAM</li> </ul> </li> <li>Bankswitching<ul> <li>128K - 1M</li> <li>multi-cartridge</li> </ul> </li> <li>Universal cartridge (new)</li> <li>Riser boards<ul> <li>PSG</li> <li>Breakout board</li> </ul> </li> <li>Veracruz cartridge format</li> </ol>"},{"location":"hardware/#peripherals-interfaces","title":"Peripherals &amp; Interfaces","text":"<p>Connectivity means 'ready for the future':</p> <ol> <li>nanoLink</li> <li>IOx bus<ul> <li>Pinout</li> <li>Assigned addresses</li> </ul> </li> <li>Keyboard &amp; Gamepads<ul> <li>Layout &amp; matrix</li> <li>NES version</li> <li>MD/VCS version</li> <li>Extended keyboard</li> </ul> </li> <li>Other IOx devices<ul> <li>nanoLink output</li> <li>FastSPI &amp; I<sup>2</sup>C</li> <li>PASK</li> <li>GPIO</li> </ul> </li> <li>Sidecar devices<ul> <li>Overview</li> <li>SD + RTC</li> </ul> </li> </ol>"},{"location":"hardware/#accesories","title":"Accesories","text":"<p>Durango even better.</p> <ul> <li>Keyboard overlay</li> <li>Component Video output</li> <li>PowerDurango adapter</li> </ul>"},{"location":"hardware/#alternative-architectures","title":"Alternative architectures","text":""},{"location":"hardware/#with-the-65c02","title":"With the 65C02","text":"<ul> <li>Chihuahua: small footprint (~98 x 72 mm) SBC with no built-in video, but sporting a VIAbus interface. For convenience, it shares the IOx and cartridge connectors from Durango\u00b7X.</li> </ul>"},{"location":"hardware/#motorola-6800hitachi-6300","title":"Motorola 6800/Hitachi 6300","text":"<ul> <li>Rosario: Simple SBC based on the Hitachi 6301/6303 microcontroller in the same small form factor of Chihuahua. Can be configured to run without cartridge.</li> </ul>"},{"location":"hardware/#other-cpus","title":"Other CPUs","text":"<p>To be done</p>"},{"location":"hardware/#alternative-accessories","title":"Alternative accessories","text":"<p>The following devices share the common Chihuahua/Rosario form factor (~98 x 72 mm):</p> <ul> <li>picoVDU: simple video output for Rosario, Chihuahua or even any other 6502 system.</li> <li>SimpleI/O: eight LEDs and eight pushbuttons for simple interaction with any device sporting the VIAbus interface.</li> <li>LCD keypad: connect an LCD character display easily.</li> </ul>"},{"location":"hardware/#future-projects","title":"Future projects","text":"<p>We won't stop here...</p> <ul> <li>Durango Pocket</li> <li>Durango\u00b7C</li> <li>Veracruz</li> <li>SIXtation</li> </ul>"},{"location":"sitemap/","title":"Site Map","text":"<p>This is a general index of the whole DurangoRetro.com website. Most important pages can be accessed via the Navigation menu at the top, as well.</p>"},{"location":"sitemap/#home","title":"Home","text":""},{"location":"sitemap/#about","title":"About","text":"<ol> <li>Overview</li> <li>Durango Computer Team</li> </ol>"},{"location":"sitemap/#faq","title":"FAQ","text":""},{"location":"sitemap/#getting-started","title":"Getting Started","text":"<ol> <li> <p>Running Durango Software</p> <ol> <li>On actual hardware<ol> <li>ROM Cartridges</li> <li>ROM images on SD card</li> <li>Pocket executables on SD card</li> <li>Pocket executables from Raspberry Pi</li> </ol> </li> <li>Emulation<ol> <li>Perdita</li> <li>MAME support</li> </ol> </li> </ol> </li> <li> <p>Building the Durango\u00b7X computer</p> <ol> <li>PCB manufacturing</li> <li>Assembly guide (computer)<ol> <li>Building options<ul> <li>Single video mode versions</li> </ul> </li> <li>BOM</li> <li>Step by step</li> <li>Video Output Calibration</li> <li>Troubleshooting</li> </ol> </li> <li>Assembly guide (keyboard/gamepads interface)<ol> <li>Building options</li> <li>BOM</li> <li>Step by step</li> </ol> </li> <li>Assembly guide (cartridge)<ol> <li>Building options</li> <li>BOM</li> <li>Step by step</li> </ol> </li> </ol> </li> </ol>"},{"location":"sitemap/#hardware","title":"Hardware","text":"<ol> <li> <p>Precursors</p> <ol> <li>SDd / Chihuahua</li> <li>Durango-PROTO</li> <li>Abandoned projects</li> </ol> </li> <li> <p>The Durango architecture</p> <ol> <li>Range</li> <li>Durango\u00b7X SBC<ol> <li>Overview</li> <li>Specs and options<ol> <li>v1 and improvements for v2</li> <li>Options<ul> <li>EIA/60 Hz version</li> </ul> </li> <li>Palette</li> <li>IRQ generation</li> </ol> </li> <li>Theory of Operation</li> <li>Hacks<ol> <li>Hardware PAUSE</li> <li>Overclocking</li> <li>Alternative oscillator</li> <li>PowerDurango</li> </ol> </li> </ol> </li> <li>Cartridges<ol> <li>Overview &amp; pinout</li> <li>mini-cartridge</li> <li>devCart<ol> <li>Overview</li> <li>ShadowRAM</li> </ol> </li> <li>Bankswitching<ol> <li>128K-1M</li> <li>multi-cartridge</li> </ol> </li> <li>Universal (new) </li> <li>Riser boards<ol> <li>Programmable Sound Generator</li> <li>Breakout board</li> </ol> </li> <li>Veracruz cartridge format</li> </ol> </li> <li>Peripherals and interfaces<ol> <li>nanoLink</li> <li>IOx bus<ol> <li>Pinout</li> <li>Assigned addresses</li> </ol> </li> <li>Keyboard &amp; Gamepads<ol> <li>Layout &amp; Matrix</li> <li>NES version</li> <li>Megadrive / Genesis / Atari VCS version</li> <li>Extended keyboard</li> </ol> </li> <li>Other IOx peripherals<ol> <li>nanoLink output</li> <li>FastSPI &amp; I<sup>2</sup>C</li> <li>PASK</li> <li>GPIO</li> </ol> </li> <li>Sidecar devices<ol> <li>Overview</li> <li>SD + RTC</li> </ol> </li> </ol> </li> <li>Accessories<ol> <li>Keyboard overlay</li> <li>Component video output</li> <li>PowerDurango adapter</li> </ol> </li> </ol> </li> <li> <p>Future projects</p> <ol> <li>Durango Pocket</li> <li>Durango\u00b7C</li> <li>Veracruz</li> <li>SIXtation</li> </ol> </li> </ol>"},{"location":"sitemap/#software","title":"Software","text":"<ol> <li>Games Library</li> <li> <p>Utility Software</p> <ol> <li>Languages</li> <li>Test suites</li> <li>Other utilities</li> </ol> </li> <li> <p>Operating Systems</p> <ol> <li>Firmware library<ol> <li>BIOS<ol> <li>CONIO</li> <li>minimOS charset</li> </ol> </li> <li>BDOS</li> </ol> </li> <li>minimOS</li> <li>DOS/65</li> </ol> </li> <li> <p>File format</p> <ol> <li>ROM images<ol> <li>Standard header</li> <li>ROM footer</li> </ol> </li> <li>Other files<ol> <li>Standard header</li> <li>Signatures list</li> <li>Pocket executables</li> </ol> </li> <li>Durango volumes</li> </ol> </li> </ol>"},{"location":"sitemap/#development-tools","title":"Development &amp; Tools","text":"<ol> <li> <p>Languages</p> <ol> <li>Assembly</li> <li>BASIC<ol> <li>EhBASIC<ol> <li>Storage device drivers</li> </ol> </li> <li>BBC BASIC</li> <li>GfA BASIC</li> </ol> </li> <li>C<ol> <li>CC65<ol> <li>DurangoLib</li> </ol> </li> </ol> </li> <li>Future develoments</li> </ol> </li> <li> <p>Tools</p> <ol> <li>Rescomp</li> <li>Durango Imager<ol> <li>GUI Utility</li> <li>CLI tools</li> </ol> </li> <li>DurangoCode</li> <li>Docker</li> <li>VSP</li> <li>nanoBoot server</li> </ol> </li> <li> <p>In situ tools</p> <ol> <li>nanoMon</li> <li>miniMoDA</li> <li>nanoBoot</li> <li>multiBoot<ol> <li>Overview</li> <li>Supported formats</li> <li>Pocket firmware support<ol> <li>BIOS / BDOS</li> <li>Perdita Pocket support</li> </ol> </li> </ol> </li> </ol> </li> </ol>"},{"location":"sitemap/#community","title":"Community","text":"<ol> <li>GitHub</li> <li>Discord</li> </ol>"},{"location":"software/","title":"Software","text":"<p>Site map) Home &gt; Software</p>"},{"location":"software/#software","title":"Software","text":"<p>Available software to be run on the Durango computer:</p>"},{"location":"software/#games-library","title":"Games Library","text":"<p>Have some fun with your Durango computer, the classic way!</p>"},{"location":"software/#utility-software","title":"Utility Software","text":"<p>Tools for development and diagnosis of the Durango ecosystem:</p> <ul> <li>Languages</li> <li>Test suites</li> <li>Other utilities</li> </ul>"},{"location":"software/#operating-systems","title":"Operating Systems","text":"<p>Base support for easier development -- there's no need to reinvent the wheel every time!</p> <ul> <li>Firmware library<ul> <li>BIOS<ul> <li>CONIO</li> </ul> </li> <li>BDOS</li> </ul> </li> <li>minimOS</li> <li>DOS/65</li> </ul>"},{"location":"software/#file-format","title":"File format","text":"<p>Standard formats for easier management of your work:</p> <ol> <li>ROM images<ol> <li>Standard header</li> <li>ROM footer</li> </ol> </li> <li>Other files<ol> <li>Standard header</li> <li>Signatures list</li> <li>Pocket executables</li> </ol> </li> <li>Durango volumes</li> </ol>"},{"location":"started/","title":"Getting Started","text":"<p>Home &gt; Getting Started</p>"},{"location":"started/#getting-started","title":"Getting Started","text":""},{"location":"started/#running-durango-software","title":"Running Durango Software","text":"<p>How to run Durango software, with or without a Durango computer:</p> <ul> <li>On actual hardware</li> <li>Emulation</li> </ul>"},{"location":"started/#building-the-durangox-computer","title":"Building the Durango\u00b7X computer","text":"<p>Making your own, physical Durango\u00b7X computer!</p> <ol> <li>PCB manufacturing</li> <li>Assembly guide (computer)</li> <li>Assembly guide (keyboard/gamepads interface)</li> <li>Assembly guide (cartridge)</li> </ol>"},{"location":"started.old/","title":"Getting Started","text":"<p>Here you can find information about how to Start with the Durango Computer</p>"},{"location":"started.old/#description","title":"Description","text":"<p>Durango is made from two PCBs: The actual SBC,  and a peripheral board with a keyboard and two gamepad sockets. The peripheral board can be built to support either NES gamepads or Megadrive/Genesis gamepads (including Atari VCS/2600-style joysticks).</p>"},{"location":"started.old/#build-your-own-durango","title":"Build your own Durango","text":"<p>If you want to create a new Durango computer, you need to download the blueprints and obtain the components; you can find the blueprints in the following link:</p> <p>https://github.com/zuiko21/minimOS/tree/master/hard/kicad/durango/full</p> <p>To open the blueprints you need the KiCad application.</p> <p>You will need the symbols library for this project:</p> <p>https://github.com/zuiko21/minimOS/tree/master/hard/kicad/symbols</p> <p>You can render in Kicad an image similar to:</p> <p></p> Durango PCB with components"},{"location":"started.old/#durango-main-board-bill-of-materials","title":"Durango Main Board. Bill of Materials","text":""},{"location":"started.old/#board","title":"Board","text":"<ul> <li>PCB Gerbers for JLCPCB ordering KiCad source files</li> </ul>"},{"location":"started.old/#sockets","title":"Sockets","text":"<ul> <li>14-pin (x9)</li> <li>16-pin (x19)</li> <li>20-pin (x5)</li> <li>28-pin (x1)</li> <li>40-pin (x1)</li> </ul>"},{"location":"started.old/#resistors-all-18-watt-unless-noted-otherwise","title":"Resistors (all 1/8 Watt unless noted otherwise)","text":"<ul> <li>27   (x1) (RED VIOLET BLACK) 1/2 Watt</li> <li>68   (x2) (BLUE GREY BLACK)</li> <li>120  (x1) (BROWN RED  BROWN)</li> <li>150  (x1) (BROWN GREEN BROWN)</li> <li>330  (x1) (ORANGE ORANGE BROWN)</li> <li>470  (x3) (YELLOW VIOLET BROWN)</li> <li>680  (x2) (BLUE GREY BROW)</li> <li>1K   (x3) (BROWN BLACK RED)</li> <li>1K2  (x1) (BROWN RED  RED)</li> <li>3K3  (x4) (ORANGE ORANGE RED)</li> <li>5K6  (x1) (GREEN BLUE RED)</li> <li>6K8  (x2) (BLUE GREY RED)</li> <li>12K  (x3) (BROWN RED ORANGE)</li> <li>22K  (x3) (RED RED ORANGE)</li> <li>39K  (x1) (ORANGE WHITE ORANGE)</li> <li>220K (x3) (RED RED YELLOW)</li> </ul>"},{"location":"started.old/#resistor-networks","title":"Resistor networks","text":"<ul> <li>4x 4K7, 5-pin (x1)</li> <li>8x 3K3, 9-pin (x1)</li> </ul>"},{"location":"started.old/#capacitors","title":"Capacitors","text":"<ul> <li>68 pF  (x1)</li> <li>0.1 uF (x5)     three of them for the optional composite-PAL output</li> <li>10 \u00b5F  (x2) 25V any rating 10 Volts or more will do, preferably as small as possible</li> <li>100 \u00b5F (x3) 10V</li> <li>470 \u00b5F (x1) 10V</li> </ul>"},{"location":"started.old/#semiconductors","title":"Semiconductors","text":"<ul> <li>1N4148         (x5)</li> <li>BC548B         (x6) or any other small-signal NPN transistor (e.g. 2N3904, but check pinout!)</li> <li>Red 3 mm LED   (x1)</li> <li>Green 3 mm LED (x1)</li> </ul>"},{"location":"started.old/#integrated-circuits","title":"Integrated Circuits","text":"<ul> <li>74HC00   (x1)</li> <li>74HC02   (x1)</li> <li>74HC20   (x1)</li> <li>74HC21   (x1)</li> <li>74HC32   (x1)</li> <li>74HC74   (x1)</li> <li>74HC85   (x2)</li> <li>74HC86   (x2)</li> <li>74HC132  (x1)</li> <li>74HC139  (x2)</li> <li>74HC157  (x4)</li> <li>74HC166  (x1)</li> <li>74HC174  (x1)</li> <li>74HC175  (x1)</li> <li>74HC245  (x3)</li> <li>74HC257  (x4)</li> <li>74HC367  (x1)</li> <li>74HC574  (x1)</li> <li>74HC688  (x1)</li> <li>74HC4040 (x3)</li> <li>65C02    (x1)</li> <li>27C256   (x1) for the ROM cartridge</li> </ul>"},{"location":"started.old/#oscillator-can","title":"Oscillator can","text":"<ul> <li>24.576 MHz (x1)</li> </ul>"},{"location":"started.old/#others","title":"Others","text":"<ul> <li>Piezo Buzzer               (x1)</li> <li>6x6x21 mm Tactile switch   (x2)</li> <li>IDC shrouded 16-pin header (x1)</li> <li>SCART 21-pin connector     (x1)</li> <li>3x RCA socket              (x1) optional</li> </ul>"},{"location":"started.old/#optional-for-composite-pal-output","title":"Optional for composite PAL output","text":"<ul> <li>10 pF            (x1) </li> <li>22 nF            (x1)</li> <li>AD724            (x1) surface-mounted device</li> <li>4.43 MHz crystal (x1)</li> </ul>"},{"location":"started.old/#durango-keyboard-gamepads-board-bill-of-materials-nes-flavour","title":"Durango Keyboard &amp; Gamepads Board. Bill of Materials (NES flavour)","text":"<p>The Keyboard &amp; Gamepads Board provides an integrated keyboard and two Gamepad ports (MegaDrive/Genesis/Atari 2600 or NES-type gamepad options).</p> <p></p> Durango KeyBoard &amp; Gamepad Board"},{"location":"started.old/#top-board-keyboard-nes-gamepads","title":"Top Board (keyboard &amp; NES gamepads)","text":"<ul> <li>PCB Gerbers for JLCPCB ordering KiCad source files</li> </ul>"},{"location":"started.old/#sockets_1","title":"Sockets","text":"<ul> <li>14-pin (x1)</li> <li>16-pin (x4)</li> <li>20-pin (x1)</li> </ul>"},{"location":"started.old/#passive-devices","title":"Passive devices","text":"<ul> <li>1N4148 diode                     (x8)</li> <li>Resistor network 8x 220K, 9-pin  (x1)</li> <li>Resistor network 8x 10K,  9-pin  (x1)</li> </ul>"},{"location":"started.old/#other","title":"Other","text":"<ul> <li>NES Socket                   (x2)</li> <li>Tactile Switch DIP-4 6x6x7mm (x40)</li> <li>IDC Shrouded 16-pin header   (x2)  2x8</li> <li>8-pin socket, long pins      (x2)  might use a single unit in 2x8 configuration, if available</li> </ul>"},{"location":"started.old/#integrated-circuits_1","title":"Integrated Circuits","text":"<ul> <li>74HC138 (x1)</li> <li>74HC86  (x1)</li> <li>74HC174 (x1)</li> <li>74HC245 (x1)</li> <li>74HC595 (x2)</li> </ul>"},{"location":"started.old/#assembly-instructions","title":"Assembly instructions","text":"<ul> <li>Mount diodes: D11, D12, D13, D4, D15, D16, D17, D18</li> <li>Mount sockets: U9 U13, U12, U1</li> <li>Mount sockets: U34, U55</li> <li>Mount resistors: RN11, RN3</li> <li>Mount IDC: J1, J2</li> <li>Mount NES sockets: J33, J54</li> <li>Mount switches: SW1 to SW40</li> </ul>"},{"location":"started.old/#durango-keyboard-gamepads-board-bill-of-materials-mdgenesisvcs-flavour","title":"Durango Keyboard &amp; Gamepads Board. Bill of Materials (MD/Genesis/VCS flavour)","text":""},{"location":"started.old/#top-board-keyboard-md-gamepads","title":"Top Board (keyboard &amp; MD gamepads)","text":"<ul> <li>PCB Gerbers for JLCPCB ordering KiCad source files</li> </ul>"},{"location":"started.old/#sockets_2","title":"Sockets","text":"<ul> <li>14-pin (x1)</li> <li>16-pin (x3)</li> <li>20-pin (x3)</li> </ul>"},{"location":"started.old/#passive-devices_1","title":"Passive devices","text":"<ul> <li>1N4148 diode                     (x8)</li> <li>Resistor network 8x 220K, 9-pin  (x1)</li> <li>Resistor network 8x 10K,  9-pin  (x1)</li> </ul>"},{"location":"started.old/#connectors","title":"Connectors","text":"<ul> <li>DE9 Socket                   (x2)</li> <li>Tactile Switch DIP-4 6x6x7mm (x40)</li> <li>IDC Shrouded 16-pin header   (x2)  2x8</li> <li>8-pin socket, long pins      (x2)  might use a single unit in 2x8 configuration, if available</li> </ul>"},{"location":"started.old/#integrated-circuits_2","title":"Integrated Circuits","text":"<ul> <li>74HC138 (x1)</li> <li>74HC86  (x1)</li> <li>74HC174 (x2)</li> <li>74HC245 (x3)</li> </ul>"},{"location":"started.old/#assembly-instructions_1","title":"Assembly instructions","text":"<ul> <li>Mount diodes: D11, D12, D13, D4, D15, D16, D17, D18</li> <li>Mount sockets: U9 U13, U12, U1, </li> <li>MOunt sockets: U26, U24, U45</li> <li>Mount resistors: RN11, RN22, RN3</li> <li>Mount IDC: J1, J2</li> <li>Mount DE9: J23, J44</li> <li>Mount switches: SW1 to SW40</li> </ul>"},{"location":"started.old/#durango-cartridge","title":"Durango Cartridge","text":"Durango Cartridge <p>Here you can find the ROM Cartridge:</p> <p>PCB  Gerbers for JLCPCB ordering KiCad source files</p>"},{"location":"started.old/#bill-of-materials-28-pin-durango-cartridge","title":"Bill Of Materials (28-pin Durango Cartridge)","text":""},{"location":"started.old/#cartridge-configuration","title":"Cartridge configuration","text":"<p>You may leave 3K3 resistors in R1 &amp; R2 positions, with pin headers on JP1 &amp; JP2, for easy ROM type switching. On the other hand, if a particular cartridge is to be used with a single type of ROM chip, it may be permanently wired as follows:</p> <p>Suitable ROM chips and jumper Configuration</p> Type Model Capacity JP1 JP2 R1 R2 EPROM 27C64 8KB - - 0 0 EPROM 27C128 16KB - - 0 0 EPROM 27C256 32KB ON - - 0 EPROM 27C512 (lower) 64KB ON UP - - EPROM 27C512 (upper) 64KB ON * - - EEPROM 28C64 8KB - - 0 - EEPROM 28C256 32KB - DOWN 0 - FLASH 29F256 32KB - - - 0 <p>0 = jumper wire, - = not connected.</p>"},{"location":"started.old/#built-software-for-durango","title":"Built Software for Durango","text":"<p>If you want to built your own Durango Software (like Games or applications), you don't need a Durango to Built Software.</p> <p>We built some Tools for improve the development of software with Durango. Like:</p> <ul> <li>Emulator</li> <li>Developer-friendly C Library (Durango Lib)</li> <li>Durango Docker Image</li> <li>Visual Studio Code Extensi\u00f3n (Durango Code)</li> </ul> <p>You can use the Durango Emulator (Perdita), to test your ROMs and play Durango Games; or use the development tools for create your own Durango Applications.</p> <p>You can find them in the Development &amp; Tools section.</p>"},{"location":"tools/","title":"Tools","text":"<p>Home &gt; Development &amp; Tools</p>"},{"location":"tools/#development-tools","title":"Development &amp; Tools","text":""},{"location":"tools/#languages","title":"Languages","text":"<p>Some of the programming languages that can be used to create Durango software:</p> <ol> <li>Assembly</li> <li>BASIC<ol> <li>EhBASIC</li> <li>BBC BASIC</li> <li>GfA BASIC</li> </ol> </li> <li>C<ol> <li>CC65</li> <li>DurangoLib</li> </ol> </li> <li>Future developments</li> </ol>"},{"location":"tools/#tools","title":"Tools","text":"<p>You can use this tools in a modern computer for putting together your work:</p> <ul> <li>Rescomp</li> <li>Durango Imager<ul> <li>GUI utility</li> <li>CLI tools</li> </ul> </li> <li>DurangoCode</li> <li>Docker</li> <li>VSP</li> <li>nanoBoot server</li> </ul>"},{"location":"tools/#in-situ-tools","title":"In situ tools","text":"<p>If you're delevoping software for Durango, these tools running on the Durango computer itself will make things easier:</p> <ol> <li>nanoMon</li> <li>miniMoDA</li> <li>nanoBoot</li> <li>multiBoot</li> </ol>"},{"location":"dev/language/","title":"Language","text":"<p>Site map) Home &gt; Development &amp; Tools &gt; Languages</p>"},{"location":"dev/language/#languages-to-create-durango-software","title":"Languages to create Durango software","text":""},{"location":"dev/language/#assembly","title":"Assembly","text":"<p>Assembly language is, in other words, the only machine code that the 65C02 CPU understands; but instead of dealing with binary or hexadecimal codes, each opcode (including the 65C02 extensions) is represented by an abbreviation (a.k.a. mnemonic) to make things easier (or, at least, less difficult) to human beings.</p> <p>In order to translate the source code (a text file with the desired mnemonics and their operands) into the binary code to be executed by the CPU, an assembler program is recommended; although it's possible to manually translate mnemonics into the equivalent sequence of bytes, and \"poke\" them into memory thru a simple monitor utility, the use of an assembler is way easier.</p> <p>Note</p> <p>Unlike modern CPUs, the 65C02 was intended to be programmed in assembly by humans, thus the _Programmer's model is quite simple, and there are no intrinsics to be considered at all.</p> <p>Assembly source code files usually bear a <code>.s</code> extension. Most of the assembly code for the Durango Project can be assembled with Andr\u00e9 Fachat's XA65 cross assembler (GitHub repository). However, for simple routines and learning purposes, the more limited miniMoDA may be used in situ as well.</p> <p>Tip</p> <p>Since this language is natively understood by the CPU, it's potentially the MOST efficient and powerful way, in both memory usage and, especially, execution speed. On the other hand, debugging and development may be harsher; but with all the tools we supply, both for Durango itself and for the host computer, this is less of an issue.</p>"},{"location":"dev/language/#basic","title":"BASIC","text":"<p>BASIC (for Beginner's All-purpose Symbolic Instruction Code) was, by far and large, the most popular language back to the 8-bit home-computer era, to which Durango\u00b7X plays homage. In use since 1964, it makes programming quite simple and accesible to newcomers and non-technical people (much like Python does today), even if it's far from being the best in code structure and, especially, execution speed, as this is an interpreted language, thus every sentence is translated into machine code on the fly.</p>"},{"location":"dev/language/#ehbasic","title":"EhBASIC","text":"<p>This is the first (and as of December 2023, the only one) port of BASIC for the Durango\u00b7X computer. Developed at 6502.org by the late Lee Davidson, it's a barebones, portable version of the 6502 MS-BASIC dialect (the de facto standard in many 8-bit computers, especially Commodore); but our port adds support for Durango\u00b7X graphics, colour and sound plus LOAD and SAVE capabilities, both for the Virtual Serial Port if under Perdita emulation, or even on an actual SD card on real hardware with any supported storage interface (devCart, FastSPI...). A plug-in architecture makes supporting new storage devices an easy task.</p> <p>Note</p> <p>Unlike most BASICs of the day, which saved programs in a tokenised form, our EhBASIC port saves and load in ASCII form for easier interaction with modern computers.</p> <p>It's definitely a quite complex project, but you can have a look at the source code if so desired (in constant development, may be moved).</p>"},{"location":"dev/language/#bbc-basic","title":"BBC BASIC","text":"<p>Allegedly the best dialect of this language, originally developed by Sophie Wilson for the BBC's ambitious computer education project. However, this is not yet ported to the Durango architecture, but we're willing to do so, as soon as possible. Contributions welcome!</p>"},{"location":"dev/language/#gfa-basic","title":"GfA BASIC","text":"<p>A very nice IDE for this language from a more recent era, originally developed for the Atari ST range of computers. Once again, this is not yet ported to Durango, and definitely looks like a really ambitious project, but quite attractive as well. As always, contributions are welcome!</p>"},{"location":"dev/language/#c","title":"C","text":"<p>A popular system's programming language (and the reason behind UNIX's popularity) which is credited with fast execution plus all the advantages of a compiled language. Even if it's a bit overshadowed nowadays by more user friendly alternatives, it's a reasonable compromise of easiness of programming and execution efficiency, halfway between the fast, but hard assembly and the friendly, but slow BASIC.</p>"},{"location":"dev/language/#cc65","title":"CC65","text":"<p>This is one of the very few C compilers with 6502 CPU suport. Although the originally targeted machines were popular computers from the 8-bit era, we are developing Durango\u00b7X support, thru an user-friendly DurangoLib library.</p>"},{"location":"dev/language/#future-developments","title":"Future developments","text":"<p>Of course, we aren't limited to these languages; as with any other computer systems, all kind of languages can be ported to Durango\u00b7X, although sometimes its limited resources could be an issue.</p> <p>There are strong plans to port LOGO to the Durango\u00b7X computer, for educational purposes.</p> <p>There's even a proof-of-concept of a Python port, although no further work has been done.</p>"},{"location":"dev/lang/durangolib/","title":"Durango Lib","text":"<p>Site map) Home &gt; Development &gt; Languages &gt; C &gt; DurangoLib</p>"},{"location":"dev/lang/durangolib/#durangolib","title":"DurangoLib","text":"<p>DurangoLib or Durango Computer Framework is a library written in C that can be used to generate new Software for Durango.</p> <p>It's based on user friendly functions and tries to minimize development time, helping you to configure everything needed to generate a new ROM or executable.</p> <p>You can find the Source code in our Github Repository.</p>"},{"location":"dev/lang/durangolib/#prerequisites","title":"Prerequisites","text":"<p>To use this library you need the following prerequisites:</p> <ul> <li><code>make</code></li> <li>CC65</li> <li>Docker (only if you need to use the Durango Docker Image)</li> </ul>"},{"location":"dev/lang/durangolib/#installation","title":"Installation","text":"<p>To install this library you can follow two approaches:</p> <ul> <li> <p>Install in your own machine:</p> <ol> <li>Download the last Release from the release page.</li> <li>Unzip in your computer the downloaded <code>.zip</code> file.</li> <li>Create a new Environment Variable <code>DDK</code> (Durango Dev Kit) that contains the path where the <code>.zip</code> was unzipped.</li> </ol> </li> <li> <p>Use a Docker Image.</p> </li> </ul> <pre><code>docker pull zerasul/durangodevkit:latest\n</code></pre>"},{"location":"dev/lang/durangolib/#compile-durango-lib","title":"Compile Durango Lib","text":"<p>You can compile the Durango Lib, cloning the Source Code and generate a new version; you'll need the following prerequisites.</p> <ul> <li><code>make</code></li> <li>CC65.</li> <li><code>git</code></li> <li><code>curl</code></li> <li><code>zip</code> &amp; <code>unzip</code></li> </ul> <p>To compile and generate the zip file:</p> <pre><code>make &amp;&amp; make makeziplib\n</code></pre> <p>If you want to use the Docker Image:</p> <pre><code>docker run --rm -v $PWD:/src/durango zerasul/durangodevkit:latest make &amp;&amp; make makeziplib\n</code></pre> <p>Warning</p> <p>This software is under development and is not suitable for production yet. We are working to improve this library and provide more user friendly information.</p>"},{"location":"dev/lang/durangolib/#examples","title":"Examples","text":"<p>You can find in the examples folder, some examples to build. To compile each Example, you need first to Compile the Durango Framework.</p> <pre><code>git clone https://github.com/durangoretro/DurangoLib.git\nmake\n</code></pre> <p>Or if you are using Docker:</p> <pre><code>git clone https://github.com/durangoretro/DurangoLib.git\ndocker run --rm -v $PWD:/src/durango zerasul/durangodevkit:latest\n</code></pre> <p>Once you compile the last version of Durango Framework, you can compile each example:</p> <pre><code>make -C examples/\n</code></pre> <p>Or using Docker</p> <pre><code>docker run --rm -v $PWD:/src/durango zerasul/durangodevkit:latest make -C examples/\n</code></pre> <p>For more information about the examples or the Durango Lib, check the docs folder with the generated documentation.</p>"},{"location":"dev/lang/ehbasic/","title":"Ehbasic","text":"<p>Site map) Home &gt; Development &gt; Languages &gt; BASIC &gt; EhBASIC</p>"},{"location":"dev/lang/ehbasic/#durango-specific-ehbasic-commands","title":"Durango-specific EhBASIC commands","text":"<p>EhBASIC from the late Lee Davidson is intended as a generic, console-type BASIC interpreter for 6502 systems. In order to support Durango\u00b7X's graphics, colour and sound capabilities, new commands have been added to the last available version (2.22).</p>"},{"location":"dev/lang/ehbasic/#conio-interface","title":"CONIO interface","text":"<p>The standalone EhBASIC interpreter for Durango\u00b7X is supplied with a suitable minimal firmware, mostly around the <code>CONIO</code> function as included in the minimOS Operating System. There is similar CONIO support in DurangoLib C library.</p> <p><code>CONIO</code> acts as a terminal emulator; for easier parsing, most control codes are single-byte, thus the standard CONIO features are accessible thru a mixture of traditional ASCII, <code>bash</code> shortcut keys and ZX-Spectrum codes. All of them can be issued via standard <code>PRINT CHR$()</code> BASIC sentences, but a few of them have beed granted new BASIC commands for convenience:</p>"},{"location":"dev/lang/ehbasic/#cls","title":"<code>CLS</code>","text":"<p>Clears the screen. If an alternative screen is on display, will set that as the current output screen.</p> <p>Equivalent to <code>PRINT CHR$(12);</code></p>"},{"location":"dev/lang/ehbasic/#locate-cr","title":"<code>LOCATE c,r</code>","text":"<p>Moves the printing position to column <code>c</code> and row <code>r</code>; acceptable values are 0...15 in colour mode, and 0...31 in HIRES.</p> <p>Equivalent to <code>PRINT CHR$(23);CHR$(32+r);CHR$(32+c);</code></p>"},{"location":"dev/lang/ehbasic/#ink-i","title":"<code>INK i</code>","text":"<p>Sets foreground (\"ink\") colour to <code>i</code>; values go thru <code>MOD 16</code> to become 0...15, as per the standard Durango\u00b7X palette. In HIRES mode, colours are internally set but NOT displayed in any way until back into colour mode.</p> <p>Equivalent to <code>PRINT CHR$(18);CHR$(32+i);</code></p>"},{"location":"dev/lang/ehbasic/#paper-p","title":"<code>PAPER p</code>","text":"<p>Sets background (\"paper\") colour to <code>p</code>; same restrictions as above apply.</p> <p>Equivalent to <code>PRINT CHR$(20);CHR$(32+i);</code></p>"},{"location":"dev/lang/ehbasic/#cursor-n","title":"<code>CURSOR n</code>","text":"<p>Enables (when <code>n</code> is 1) or disables (0) the cursor.</p> <p>Equivalent to <code>PRINT CHR$(17);</code> (to enable) and <code>PRINT CHR$(19);</code> (to disable)</p> <p>Note</p> <p>Any odd value acts as <code>1</code>, while any even value acts as <code>0</code>.</p>"},{"location":"dev/lang/ehbasic/#video-modes","title":"Video modes","text":""},{"location":"dev/lang/ehbasic/#mode-n","title":"<code>MODE n</code>","text":"<p>Sets video mode according to the following table:</p> <ul> <li><code>0</code>: colour mode, standard video</li> <li><code>1</code>: colour mode, inverse video</li> <li><code>2</code>: HIRES mode, standard video (default mode in EhBASIC)</li> <li><code>3</code>: HIRES mode, inverse video</li> </ul> <p>Note</p> <p>Values <code>4</code> and <code>5</code>, originally intended for greyscale mode, are NOT supported as that mode is deprecated. When available, though, it could be set by <code>POKE</code>ing the appropriate value into the <code>$DF80</code> video mode register. If you want to set greyscale mode anyway, you may use the BASIC command below without the <code>OR 8</code> clause.</p> <p>Equivalent to <code>POKE $DF80, (PEEK($DF80) AND %00110000) OR ((n AND 3)&lt;&lt;6) OR 8</code> (...phew!)</p> <p>Tip</p> <p>In case you need to control Emilio's LED when fitted at bit 2 of the video mode register (<code>$DF80</code>), add <code>OR 4</code> to the expression above to turn it on (the default syntax turns it off)</p>"},{"location":"dev/lang/ehbasic/#screen-n","title":"<code>SCREEN n</code>","text":"<p>Selects one out of four available screens in Durango\u00b7X (default=3 at <code>$6000</code>) for display. In order to actually redirect text output to the selected screen, a <code>CLS</code> or equivalent command must be issued.</p> <p>Warning</p> <ul> <li>In order to write on any screen besides the standard 3, <code>Memory size</code> MUST be properly set at boot time, otherwise EhBASIC may crash! Suitable values are:<ul> <li><code>16384</code> (or <code>$4000</code>) allows use of screens 2 and 3</li> <li><code>8192</code> (or <code>$2000</code>) allows use of screens 1, 2 and 3</li> <li><code>4096</code> (or <code>$1000</code>) allows use of any screen, including 0. Since zeropage, stack and system variables live in this area, only the bottom half of the screen will be used; <code>CONIO</code> automatically accounts for that.</li> </ul> </li> <li>Graphic commands do NOT take into account the <code>CONIO</code> pointers, thus will draw into the screen on display at once. They won't respect the upper half of <code>SCREEN 0</code>, either.</li> </ul> <p>Equivalent to <code>POKE $DF80, (PEEK($DF80) AND %11000000) OR (n&lt;&lt;4) OR 8</code></p>"},{"location":"dev/lang/ehbasic/#sound-and-other-time-related-commands","title":"Sound and other time-related commands","text":""},{"location":"dev/lang/ehbasic/#beep-dp","title":"<code>BEEP d,p</code>","text":"<p>Plays a note of pitch <code>p</code> (integer value 0...42, chromatic scale from F3 to B6) for a time of <code>d</code>/50 seconds.</p> <p>In case a similar sentence is found on a ZX-Spectrum programme, it must be rewritten in Durango\u00b7X EhBASIC as <code>BEEP d*50,p+7</code>.</p> <p>Warning</p> <p>Interrupts are shut off while playing sounds, which may affect timing based on the jiffy counter (<code>$206-$209</code>)</p>"},{"location":"dev/lang/ehbasic/#pause-n","title":"<code>PAUSE n</code>","text":"<p>Waits for <code>n</code> IRQ system interrupts to happen, or until any key is pressed. Current version is limited to 255, thus a little more than a second wait. If <code>n</code> is zero, it waits for any key to be pressed, without any time limit.</p> <p>In case a similar sentence is found on a ZX-Spectrum programme, it must be rewritten in Durango\u00b7X EhBASIC as <code>PAUSE n*5</code></p>"},{"location":"dev/lang/ehbasic/#graphic-commands","title":"Graphic commands","text":"<p>These commands are inspired by those on the ZX-Spectrum, but instead of the set foreground colour, they all rely on an extra parameter for colour. There is no \"attribute area\" in Durango\u00b7X, thus any pixel is completely independent of its neighbours.</p> <p>Unlike the ZX-Spectrum, though, the origin of coordinates is at top left of the screen.</p>"},{"location":"dev/lang/ehbasic/#plot-xyc","title":"<code>PLOT x,y,c</code>","text":"<p>Draws a pixel of colour <code>c</code> (from the standard Durango\u00b7X palette) on screen coordinates <code>x,y</code>; acceptable values are 0...127 in colour mode and 0...255 in HIRES (this mode will also do <code>c MOD 2</code>, thus only odd colour values will display the pixel, otherwise is cleared).</p>"},{"location":"dev/lang/ehbasic/#line-x1y1x2y2c","title":"<code>LINE x1,y1,x2,y2,c</code>","text":"<p>Draws a line of colour <code>c</code> from screen coordinates <code>x1,y1</code> to <code>x2,y2</code>; the usual restrictions apply.</p>"},{"location":"dev/lang/ehbasic/#circle-xyrc","title":"<code>CIRCLE x,y,r,c</code>","text":"<p>Draws a circle of colour <code>c</code> and radius <code>r</code> centered at screen coordinates <code>x,y</code>; besides the usual restrictions, the whole circle must fit inside the screen, otherwise a <code>Function call Error</code> is generated.</p>"},{"location":"dev/lang/ehbasic/#rect-x1y1x2y2c","title":"<code>RECT x1,y1,x2,y2,c</code>","text":"<p>Bug</p> <p>This is NOT working on the current version. Intended to draw a filled rectangle, the command will be accepted (and its parameters checked!) but nothing will be drawn on screen.</p>"},{"location":"dev/lang/ehbasic/#loading-and-saving-programs","title":"LOADing and SAVing programs","text":"<p>Note</p> <p>In its standard form, Durango\u00b7X has no mass-storage device. But several options are available, including an SD card reader on the Development Cartridge (plus a similar sidecar SD reader, under development) and, of course, the host filesystem when running under the Perdita emulator thru the Virtual Serial Port. A plug-in system has been developed to include a suitable driver when assembling the EhBASIC binary, thru the option  <code>-DAUXIO=path-to-driver.s</code>, but there might be functional differences depending on the chosen device.</p>"},{"location":"dev/lang/ehbasic/#load","title":"<code>LOAD</code>","text":"<p>After issuing this command, if the device is available it will propmt asking for a <code>Filename</code>. If a matching file is found, it will load; otherwise, a <code>Function call Error</code> will be issued. Partial filenames are thus supported. No parameters are used.</p> <p>If <code>$</code> is stated as filename, then a Directory listing is displayed (with executable binaries preceded by a <code>*</code>) and will return to the BASIC prompt without any LOAD attempt.</p> <p>Warning</p> <p>If <code>LOAD</code> succeeds finding a file, the program previously stored in RAM will be DELETED. If a Directory listing is requested via <code>$</code> or no matching file is found, the previous program will stay intact in RAM.</p> <p>Note</p> <p><code>LOAD</code> will actually \"type\" (without echo) the contents of the chosen file, as long as it's a generic file. No other check is done!</p>"},{"location":"dev/lang/ehbasic/#save","title":"<code>SAVE</code>","text":"<p>Syntax and operation is the same as <code>LOAD</code>: use <code>$</code> for Directory listing or a complete filename for saving, when prompted. No parameters.</p> <p>Tip</p> <p>Both <code>LOAD</code> and <code>SAVE</code> use ASCII format for easy interoperation with modern computers. Note that, in case international character support is needed, CONIO is based on (a slightly modified) ISO 8859-1 charset.</p> <p>Note</p> <p>Loading or saving in Perdita thru VSP (default) does NOT support <code>$</code> directory listings, nor partial filenames.</p>"},{"location":"dev/tool/durangocode/","title":"Durango Code","text":"<p>Home &gt; Development &gt; Durango Code</p>"},{"location":"dev/tool/durangocode/#durango-code","title":"Durango Code","text":"<p>Durango Code is a Visual Studio Code extension; this extension allows you to configure and use the Durango Development tools like:</p> <ul> <li>CC65 suite.</li> <li>Durango Lib.</li> <li>Rescomp Java Application.</li> <li>Docker Durango Dev Kit Image.</li> </ul> <p>This extension adds some commands for use with Durango Based Projects:</p> <ul> <li>Create new Hello World Durango Project.</li> <li>Compile the current Durango Project.</li> <li>Clean the current Durango Project.</li> <li>Run the current Durango Project using an Emulator.</li> <li>Run the current Durango Project using the Nanoboot application for send to a Durango machine (only for Raspberry Pi).</li> <li>Compile and Run on an Emulator.</li> </ul> <p>Note</p> <p>This extension is under development and the features can change; please see changelog or the Github repository for more information.</p>"},{"location":"dev/tool/durangocode/#installation","title":"Installation","text":"<p>You can install Durango Code from the extension marketPlace using the Extension tab on Visual studio Code; just search \"Durango Code\" and press install.</p> <p></p> Durango Code Extension Installation <p>Note</p> <p>Durango Code is compatible with Visual Studio Code 1.75 or higher.</p> <p>Also, you can install manually from the Durango Code Release page:</p> <p>https://github.com/durangoretro/durangocode/releases.</p> <p>Just download the .vsix file, and press on Visual studio code ctrl+shift+p later, select the Extensions: install from vsix....</p>"},{"location":"dev/tool/durangocode/#configuration","title":"Configuration","text":"<p>Before use Durango Code, you need to configure the extension; you can find the Configuration pressing ctrl+, or select the File-&gt;Preferences-&gt;settings menu.</p> <p>Durango Code have the next Configuration to custom your Durango Development Tools installation:</p> <ul> <li><code>Perdita Path</code>: The current Durango-x Emulator executable Path.</li> <li><code>NanoBoot Path</code>: The current NanoBoot executable Path.</li> <li><code>DDK</code>: Overrides the current <code>DDK</code> environment Variable.</li> <li><code>Custom Rescomp Jar</code>: Custom Rescomp Jar application path. By default is on <code>$DDK/rescomp/rescomp.jar</code>.</li> <li><code>romLocation</code>: Location where the Rom is generated after compilation. By default is rom.dux.</li> <li><code>DockerImageName</code>: Durango Dev Kit Docker Image Name; by default <code>zerasul/durangodevkit</code>.</li> <li><code>toolchain Type</code>: Select the current Toolchain type:<ul> <li><code>Native</code>: Use Native Commands (Depends on Operating System).</li> <li><code>Docker</code>: Use Docker Image implementation.</li> </ul> </li> </ul>"},{"location":"dev/tool/durangocode/#usage","title":"Usage","text":"<p>To use the Durango Code commands you need to enter to the VScode Commands palette (ctrl+shift+p) and see the commands starting with <code>Durango Code:</code>.</p> <p></p> Durango Code Commands <p>Select the command and you can see a new Terminal called \"durango.code\" with the result of the command.</p> <p>For more information about Durango Code or add some issues, please see the Github Repository:</p> <p>https://github.com/durangoretro/durangocode/</p>"},{"location":"hard/arch/","title":"Durango","text":"<p>Site map) Home &gt; Hardware &gt; Architecture</p>"},{"location":"hard/arch/#the-durango-architecture","title":"The Durango architecture","text":"<p>The Durango project attempts to make a 80s-style home computer based on readily available components: besides CPU and memory, everything else is just ordinary logic circuits (74xx series) -- no PIA, VIA, CRTC, ACIA etc.</p>"},{"location":"hard/arch/#range","title":"Range","text":"<p>Since the Durango\u00b7X computer was designed with modularity in mind, you may choose the desired set of features, or deal with alternative models:</p> <ul> <li>Durango\u00b7X: Fully featured computer with both HIRES and colour video modes.</li> <li>Durango\u00b7S: No HIRES, only colour video mode (128 x 128 px, 16 colours).</li> <li>Durango\u00b7R: No colour, just HIRES video mode (256 x 256 px, monochrome) and somewhat reduced component count.</li> <li>Durango\u00b7C: Simplified, GAL-based version of \u00b7X with a lot less soldering. (under development)</li> <li>Durango Pocket: Handheld 2 MHz version, although not ~~fully~~ compatible. (under development)</li> </ul>"},{"location":"hard/arch/#durangox-sbc","title":"Durango\u00b7X SBC","text":""},{"location":"hard/arch/#overview","title":"Overview","text":"<p>As previously mentioned, this is a 80s-style home computer made out of readily available components, with no computer-specific chips besides CPU and RAM.</p>"},{"location":"hard/arch/#specifications","title":"Specifications","text":"<p>Main specs for the original (v1) version of this computer are:</p> <ul> <li>CPU: 65C02 @ 1.536 MHz</li> <li>ROM: on external cartridge, up to 32 KiB (more with bankswitching)</li> <li>RAM: 32 KiB (static)</li> <li>Expansion: parallel 8-bit bus with 16 addresses for keyboards, joysticks, storage devices...</li> <li>Video output: RGB SCART connector for a CCIR (PAL) TV, composite greyscale, composite PAL or Sync-on-green (options available).</li> <li>Controls: Power switch (optional), <code>RESET</code> button, <code>NMI</code> (interrupt) button.</li> <li>Connectivity: nanoLink input (synchronous serial) for reception of data &amp; code.</li> <li>Footprint: 5.1\" x 7\", rounded corners (129.54 x 177.8 mm)</li> </ul>"},{"location":"hard/arch/#improvements-for-v2","title":"Improvements for v2","text":"<p>Both issues are essentially 100% compatible, but some improvements were made in v2:</p> <ul> <li>CPU: now at 1.75 MHz with switchable turbo mode (3.5 MHz)</li> <li>Video output: RGB SCART connector for a CCIR (PAL) TV or component video options (PAL and sync-on-green deprecated).</li> <li>Controls: Built-in power switch, <code>RESET</code> button, debounced <code>NMI</code> button.</li> </ul> <p>Otherwise, they are the same (including the footprint). v2.1 is essentially an alternative, improved routing for the v2 PCB, thus they're based on the very same schematic.</p>"},{"location":"hard/arch/#options","title":"Options","text":"<p>Whithin the same board, you may choose from several building options:</p> <ul> <li>Supported video modes:<ul> <li>Colour only (Durango\u00b7S)</li> <li>HIRES only (Durango\u00b7R)</li> <li>Both modes (Durango\u00b7X, recommended option)</li> </ul> </li> <li>Monitor output:<ul> <li>SCART (colour via RGB, recommended option)</li> <li>Sync-on-green (v1) / Component video (v2+)</li> <li>Second audio/video output</li> </ul> </li> <li>Composite encoding:<ul> <li>Greyscale (standard in v1)</li> <li>Luminance (standard in v2+, recommended option)</li> </ul> </li> <li>PAL encoder (for composite output, v1 only, NOT recommended)</li> <li>Piezo buzzer for audio</li> <li>Debug port</li> </ul> <p>Tip</p> <p>Together with the v2.1 issue, there is an alternative PCB for EIA (NTSC) 60 Hz countries. Main differences include an 1.57 MHz clock speed (3.15 with turbo option) and a button for momentarily displaying the bottom 64 rasters, which normally cannot be displayed on a 60 Hz screen.</p> <p>Warning</p> <p>It is known that many modern TVs are not compatible with the 240p/288p signal supplied by Durango-X thru the Component Video input. In such cases, if a suitable YPbPr-to-HDMI converter is not available (we're researching on that), you may always use the composite video input, although in greyscale mode. Note that this will perform fine in HIRES mode.</p> <p>Tip</p> <p>If you can hook a PlayStation 2 thru Component video input and properly play a PS1 game on it, your TV is most likely compatible with Durango-X.</p>"},{"location":"hard/arch/#palette","title":"Palette","text":"<p>In colour mode, Durango\u00b7X uses a 16-colour fixed palette, where 2 bits are assigned to green, while the remaining two bits of each nybble represent the red and blue values in full.</p>"},{"location":"hard/arch/#irq-generation","title":"IRQ generation","text":"<p>Durango\u00b7X has a switchable interrupt generator, working at a fixed rate of 250 Hz (4 ms period). These are not latched in any way, thus lost interrupts do not queue up.</p>"},{"location":"hard/arch/#theory-of-operation","title":"Theory of Operation","text":"<p>This document deploys detailed information about the Durango\u00b7X computer operation.</p>"},{"location":"hard/arch/#hacks","title":"Hacks","text":"<p>Some modifications for improved functionality:</p>"},{"location":"hard/arch/#hardware-pause","title":"Hardware PAUSE","text":"<p>This is pretty simple: the 6502's <code>RDY</code> line (which was intended to allow synchronisation with slow memory chips) is not used in Durango\u00b7X, and simply connected to a pull-up resistor (on RN1). But the pin itself is available in the <code>STEP</code> connector (J10), thus halting the CPU is as simple as grounding this pin; you might use the ground pin (labelled <code>G</code>) on the nearby nanoLink connector (J1). No debouncing or any additional hardware is needed, and no ill effects are to be expected.</p>"},{"location":"hard/arch/#overclocking","title":"Overclocking","text":"<p>While most components on Durango\u00b7X are way faster than actually needed (except the U3 SRAM, because of multiplexing), overclocking this computer is not as simple as changing the oscillator (X1) as all video timings come from this, and would be thrown off otherwise.</p> <p>Tip</p> <p>issue v2+ includes a TURBO jumper as a built-in overclocking feature and doesn't need anything else, as long as your CPU and RAM are fast enough to cope with it!</p>"},{"location":"hard/arch/#alternative-oscillator","title":"Alternative oscillator","text":"<p>v2 issue (for CCIR/PAL/50 Hz countries) is based on a 28 MHz crystal oscillator intended for perfectly square pixels; but being a relatively odd frequency, it could be difficult to source. An alternative oscillator (of a very common 25.175 MHz frequency) can be used instead, with a bit of rewiring. The newly designed EIA/NTSC/60 Hz version already uses this readily available oscillator.</p>"},{"location":"hard/arch/#powerdurango","title":"PowerDurango","text":"<p>Durango's 65C02 CPU can be replaced with a more advanced 65C816 -- an adapter board is needed because pinout and signals aren't fully compatible. From the software side, the 65C816 is able to run 65C02 with 100% compatibility, but not the opposite.</p> <p>Note</p> <p>In order to get any performance improvement with the 65C816, specific native code must be used -- which won't be compatible with the regular 65C02. The computer's architecture also limits the memory map to 64 KiB, mirrored to fill the whole 16 MiB address space of the '816.</p>"},{"location":"hard/arch/#cartridges","title":"Cartridges","text":"<p>Since there's no ROM in Durango\u00b7X, it's essential the use of a cartridge with suitable firmware. In case you want to load software off an SD card, you'll need at least a cartridge with a suitable bootloader.</p>"},{"location":"hard/arch/#overview-pinout","title":"Overview &amp; pinout","text":"<p>A readily available 36-pin edge connector is used for the cartridge. Most cartridge boards can be fitted inside a Commodore 64 cartridge box.</p> <p>Warning</p> <p>Height constraints inside the C64 cartridge preclude the use of sockets for the cartridge's ICs.</p>"},{"location":"hard/arch/#mini-cartridge","title":"mini-cartridge","text":"<p>Basic cartridge to supply a ROM (8 - 64 KiB, up to 32 KiB simultaneously). It's a very small and inexpensive board but won't fit inside a C64 cartridge.</p>"},{"location":"hard/arch/#devcart","title":"devCart","text":"<p>This Development Cartridge is able to supply a 16 KiB ROM, but sports 32 KiB of shadow RAM which can be loaded from the supplied SD card interface and be used to emulate ROM, for maximum convenience. This board is very tall and, once again, won't fit inside a C64 cartridge.</p> <p>The so-called ShadowRAM cartridge is the same but, thanks to the use of Surface Mount Devices and a pluggable SD card reader, reduced in size, so it does actually fit inside a C64 cartridge. Otherwise, it's functionally identical to the devCart, although it allows to access up to 32 KiB of ROM.</p>"},{"location":"hard/arch/#bankswitching","title":"Bankswitching","text":"<p>Bankswitching was a common technique in the 8-bit era, extending beyond the 64 KiB addressing limit. With bigger EPROM/EEPROM/Flash chips (128 KiB - 1 MiB) available in a still hobbyist-friendly DIP-32 package, we developed a board that fits inside a C64 cartridge and splits the ROM into 16 or 32 KiB banks which are switched by software (bank size is configurable via a jumper)</p> <p>Warning</p> <p>The whole cartridge space is swapped when switching banks so, in case you're switching from the ROM code itself, care must be taken.</p> <p>Another bankswitching cartridge is not controlled by software, but triggers a counter from the <code>RESET</code> signal. Once again configurable for 16 or 32 KiB banks, allows the combination of several software titles in one single cartridge.</p>"},{"location":"hard/arch/#universal-cartridge-new","title":"Universal cartridge (new)","text":"<p>A newly designed cartridge which allows the use of almost any EPROM/EEPROM/Flash on 24, 28 or 32-pin package, from 2 KiB to 1 MiB. It also includes options for both bankswitching and a Programmable Sound Generator like the one available as a riser card (see below), with improved audio output. Fits inside a standard C64 cartridge, as well.</p>"},{"location":"hard/arch/#riser-boards","title":"Riser boards","text":"<p>These boards go between a regular cartridge and the Durango\u00b7X computer, passing thru all signals but adding extra functionality. As of December 2023 they are:</p> <ul> <li>Extra sound capabilities with the SN76489A Programmable Sound Generator.</li> <li>A breakout board for easier probing of all of the cartridge's signals.</li> </ul>"},{"location":"hard/arch/#veracruz-cartridge-format","title":"Veracruz cartridge format","text":"<p>Veracruz will be a much more advanced 65C816-based computer with huge memory and built-in firmware, although extendable thru cartridges with a new 44-pin format. However, it will be possible to fit a Durango (36-pin) cartridge into Veracruz's 44-pin slot, although actual compatibility is unknown. Will physically fit inside a C64 cartridge as well.</p>"},{"location":"hard/arch/#peripherals-interfaces","title":"Peripherals &amp; Interfaces","text":"<p>Durango\u00b7X has some ports for peripheral connection:</p>"},{"location":"hard/arch/#nanolink","title":"nanoLink","text":"<p>This is an input port, simply connected to the <code>NMI</code> and <code>IRQ</code> interrupt lines thru discrete open collector drivers. Its main use is to form a synchronous serial port to receive code from a Raspberry Pi via its GPIO pins.</p> <p>nanoLink is also the name of a communications protocol (under development) which, by adding a suitable output port, will allow data transfers between Durangos.</p>"},{"location":"hard/arch/#iox-bus","title":"IOx bus","text":"<p>This is the main Peripheral Bus with inexpensive IDC-16 connectors, allowing daisy-chaining up to 16 devices.</p>"},{"location":"hard/arch/#keyboard-gamepads","title":"Keyboard &amp; Gamepads","text":"<p>The standard keyboard for Durango\u00b7X fits atop the main board, covering it and providing two gamepad ports, in either NES or Megadrive format.</p>"},{"location":"hard/arch/#layout-matrix","title":"Layout &amp; matrix","text":"<p>This keyboard is based on the ZX Spectrum layout and matrix, and is indeed electrically compatible. However, no single-key commands are available, and it has been adapted to support Spanish characters.</p>"},{"location":"hard/arch/#extended-keyboard-under-development","title":"Extended keyboard (under development)","text":"<p>An improved, separate keyboard for more comfortable typing.</p>"},{"location":"hard/arch/#other-iox-devices","title":"Other IOx devices","text":"<p>Thanks to the versatility of the IOx Peripheral Bus, several devices have been developed -- with many more to come!</p>"},{"location":"hard/arch/#nanolink-output","title":"nanoLink output","text":"<p>Allows intercommunication between Durangos.</p>"},{"location":"hard/arch/#fastspi-i2c","title":"FastSPI &amp; I<sup>2</sup>C","text":"<p>Experimental board with much faster SPI for improved SD card performance. Now with an I<sup>2</sup>C port as well.</p>"},{"location":"hard/arch/#pask","title":"PASK","text":"<p>A semi-intelligent keyboard that never materialised, but did set some standards. Used for a Raspberry Pi-based keyboard emulator, might be considered as a bidirectional paralell port.</p>"},{"location":"hard/arch/#gpio","title":"GPIO","text":"<p>Similar to the above, but with non-latching input. Jumper-selected pin directions.</p>"},{"location":"hard/arch/#sidecar-devices","title":"Sidecar devices","text":"<p>Mechanically speaking, sidecar devices are boards that fit on Durango's left side. Electrically, is just another IOx port with a different connector (2x8 pin socket).</p>"},{"location":"hard/arch/#sd-rtc","title":"SD + RTC","text":"<p>This is essentially the FastSPI board in the sidecar form factor. The built-in I<sup>2</sup>C port allows the connection of an inexpensive Real Time Clock, particularly useful when dealing with storage devices.</p>"},{"location":"hard/arch/#accessories","title":"Accessories","text":"<p>Things not necessarily computer-related, but they can account for a better experience:</p>"},{"location":"hard/arch/#keyboard-overlay","title":"Keyboard overlay","text":"<p>A Minstrel-inspired board with bigger, clearer silkscreen atop the keyboard.</p>"},{"location":"hard/arch/#component-video-output","title":"Component Video output","text":"<p>Compatibility with modern TVs lacking the SCART connector!</p>"},{"location":"hard/arch/#powerdurango-adapter","title":"PowerDurango adapter","text":"<p>This accessory allows Durango\u00b7X (or almost any 6502-based computer) the use of a much more powerful 65C816 CPU, albeit limited to the usual 64 KiB address space.</p>"},{"location":"hard/previous/","title":"Previous","text":"<p>Site map) Home &gt; Hardware &gt; Precursors</p>"},{"location":"hard/previous/#precursors","title":"Precursors","text":"<p>Before the birth of Durango\u00b7X, several other attempts were made, with varying degrees of success.</p>"},{"location":"hard/previous/#sdd-chihuahua","title":"SDd / Chihuahua","text":"<p>Originally standing for Didactic Development System, was a simple 1 MHz CPU 65C02 + VIA 6522 computer on a breadboard, intended to teach Hardware Fundamentals in the vocational school. Not all address pins were conected, thus limited to 4 KiB ROM and 2 KiB RAM.</p> <p>Actually my first working 6502 design.</p> <p>Chihuahua was essentially the same design on a compact protoboard, but there was some strange bug that prevented proper communication between CPU and VIA. An improved Chihuahua PLUS with full addressing range was started, but never finished.</p> <p>There is a revival of the Chihuahua concept with some interfaces from the Durango\u00b7X computer.</p>"},{"location":"hard/previous/#durango-proto","title":"Durango-PROTO","text":"<p>The original Durango incarnation intended as a CPU tester, then an external VDU was added thru a preliminary IOx bus. Originally a 1 MHz, 32 KiB RAM, 16 KiB ROM system, soon was expanded to 32 KiB ROM with the familiar 128-byte I/O area. The external VDU was monochrome, 128 x 128 pixels.</p>"},{"location":"hard/previous/#abandoned-projects","title":"Abandoned projects","text":""},{"location":"hard/previous/#baja","title":"Baja","text":""},{"location":"hard/previous/#sdx","title":"SDx","text":""},{"location":"hard/previous/#acapulco","title":"Acapulco","text":""},{"location":"hard/previous/#jalapa","title":"Jalapa","text":""},{"location":"hard/previous/#tampico","title":"Tampico","text":""},{"location":"hard/bus/iox/","title":"Iox","text":"<p>Home &gt; Hardware &gt; Peripherals &gt; IOx</p>"},{"location":"hard/bus/iox/#iox-expansion-bus","title":"IOx expansion bus","text":""},{"location":"hard/bus/iox/#description","title":"Description","text":"<p>In its original form, the Durango-X home computer has very limited I/O: a single-bit beeper, the interrupt enable port and, most importantly, the built-in video output. But almost any other device can be connected via the IOx expansion bus, which is an 8-bit parallel bus with 16 addresses, for easy daisy-chaining of peripherals.</p> <p>The main PCB bears a single  IOx connector; but the proposed keyboard+gamepads interface (which, incidentally, connects to the main PCB thru that) has 2 IOx connectors for convenience. As noted below, this standard interface board takes three addresses for all its supplied devices (keyboard, gamepad1, gamepad2).</p>"},{"location":"hard/bus/iox/#connector-pinout","title":"Connector Pinout","text":"<p>The IOx bus uses a readily available IDC-16 socket which prevents reverse insertion; but regular 1/10\" pin headers and sockets may be used, even DuPont connectors for testing purposes. If a board has more than one IOx socket, they'll be connected in parallel, thus completely interchangeable.</p> <p>IOx connector seen from above (component side):</p> Bottom Top Shroud # ##### ##### # # <code>+5V</code> <code>PD0</code> # # <code>BA0</code> <code>PD1</code> # # <code>BA1</code> <code>PD2</code> # <code>BA2</code> <code>PD3</code> # <code>BA3</code> <code>PD4</code> # # <code>/WR</code> <code>PD5</code> # # <code>/SEL</code> <code>PD6</code> # # <code>GND</code> <code>PD7</code> # # ##### ##### #"},{"location":"hard/bus/iox/#sidecar-connector","title":"Sidecar connector","text":"<p>Besides the IDC socket, Durango-X has a right-angle pin socket for bigger peripherals which should lay levelled with the main PCB. Pinout is the same, although with the bottom and top rows swapped.</p>"},{"location":"hard/bus/iox/#signal-descriptions","title":"Signal descriptions","text":"Signal Description Direction (rel. CPU) Notes <code>+5V</code> Power Power Output Most peripherals could take power from this line. Maximum recommended power draw: 350 mA (combined). <code>GND</code> Ground Power Output Mandatory connection, even is the peripheral is self-powered. <code>PD0-PD7</code> Peripheral Data Bus Input/Output Must be kept in high-impedance state when <code>/SEL</code> is high. <code>BA0-BA3</code> Buffered Address Bus Output Constantly exposing the CPU's lower address bits. <code>/WE</code> Write Enable Output Active low when the CPU writes to the peripheral; not qualified, must be set around the same time as <code>BAx</code>. <code>/SEL</code> IOx Select Output Active low when the CPU interacts with the IOx bus; must be qualified via the Clock signal. <p>Note</p> <p>Peripherals can not ask for CPU attention, other than polling.</p> <p>Warning</p> <p>The maximum current draw for peripheral boards (350 mA) is based on the USB standard guaranteed 500 mA, minus Durango-X maximum power rating (about 150 mA at 5V). While many power supplies are able to exceed this guaranteed minimum, caution is advised if your preipheral setup is going over 350 mA total as the PCB layout and tracks aren't intended for high intensities.</p> <p>As always, the use of quality, brand-name power adapters is highly recommended, both for output stability and safety reasons.</p>"},{"location":"hard/bus/iox/#signal-timing","title":"Signal timing","text":"<p>IOx bus transactions are similar to regular memory accesses, thus Durango-X will assert the <code>/SEL</code> signal (qualified) for half a cycle, or about 325 nS; but peripherals are expected to respond in a reasonably faster fashion, to account for glue logic delays.</p> <p>Note</p> <p>Most modern revisions of the Durango computers are faster, down to a reasonable 125 nS transaction time. On the other hand, some other devices compatible with the IOx expansion bus (e.g. Chihuahua, Rosario SBCs) may use much longer transaction times; in any case, the peripheral device should keep the requested data until <code>/SEL</code> is negated or, if on a write transaction, latch the data at the rising edge of <code>/SEL</code>.</p>"},{"location":"hard/bus/iox/#address-decoding","title":"Address decoding","text":"<p>All peripherals should provide their own address decoding, although that could be a very simple circuit. In any case, no attached peripheral should write to the IOx bus unless the <code>/SEL</code> line is low and the current address is within its assigned range.</p> <p>In most cases, a 74HC138 decoder is all that's needed.</p>"},{"location":"hard/bus/iox/#port-assignations","title":"Port assignations","text":"<p>In order to avoid conflicts, no attached peripherals should share any address, especially when expected to write to the bus. Note that the Read/Write line may be used as an extra address, if properly decoded.</p> <p>A common address may be shared between peripherals, however, as long as they are never connected at the same time.</p> <p>Here follows a list of currently produced or projected peripheral addresses. This will be frequently updated.</p> Address Dir. (CPU) Peripheral Port description <code>$0</code> write external VDU Address High Latch <code>$0</code> read FREE - <code>$1</code> write external VDU Address Low Latch <code>$1</code> read FREE - <code>$2</code> write external VDU Data write <code>$2</code> read FREE some external VDUs may read VRAM <code>$3</code> I/O Virtual Serial Port* Data I/O <code>$4</code> I/O Virtual Serial Port Configuration <code>$5</code> I/O FREE - <code>$6</code> I/O FastSPI SPI Data R/W <code>$7</code> write FastSPI with I2C <code>D0...D3 = /SPI_DEV</code>, <code>D4 = I2C_SCL</code>, <code>D5 = I2C_SDA</code> <code>$7</code> write nanoLink output (v1) <code>D0=SERDAT</code>, <code>D1=SERCLK</code> <code>$7</code> read FastSPI with I2C Send SPI clock; return value is <code>D0...D3 = /SPI_DEV</code>, <code>D6 = I2C_SCL</code>, <code>D7 = I2C_SDA</code> <code>$8</code> write Static RAM storage Address High Latch <code>$0</code> read FREE - <code>$9</code> write Static RAM storage Address Low Latch <code>$0</code> read FREE - <code>$A</code> I/O Static RAM storage Data I/O <code>$A</code> I/O PASK parallel port Data I/O (currently input only) <code>$B</code> write Matrix Keyboard Select column <code>$B</code> read Matrix Keyboard Read rows <code>$C</code> write Gamepads Latch status <code>$C</code> read Gamepad 0 Read status <code>$D</code> write Gamepads Shift data (NES only, but ignored by MD) <code>$D</code> read Gamepad 1 Read status <code>$E</code> write nanoLink output (v2+) <code>D0=SERDAT</code>, <code>D1=SERCLK</code> <code>$E</code> read FREE may become Parallel GPIO, combining nanoLink and a bit-banged SPI interface <code>$F</code> I/O RESERVED - <p>Note</p> <p>The Virtual Serial Port is not a real hardware device, but some software (especially in development) may access these ports.</p> <p>Warning</p> <p>The Static RAM card and the PASK keyboard/paralell port are incompatible and should NOT be connected at the same time! Older (v1) revisions of the nanoLink output board are incompatible with the FastSPI, but this will change in later revisions.</p>"},{"location":"hard/cart/pinout/","title":"Pinout","text":"<p>Home &gt; Hardware &gt; Durango &gt; Cartridges &gt; Pinout</p>"},{"location":"hard/cart/pinout/#durango-x-cartridge-pinout","title":"Durango-X cartridge pinout","text":""},{"location":"hard/cart/pinout/#connection-to-the-computer","title":"Connection to the computer","text":"<p>Durango-X uses a readily availbale 36-pin edge connector (2.54 mm pitch) as a cartridge port, supplying all necessary signals, plus some other for future expansion. Thus, the edge of the cartridge PCB can be inserted for a reliable connection.</p>"},{"location":"hard/cart/pinout/#pinout","title":"Pinout","text":"<p>Cartridge connector as seen from above (component side, using KiCAD numbering):</p> front pin # front pin signal back pin signal back pin # 35 <code>!RESET</code> <code>VCLK</code> 36 33 <code>D3</code> <code>GND</code> 34 31 <code>D4</code> <code>D2</code> 32 29 <code>D5</code> <code>D1</code> 30 27 <code>D6</code> <code>D0</code> 28 25 <code>D7</code> <code>A0</code> 26 23 <code>!ROM_CS</code> <code>A1</code> 24 21 <code>A10</code> <code>A2</code> 22 19 <code>!ROM_OE</code> <code>A3</code> 20 17 <code>A11</code> <code>A4</code> 18 15 <code>A9</code> <code>A5</code> 16 13 <code>A8</code> <code>A6</code> 14 11 <code>A13</code> <code>A7</code> 12 9 <code>A14</code> <code>A12</code> 10 7 <code>+5 V</code> <code>!WE</code> 8 5 KEY KEY 6 3 <code>!IOC</code> <code>AUDIO IN</code> 4 1 <code>!IRQ</code> <code>!NMI</code> 2 <p>Note</p> <p>Pins 5 &amp; 6 have no connection and are designed as a key to prevent accidental reverse insertion of the cartridge. Cartridge PCBs must have a slot at this position, whereas the connector on the computer should have its corresponding pins removed and, if possible, with some filling inside.</p>"},{"location":"hard/cart/pinout/#signal-description","title":"Signal description","text":"<p>Signal direction is as seen from the computer's point of view:</p> Signal direction Description <code>+5 V</code>, <code>GND</code> Out Power supply from the computer. <code>D0-D7</code> I/O Data bus. <code>A0-A14</code> Out Address bus (<code>A15</code> is missing but it's mostly the inverse of <code>!ROM_CS</code>) <code>!RESET</code> Out Active-low reset. Cartridges cannot request a computer reset. <code>VCLK</code> Out Main Phi 0 clock signal (1.536 MHz) <code>!IRQ</code> In Active-low Interrupt ReQuest, must be an open collector signal from cartridge or, at least, use a diode with the anode on the connector pin. <code>!NMI</code> In Non-Maskable Interrupt (edge-sensitive), must be open collector as the above one. <code>!IOC</code> Out Active-low Cartridge I/O enable (addressed at <code>$DFC0-$DFFF</code>, VCLK-qualified), completely custom, just for decoding convenience. <code>!WE</code> Out Active-low Write enable; not used for ROMs but useful for shadow RAM and I/O. VCLK-qualified for convenience. <code>!ROM_CS</code> Out Active-low ROM Chip Select, nominally <code>!A15</code> NAND <code>!IO</code> (excludes I/O area at <code>$DF80-$DFFF</code>) <code>!ROM_OE</code> Out Active-low ROM Output enable, nominally <code>VCLK</code> NAND <code>R!W</code> (note it's VCLK-qualified) <code>AUDIO IN</code> In For cartridges providing sound hardware, this pin is connected to the Audio mixer thru a diode. Analogue signals must provide a ~3.15 V DC bias and ~3.8 Vpp max. amplitude for optimum performance."},{"location":"hard/cart/pinout/#reset-line","title":"RESET line","text":"<p>This is intended to be detected by some cartridges, either for resetting any additional hardware they may contain, or to switch between software inside a large ROM in a suitable multi-cartridge (under development). There is no way for the cartridge to reset the whole computer by itself!</p>"},{"location":"hard/cart/pinout/#audio-in","title":"Audio In","text":"<p>Since the built-in audio capabilities of Durango-X are quite limited, there is the option of including audio-generating circuitry inside a cartridge, mixing its audio output with the single-bit built-in device. Mostly designed with square wave generators in mind, it's possible to inject an analogue signal as long as the proper bias (~3.15 V) is supplied. In its simplest way, this could be achieved thru a voltage divider between the power pins -- a 3.3K resistor to +5V and a 5.6K one to ground could be a simple solution, with a suitable coupling capacitor (e.g. 10 \u00b5F) between the generator's output (as long as it supports load impedances below ~2 Kohm) and the divider.</p>"},{"location":"hard/cart/pinout/#form-factor","title":"Form factor","text":"<p>Although the current cartridges are intended to be used as bare PCBs, the preferred form factor for Durango cartridges is the same as used on Commodore 64 cartridges for convenience. Note the 36-pin PCB is narrower than the original's 44-pin, thus the edge connector must provide appropriate offset.</p>"},{"location":"hard/dx/eia/","title":"Eia","text":"<p>Home &gt; Hardware &gt; Durango &gt; Durango\u00b7X &gt; EIA (60 Hz) version</p>"},{"location":"hard/dx/eia/#eia-ntsc-60-hz-version","title":"EIA (NTSC) 60 Hz version","text":"<p>Although Durango\u00b7X was initially designed around the CCIR TV standards used in Spain and in most PAL countries, there is an alternative version compatible with the EIA standard most used in NTSC countries, allowing worldwide use of this computer architecture.</p> <p>Note</p> <p>Although the terms PAL and NTSC are commonly used to describe the regional versions of many consoles and home computers, these are not accurate for the Durango computers, as they lack a chroma subcarrier encoded in either PAL or NTSC (or SECAM, for that matter), using direct RGB or component video connections instead, for higher quality picture. But the refresh rates and number of rasters must match the desired standard (625/50 for CCIR and 525/60 for EIA) in any case.</p> <p>Most of the times EIA countries use NTSC for colour encoding, and CCIR use PAL, but not always.</p>"},{"location":"hard/dx/eia/#specs","title":"Specs","text":"<ul> <li>1.57 MHz (3.15 MHz with turbo option) from a readily available 25.175 MHz VGA oscillator.</li> <li>Component video output and/or greyscale composite signal (SCART is not available).</li> <li>Display: 256 x 192 pixels in monochrome HIRES or 128 x 96 pixels in the usual 16-colour mode</li> <li>Momentary display of the bottom 64 rasters (64 lines in HIRES, 32 in colour) for existing software compatibility.</li> </ul> <p>Remaining specs are the same as the CCIR (50 Hz) version.</p> <p>Warning</p> <p>It is known that many modern TVs are not compatible with the 240p signal supplied by Durango-X thru the Component Video input. In such cases, if a suitable YPbPr-to-HDMI converter is not available (we're researching on that), you may always use the composite video input, although in greyscale mode. Note that this will perform fine in HIRES mode.</p> <p>Tip</p> <p>If you can hook a PlayStation 2 thru Component video input and properly play a PS1 game on it, your TV is most likely compatible with Durango-X.</p>"},{"location":"hard/dx/irq/","title":"Irq","text":"<p>Site map) Home &gt; Hardware &gt; Durango &gt; Durango\u00b7X &gt; IRQ</p>"},{"location":"hard/dx/irq/#durango-x-irq-generation","title":"Durango-X IRQ generation","text":""},{"location":"hard/dx/irq/#caveats","title":"Caveats","text":"<p>Unlike most computers, where some dedicated peripheral chip works as an interrupt controller, latching the interrupt request until acknowledged by the CPU's ISR (Interrupt Service Routine), Durango-X uses a simple counter (U14, 74HC4040) plus a few Schmitt-trigger gates for the generation of a brief pulse (around 10 \u00b5s) for the IRQ input, as long as it's not disabled via the Interrupt Enable Port at <code>$DFAx</code>. Thus, no acknowledge is possible or necessary.</p> <p>Since the IRQ pulse is not latched, there is an increased risk of losing interrupts whenever some critical code is executed with interrupts masked (via the <code>SEI</code> opcode), as other systems will service the pending request as soon as the interrupt mask is cleared. This, however, shouldn't be a concern, as longer critical code may anyway lose some interrupts even in other computers, as they usually won't queue IRQs.</p> <p>The real issue, though, is the length of the IRQ pulse, as it's generated in an analogue way thru an RC-network and a Schmitt-trigger gate. Several factors, including component tolerances, may affect actual lenght which, by the way, is by no means constant. The nominal value, 10 \u00b5s (about 15 clock cycles) is both long enough for reliable IRQ triggering, and short enough not to be a problem with succint ISRs -- whose overhead is at least 7+6 cycles for the trigger sequence plus the mandatory <code>RTI</code> at the end, adding on top of that whatever time takes to finish the current instruction.</p> <p>There is definitely quite a bit of tolerance on the IRQ pulse length, although some extreme cases could be troublesome.</p>"},{"location":"hard/dx/irq/#long-interrupt-pulses","title":"Long interrupt pulses","text":"<p>Unless you're dealing with a really short ISR, the IRQ pulse can be way longer than the specified value without too much trouble. Note that the Durango-X Hardware test uses a minimal ISR for testing, thus might fail the test without any other apparent issues. In extreme cases, though, the IRQ pulse may last longer than the ISR itself, thus triggering a second time at once. Again, this is hardly an issue, save for any interrupt-based timing being thrown off.</p> <p>If you suspect about this, and are able to run EhBASIC, you may <code>RUN</code> the following code to check the interrupt timing:</p> <pre><code>1 PRINT DEEK($206)/250:GOTO 1\n</code></pre> <p>Which should print the system time  scrolling in seconds, in a remarkably accurate fashion. A long interrupt pulse would make the count faster!</p> <p>In order to shorten the IRQ pulse, the value of <code>R26</code> (nominally 100 K) and/or <code>C8</code> (68 pF) should be reduced -- usually the former is preferred, as a second resistor in parallel with <code>R26</code> will do. Note that the use of a 74HCT132 for <code>U8</code> (instead of the recommended HC) will effectively stretch the pulse to about twice its length.</p> <p></p> IRQ pulse with HCT and 100 Kohm, actual length is 11.2 \u00b5s as indicated by the cursors; the displayed pulse is stretched by probing the RC network <p>Note</p> <p>The IRQ circuit was redesigned in the v2 issue; the functionality of <code>U8</code> has been replaced by spare gates from <code>U32</code> (74HC245) which, in case it's the HCT version, will shorten the IRQ pulse instead; for correction, <code>R26</code> and <code>C8</code> still operate the same way.</p>"},{"location":"hard/dx/irq/#short-interrupt-pulses","title":"Short interrupt pulses","text":"<p>On the other hand, this is more likely to cause problems. Unlike the NMI, the 6502 samples the IRQ line after the end of each instruction; some opcodes may take up to 7 clock cycles or ~4.6 \u00b5s -- anything shorter during the execution of such instructions might be missed. Surprisingly, the current version of Hardware test code runs pretty short opcodes, thus being quite tolerant about this.</p> <p></p> IRQ pulse with HC and 22 Kohm; again actual length is 1.36 \u00b5s as indicated by the cursors, which is way too short <p>As mentioned, losing interrupts frequently might have the effect of impairing (or completely disabling) the keyboard/gamepad response, besides any timing alterations. Once again, running the EhBASIC code above (if you're able to type it!) will confirm this -- too short of a pulse will make the second count slower.</p> <p>Similarly, the opposite remedies are suitable in this case: augmenting the value of <code>R26</code> and/or <code>C8</code> (you may place another capacitor in parallel for that matter).</p> <p></p> IRQ pulse with HC and 39 Kohm; this 2.36 \u00b5s pulse is definitely on the short side, but is less likely to cause trouble."},{"location":"hard/dx/palette/","title":"Palette","text":"<p>Home &gt; Hardware &gt; Durango &gt; Durango\u00b7X &gt; Palette</p>"},{"location":"hard/dx/palette/#durango-colour-palette","title":"Durango colour palette","text":"<p>The Durango-X and Durango-S colour computers have a colour display mode with 128 x 128 pixels. Using 4 bits per pixel, it allows the simultaneous use of 16 colours on the screen. Unlike some old computers like the ZX-Spectrum, Commodore 64, MSX etc there are no restrictions about how many different colours may appear in a certain area.</p>"},{"location":"hard/dx/palette/#palette-colour-list","title":"Palette colour list","text":"Decimal Hex Binary Name HTML equivalent 0 <code>$0</code> <code>%0000</code> Black #000000 1 <code>$1</code> <code>%0001</code> Green #00AA00 2 <code>$2</code> <code>%0010</code> Red #FF0000 3 <code>$3</code> <code>%0011</code> Orange #FFAA00 4 <code>$4</code> <code>%0100</code> Pharmacy green #005500 5 <code>$5</code> <code>%0101</code> Lime #00FF00 6 <code>$6</code> <code>%0110</code> Mystic Red #FF5500 7 <code>$7</code> <code>%0111</code> Yellow #FFFF00 8 <code>$8</code> <code>%1000</code> Blue #0000FF 9 <code>$9</code> <code>%1001</code> Deep Sky Blue #00AAFF 10 <code>$A</code> <code>%1010</code> Magenta #FF00FF 11 <code>$B</code> <code>%1011</code> Lavender Rose #FFAAFF 12 <code>$C</code> <code>%1100</code> Navy Blue #0055FF 13 <code>$D</code> <code>%1101</code> Cyan #00FFFF 14 <code>$E</code> <code>%1110</code> Pink Flamingo #FF55FF 15 <code>$F</code> <code>%1111</code> White #FFFFFF <p>This palette is designed in a way that changing the Least Significant Bit will produce a noticeable luminance change, thus providing adequate contrast.</p> <p>Note</p> <p>Depending on your display and component tolerances, some colours may differ in practice --  dark green in particular will usually look darker, thus minimising the difference between colours where this bit changes.</p>"},{"location":"hard/dx/palette/#palette-file","title":"Palette file","text":"<p>You may download a GIMP palette file with the colours available on Durango-X for convenient artwork creation.</p>"},{"location":"hard/dx/palette/#display-format","title":"Display format","text":"<p>In all video modes, Durango-X uses a linear framebuffer. Its dimensions being powers of 2, any screen position is easily computed into the corresponding memory address.</p>"},{"location":"hard/dx/palette/#colour-mode","title":"Colour mode","text":"<p>Display memory follows the \"chunky\" model -- all bits defining a pixel are packed together into the same byte. At 4 bpp, two pixels are encoded on every byte:</p> 128 64 32 16 8 4 2 1 left B left g left R left G right B right g right R right G <p>where R=red, B=blue, G=high green (67%) and g=low green (33%)</p>"},{"location":"hard/dx/palette/#greyscale-mode","title":"Greyscale mode","text":"<p>Whenever the colour mode is active, the four bits for each pixel are sent to the video mixer thru a crude Digital-to-Analog Converter (DAC). This mode can be displayed on a SCART-equipped TV by setting the <code>FAST BLANKING</code> pin low, which is done thru software by setting low bit <code>D3</code> in the video mode register <code>($DF80)</code>.</p> <p>Warning</p> <p>This control bit is write only, thus the current mode cannot be checked. Software is expected to keep this bit set all the time, as will be ignored in HIRES mode anyway.</p> <p>The bits on every byte are now interpreted as follows:</p> 128 64 32 16 8 4 2 1 L0 L1 L2 L3 R0 R1 R2 R3 <p>Note the reverse bit order, intended to closely (but not exactly) match the luminance values of the colours.</p> <p>Note</p> <p>This mode was intended as an emergency resource for SCART-equipped devices that do not support RGB input (e.g. VCRs) and won't be available in most configurations, like the Sync-on-Green or PAL composite option.</p>"},{"location":"hard/dx/palette/#rgb-to-component-video-converter","title":"RGB to Component video Converter","text":"<p>For improved compatibility with modern TV sets, this option will be included in Revision 2 of the Durango-X board; however, a standalone converter is also available and suitable for SCART-equipped v1 Durangos.</p> <p>The Component Video input expects three signals (besides Audio):</p> <ul> <li><code>Pr</code> (Red difference)</li> <li><code>Pb</code> (Blue difference)</li> <li><code>Y</code> (Luminance)</li> </ul> <p>The two first signals are generated inside the converter, and the last one is taken straight from the composite video output of Durango-X. But this signal is not really Luminance, but a greyscale signal instead -- close, but not a perfect match. For better colour accuracy when using the Component Video converter, the following changes are suggested in the Durango-X simple DAC:</p> Designator Value for greyscale Value for Luminance <code>R107</code> 5K6 8K2 <code>R109</code> 22K 18K <code>R110</code> 39K 33K <p>Note</p> <p>This improved colour accuracy comes with the cost of impairing greyscale linearity but, as mentioned, this is rarely an issue.</p> <p>Tip</p> <p>Since the aforementioned mod has no effect whatsoever on the RGB output, it is highly recommended to build every Durango-X v1 DAC this way, just in case the Component Video converter is ever used.</p>"},{"location":"hard/dx/theory/","title":"Theory","text":"<p>Home &gt; Hardware &gt; Durango &gt; Durango\u00b7X &gt; Theory</p>"},{"location":"hard/dx/theory/#theory-of-operation","title":"Theory of Operation","text":"<p>This document explains the way Durango-X is designed. Since one of its goals is the use of standard 74xx logic circuits, the schematic may appear pretty complex at first sight, but it's easily understood with the help of this guide.</p> <p>This is also a good complement to the Troubleshooting guide.</p>"},{"location":"hard/dx/theory/#block-diagram","title":"Block Diagram","text":"<p>Unlike many Single Board retro-Computers, Durango-X's main feature is the built-in video output. This is achieved by multiplexing the RAM's address bus between the CPU and the video address generation circuit, for optimum performance -- no wait states nor snow during screen accesses!</p> <p>Here's a simplified Block Diagram showing Durango-X's major blocks and most of its interconnections:</p> <p></p> Simplified Block Diagram of the Durango-X computer"},{"location":"hard/dx/theory/#circuit-description","title":"Circuit description","text":"<p>Note</p> <p>Details on this description apply to Durango-X revision v1. Changes included in the new v2 revision will be noted; otherwise, it's all the same.</p> <p>According to a modular approach as suggested by EmilioLB, several big blocks can be isolated:</p> <ul> <li>Clocks: generation of both video and CPU clock signals, as they're fully synchronised for optimum performance.</li> <li>VDU: picks video data from SRAM and sends it to the monitor thru some analogue circuitry.</li> <li>SCART: the actual analogue circutry for sending the video output.</li> <li>CPU: the brains of the machine. Includes interrupt generation.</li> <li>MUX: the RAM needs to be multiplexed between the CPU and the video circuitry.</li> <li>Base I/O: basic on-board devices.</li> <li>Extra features: not indispensable, but useful anyway.</li> <li>Interface: external devices and connections.</li> </ul>"},{"location":"hard/dx/theory/#clocks","title":"Clocks","text":"Clock circuit (and video address generation) on Durango-X <p>For optimum performance, the 24.576 MHz master clock X1 is used to generate both video addresses and system clock, in perfect sync -- the later originally called <code>SCLK</code> but shown in most schematics as <code>VCLK</code>, since it's the same for both parts. Both sections run at 1.536 MHz, from a divide-by-16 prescaler included into U15 (74HC4040), then inverted via U16 (74HC02) for adequate phase against other high frequency signals (mainly used for the HIRES video mode).</p> <p><code>SCLK</code> is further divided thru the remaining stages of U15, together with the AND gate U17 (74HC21) configured as a divide-by-98 counter reset by the <code>LEND</code> signal. Thus, the horizontal sync frequency is generated, albeit at a slightly non-standard 15673 Hz, which is near enough to the CCIR standard 15625 Hz. From these 98 clock cycles, the first 64 cycles define the active region of each scanline as the <code>/LINE</code> signal (directly from U15's <code>Q10</code> output), when the remaining U15's <code>Q4</code> to <code>Q9</code> outputs act as the video address lines <code>VA0</code> to <code>VA5</code>. That <code>/LINE</code> signal is used as the clock signal of the line counter U19 (another 74HC4040).</p> <p>About the aforementioned line counter, since a proper computer TV display output must be non-interlaced, U19 together with the other AND gate in U17 is configured as a divide-by-312 counter, which leads to a slight vertical frequency increase, as was common in most home computers. This counter emits the remaining video address lines <code>VA6</code> to <code>VA13</code> from its <code>Q0</code> to <code>Q7</code> outputs. Accordingly, <code>Q8</code> generates the <code>/FRAME</code> signal in a similar way to <code>/LINE</code>, thus marking the 256 active rasters period.</p> <p>Note</p> <p>Not all video address lines are used simultaneously. Depending on the active video mode, the needed 74HC257 multiplexers are enabled (either <code>U104/U105</code> or <code>U204/U205</code>), plus the common-to-all-modes <code>U6</code> and <code>U7</code> (74HC157).</p> <p>A proper horizontal sync pulse must be generated within the 34 inactive clock cycles per raster. This pulse has a width of 8 clock cycles or ~5.2 \u00b5s, pretty close to the specified 4.7 \u00b5s, easily achieved by using the <code>Q7-Q10</code> outputs from U15 into a 4-bit magnitude comparator U18 (74HC85) aginst a fixed number 9, so the sync pulse (<code>UHS</code>, active-high) will be sent while the count values are between 72 and 79, as 9 x 8 = 72. This results in a slightly off-centre image to the right, but good enough for most (if not all) monitors.</p> <p>A minor drawback of this simple approach is the inversion of the horizontal pulse during the vertical sync, as both signals get combined into <code>CSYNC</code> thru an EXOR gate U23 (74HC86), which may cause some instability for some displays. Since most TVs do actually sync on the high-to-low sync flange, the remedy for this is quite simple: during vertical sync, generate the <code>UHS</code> pulse 8 clock cycles earlier (count 64 to 71), simply by applying the inverted <code>/VS</code> signal to the U18 comparator, in order to check whether the aforementioned video address bits stay at 8 during this stage.</p> <p>About the vertical sync pulse, it is generated in a similar way within the 56 inactive rasters. This pulse has a width of 4 rasters or ~256 \u00b5s, acceptably close to the specified 160 \u00b5s, once again achieved by using the <code>Q2-Q5</code> outputs from U19 into another 4-bit magnitude comparator U20 (74HC85) aginst a fixed number 8, but only enabled while <code>/FRAME</code> is high (blanking period), so the sync pulse (<code>UVS</code>, active-high) will be sent when the raster count is between 288 and 291, as (8 x 4)+256 = 288. Vertical centering is usually OK, although the 256 active raster area may be a tight fit for some monitors.</p> <p>Note</p> <p>Revision v2 uses a 28 MHz main oscillator which, after the prescaler and a divide-by-112 horizontal counter, gets the CCIR-specified 15625 Hz horizontal frequency. For better centering, horizontal sync is generated at clock count 88 instead of 72. No changes are made for the vertical counter.</p>"},{"location":"hard/dx/theory/#60-hz-eia-ntsc-version","title":"60 Hz EIA (NTSC) version","text":"<p>This is under development as a derivative from v2. It's intended to use a readily available 25.175 MHz oscillator and a divide-by-100 horizontal counter for a nominal 15734 Hz horizontal rate. The line counter is based on a divide-by-262 counter but, since there's no way to display 256 rasters on an EIA/NTSC screen, the <code>\\FRAME</code> signal needs an extra IC (74HC85) in order to make just 192 active rasters.</p>"},{"location":"hard/dx/theory/#overclocking-durango-x","title":"Overclocking Durango-X","text":"<p>Although the v2 revision will include a TURBO setting option, it is possible to overclock an existing v1 Durango-X with some mods, while keeping the proper sync frequencies for a working display. This involves some trace cutting, bodge wiring and even adding some extra circuitry. Check this other page for more information on the several overclocking methods available.</p> <p>Warning</p> <p>Since the video clocks (and thus, the sync frequencies) are derived from the master clock, trying to overclock Durango by merely changing the main oscillator frequency will result in a non-functional video output -- in extreme cases, the display itself might be damaged!</p>"},{"location":"hard/dx/theory/#vdu","title":"VDU","text":"VDU circuit on Durango-X <p>While the 65C02 CPU has full access to RAM during the Phi2 clock phase (<code>SCLK</code> high), the Phi1 phase (<code>SCLK</code> low) grants RAM access to video circuitry. Display data in RAM is read then according to the current <code>VAx</code> video address lines, at full clock rate in colour mode but half the speed (768 kHz) in HIRES. Thus, no video noise or performance penalty is made during CPU accesses to display data.</p> <p>Depending on the current video mode, this display data follows different paths. In HIRES, data is latched by the <code>U224</code> shift register (74HC166) at the precise moment determined by <code>U227A</code> (<code>/PE</code> signal) combining some of U15's highest bits. This data is shifted out at a 6.144 MHz dot clock rate (<code>HDOT</code>). This serial output (<code>HPIX</code>) may be inverted thru an XOR gate (<code>U23C</code>, 74HC86) for the actual pixel stream to be displayed (<code>HVID</code>). This signal might suffer a small delay from <code>RV231</code> for timing calibration, turning into <code>DHVD</code> which is gated thru <code>U227B</code> (74HC20) as requested during blanking periods by the <code>DHRDE</code> signal. Being a NAND gate, this inverted signal (<code>/HVG</code>) goes back to normal thru another XOR gate (<code>U23D</code>) configured as a fixed inverter, where the definitive video stream <code>HVG</code> is obtained.</p> <p>Note</p> <p>Dot clock on the v2 issue is 7 MHz (the 1.75 MHz <code>SCLK</code> frequency times 4), allowing the display of perfectly square pixels with an 1:1 aspect ratio.</p> <p>Note</p> <p>Pull-up and pull-down resistors are used in a few U23 inputs, just in case <code>U227</code> is not installed (colour-only Durango-S option). These are not needed otherwise, but won't hurn anyway.</p> <p>On the other hand, video data path in colour mode is somewhat less convoluted. Display data is latched via <code>U124</code> (74HC574) at <code>VCLK</code> rate. We're dealing with chunky 4 bits per pixel, thus every byte contains two pixels which must be serialized at the same rate via the <code>U125</code> (74HC157) multiplexer, which has a slightly faster propagation time than the former IC. For optimum picture quality, <code>RV127</code> creates a slight delay (<code>DEV/ODD</code>) which may adjust the <code>Pixel Delay</code> between both nibbles. Finally, this 4 bpp stream (<code>XB</code>, <code>XR</code>, <code>XGL</code> and <code>XGH</code>) goes thru a dedicated XOR inverter (<code>U126</code>, 74HC86) in case the Inverse video mode is enabled, creating the desired pixel stream lines (<code>IB</code> for blue, <code>IR</code> for red, <code>IGL</code> and <code>IGH</code> for green). This stream is not gated as that will be done on the SCART section.</p>"},{"location":"hard/dx/theory/#scart","title":"SCART","text":"SCART and video output circuitry on Durango-X <p>This circuit creates the analog video signals from the digital streams provided by the VDU section, no matter the connector used. The main circuit is made around <code>Q4</code> and <code>Q5</code> transistors (BC548). <code>Q4</code>is configured as a common-base mixer for high bandwidth and negligible signal interaction, taking the composite sync <code>/CSYNC</code> signal and mixing it with the HIRES video stream <code>HVG</code> at appropriate levels (actually around 2 Vpp as common practice). This <code>ZMIX</code> signal is then buffered via <code>Q5</code> as an emitter follower for low impedance output (<code>MIX</code>). A 75 ohm series resistor (68 is acceptable too) provides short circuit protection and gets the signal down to the standard 1 Vpp level and impedance. Actually, two of these outputs are provided, for both SCART (<code>R30/C5</code>) and RCA (<code>R31/C9</code>) sockets.</p> <p>Tip</p> <p><code>Q5</code> buffer uses a bias resistor (<code>R15</code>) whose 330 ohm is determined for the use of either SCART or RCA output, but not simultaneously. In case both outputs are needed at the same time, <code>R15</code> must be reduced accordingly (say, to 150 ohm) for safe operation. This lower value will work in any case, at the expense of somewhat increased power consumption.</p> <p>In colour mode, the above circuit is mainly used for sync signals. The SCART connector provides RGB inputs when switched via the fast blanking input. The colour bitstreams coming from VDU (<code>IB, IR, IGL, IGH</code>) are buffered by <code>U127</code> (74HC245) which in turn disables video output during blanking periods from the <code>/DCDE</code> signal. Together with the previous <code>DHRDE</code>, these signals come from <code>/CDE</code> and <code>HRDE</code> generated at <code>U3xx</code> (74HC175) after some adjustable delay via <code>VR128</code> and <code>VR221</code>, respectively. The buffers in the '245 are used in pairs for minimal output impedance, and the outputs go into two separate paths: main one is a simple DAC for each colour in order to attenuate the signals down to the nominal 0.7 Vpp expected by each RGB input's 75 ohm standard impedance -- in case of the green channel, two bits are in use, which account for approx. 1/3rd and 2/3rds of the full-scale output, rendering three levels of green plus black.</p> <p>The remaining path is sort of an afterthought... In case the RGB mode is not supported (or the SCART connection is missing altogether), an approximate luminance value is supplied to the composite output. A crude DAC is made upon <code>R107...R110</code> which apply a suitable current level to the common ground input <code>VIN</code> of the aforementioned video mixer, so at least a monochromatic image is displayed.</p> <p>Tip</p> <p>The DAC resistor values stated in the silkscreen (v1 issue) are intended for a reasonably linear greyscale, which may be enabled by clearing bit <code>D3</code> of the video mode register (<code>$DF80</code>, not officially supported). But since this mode seems of little use, and might render somewhat inaccurate colours if the RGB-to-component video converter is used, alternative values may be used. Check the Palette article for details. v2 and later issues of Durango-X include the luminance DAC as standard.</p> <p>The way for switching the TV between the composite and RGB inputs is via the fast blanking input in the SCART connector. This receives the <code>RGB</code> signal from U3xx (which is either 0 in HIRES mode, or the value of <code>D3</code> from the video mode register), buffered by <code>Q306</code> and applied thru <code>R312</code>.</p> <p>Note</p> <p>The fast blanking signal does draw a lot of current, accounting for nearly one third (!) of Durango-X's total power consumption. Increasing the value of <code>R312</code> to suit your particular TV will decrease energy usage, but might be the cause of unreliable mode switching. This resistor is not used in Composite, Sync-on-Green or (for v2 and later) Component video outputs, thus greyscale mode is not available.</p>"},{"location":"hard/dx/theory/#cpu","title":"CPU","text":"CPU and interrupts generation on Durango-X <p>The CPU section on the Durango-X computer is based around the 65C02 microprocessor <code>U1</code> and its associated circuitry -- mainly, interrupt generation. Please note that the Durango-X board has no ROM at all, relying on the one on the cartridge, which is essential for operation. RAM is also surrounded by the multiplexing circuitry described below.</p> <p><code>U9</code> (74HC00) generates the bare minimum control signals, according to these equations:</p> <ul> <li><code>ROM /CS</code> is <code>A15</code> NAND <code>/IO</code>, thus ROM will be disabled while accessing the I/O area (<code>$DF80-$DFFF</code>)</li> <li><code>ROM /OE</code> comes thru the NAND from <code>R/W</code>, but also gated via <code>SCLK</code>, as ROM must leave the data bus free during _Phi1 phase (while video data is collected by the VDU)</li> <li><code>/WE</code> is generated the usual way, gating with <code>SCLK</code> the aforementioned <code>ROM /OE</code> signal, even if it's already SCLK-gated, as is a conveniently inverted <code>R/W</code>. This signal is sent to the corresponding pin on the cartridge slot but is not directly used by the RAM, as being multiplexed calls for an additional delay for the address lines to settle.</li> </ul> <p>The remaining gate is used to invert the <code>HIRES</code> signal for selecting the adequate bank of multiplexers.</p> <p>Note</p> <p>In the v2 issue, this spare gate has a different purpose, creating the 3.5 MHz clock signal for the TURBO option, whereas the <code>HIRES</code> signal is inverted thru a transistor <code>Q307</code>.</p>"},{"location":"hard/dx/theory/#interrupt-generation","title":"Interrupt generation","text":"<p>The IRQ-generating circuit in Durango-X is designed around the minimOS standard 250 Hz periodic interrupt (4 ms period). For accurate timing, the <code>VA0</code> signal (768 kHz) is further divided by 3072 thanks to <code>U14</code> (74HC4040) and one NAND gate from <code>U8</code> (74HC132), generating a brief reset pulse (<code>/250HZ</code>) which is then inverted by another <code>U8</code> gate, then stretched via the <code>C8/R26</code> network, thus creating the <code>ST250</code> signal which both serves as a <code>U14</code> counter reset and, after a diode to turn it open-collector/open-drain, as the main <code>/IRQ</code> generator for the 65C02, without interfering other uses of this signal (nanoLink, cartridge etc).</p> <p>Check the interrupt troubleshooting guide for extra information about this.</p> <p>Note</p> <p>v2 issue has a somewhat faster system clock (1.75 MHz). Thus, <code>VA0</code> is more like 875 KHz, so the division factor for the 74HC4040 becomes 3500 instead of 3072 for the specified 250 Hz. Being a much less nicer number in the binary sense, an 8-input NAND gate (74HC30) is used for generating <code>/250HZ</code> and half of <code>U29</code> (74HC139) is configured as an inverter for this pulse, then stretched in a similar way, although using one buffer from <code>U32</code> (74HC245) instead of a Schmitt-trigger gate. Note that the TURBO option does not affect the interrupt speed, as the counter is fed from <code>VA0</code>, which must run always at the same speed.</p> <p>Note</p> <p>The simplified, Compact version of Durango (under development), generates <code>ST250</code> thru a flange detector from <code>VA11</code> which, despite its somewhat irregular rhythm, does in the long term run at around the specified 250 Hz, although the 4 ms spacing is no longer guaranteed. This way, <code>U14</code> is eliminated altogether.</p>"},{"location":"hard/dx/theory/#mux","title":"MUX","text":"Static RAM and MUX circuit on Durango-X"},{"location":"hard/dx/theory/#base-io","title":"Base I/O","text":"Base I/O devices on Durango-X"},{"location":"hard/dx/theory/#extra-features","title":"Extra features","text":"Extra features on Durango-X"},{"location":"hard/dx/theory/#interface","title":"Interface","text":"Port interface on Durango-X"},{"location":"hardware/cartidge/","title":"Durango-X cartridges","text":"Standard Durango mini-cartridge <p>The Durango cartridge hosts the ROM chip containing any program or game for the Durango-X computer.</p> <p>You can use EPROM, EEPROM or Flash chips to store the software.</p> <p>Durango-X has up to 32 KiB of ROM address space, but you could use bankswitching to store more information, with a suitable cartridge.</p> <p>Currently, three kinds of cartridges have been developed:</p> <ul> <li>The standard mini-cartridge (suitable for most EPROMs, EEPROMs and Flash chips, up to 32 KiB) as pictured above.</li> <li>The Development Cartridge, which adds 32 KiB shadow RAM plus an SD Card reader.</li> <li>A recently developed bankswitching cartridge, suitable for 32-pin EPROMs and similar devices, ranging from 128 KiB to 1 MiB, switchable in either 16 or 32 KiB banks.</li> </ul> <p>Also under development is a multi-cartridge, which will hold more than a ROM image, cycling between them simply by hitting the <code>RESET</code> button.</p> <p>All these cartridges use the same pinout.</p> <p>For more information about Durango-X cartridges please refer to the Getting Started section.</p>"},{"location":"hardware/dc_fix/","title":"Development Cartridge v1 fix","text":"<p>Warning</p> <p>These mods are mandatory for proper v1 cartridge operation, but do NOT apply them to later revisions.</p> <ul> <li>TO BE DONE</li> </ul>"},{"location":"hardware/dev_cart/","title":"Durango Development RAM Cartridge","text":"Durango Development RAM Cartridge <p>The Durango-X Development RAM Cartridge allows to load programs using an SD Card interface.</p> <p>Bug</p> <p>Current revision (v1) of the Development Cartridge has a bug that must be fixed in orde to be useable. A workaround has been developed. Do not use this mod in later revisions.</p> <p>This cartridge adds an additional 32KiB static RAM to Durango-X on the same address space as the cartridge ROM, effectively upgrading the computer to a whole 64 KiB RAM system.</p> <p>The firmware ROM can be switched off, allowing the underlying RAM to execute its contents. After downloading, cartridge RAM writes can be disabled, making it as reliable as running from a standard ROM chip.</p> <p>Also, you can use this cartridge to load programs using the nanoLink interface into the cartridge RAM. You can send programs to Durango-X using a Raspberry Pi connected using GPIO.</p>"},{"location":"hardware/durango/","title":"Durango","text":"Durango-X Computer main board <p>Originally born as a 6502 tester without any specific chips, soon became a full-featured home computer with integrated video output.</p> <p>For advanced information, check the Theory of Operation. If you already own a Durango-X computer and it's acting up, you may be interested in the Troubleshooting Guide as well.</p>"},{"location":"hardware/durango/#range","title":"Range","text":"<ul> <li>Durango PROTO: the original CPU tester with some basic I/O (1 MHz)</li> <li>Durango\u00b7SV: 16-colour video output module for SVGA monitor (abandoned)</li> <li>Durango\u00b7S: 128x128 pixel, 16-colour home computer</li> <li>Durango\u00b7R: as above but displaying 256x256 monochrome instead</li> <li>Durango\u00b7X: full model, with both the \u00b7S and \u00b7R models video output (software switchable)</li> <li>Durango\u00b7C: simplifed, reduced chip-count version of Durango-X (under development)</li> <li>Durango Pocket: handheld 2 MHz version, although not ~~fully~~ compatible (under development)</li> </ul>"},{"location":"hardware/durango/#basic-specs","title":"Basic Specs","text":"<ul> <li>CPU: 65C02 @ 1.536 MHz</li> <li>ROM: up to 32 KiB cartridge slot (more with bank switching)</li> <li>RAM: 32 KiB</li> <li>Expansion connector: parallel 8-bit bus with 16 addresses for keyboards, joysticks etc.</li> <li>Video output: via CCIR (PAL) TV thru RGB SCART connector.</li> </ul> <p>Also available as options: composite video (greyscale/HIRES only), Sync-on-Green and Component Video outputs.</p> <p>Note</p> <p>Revision v2 will increase the clock speed up to 1.75 MHz, plus an option for a TURBO mode at twice the speed -- a whopping 3.5 MHz !!</p>"},{"location":"hardware/durango/#video-modes","title":"Video Modes","text":"<ul> <li>128 x 128 px. 4 bpp (256-raster, 16-colour GRgB fixed palette, no restrictions) except in \u00b7R model</li> <li>256 x 256 px. 1 bpp (monochrome) except in \u00b7S model</li> <li>Switchable greyscale mode (16 levels) except in \u00b7R model and Sync-on-Green/Component video options</li> <li>Inverse Video mode (hardware)</li> <li>Four 8 KiB screens software-switchable (screen 0 is shared with ZP, stack etc)</li> </ul> <p>Note</p> <p>Built-in screen for Pocket model to be determined.</p> <p>Warning</p> <p>The Durango-X computer is designed to be hooked to a TV or monitor conforming to the CCIR (PAL) 50 Hz standard. While a mod (under development) may generate a proper EIA (NTSC) 60 Hz signal, there is no way to fit the usual 256-raster image on such displays -- 240 rasters being the absolute limit, and very few sets will actually display more than 215-220 rasters. All software will run, but the bottom of the screen may become invisible. Revision 2 will be available with a 60 Hz option (different board) displaying 192 rasters at once, with a pushbutton to momentarily show the bottom rasters.</p> <p>Note</p> <p>The EIA (60 Hz) version of the revision v2 is expected to run at ~1.5734 MHz (with a TURBO option of ~3.15 MHz)</p>"},{"location":"hardware/durango/#options","title":"Options","text":"<p>The Durango project allows to build your computer under several configuration options, all of them using the same PCB, by just choosing the appropriate components.</p> <p>Warning</p> <p>Generally speaking, as the Durango computer provides a slightly non-standard video signal, some displays might be incompatible, no matter the chosen option (although this is quite rare according to our experience so far).</p>"},{"location":"hardware/durango/#supported-video-mode-options","title":"Supported video mode options","text":"<ul> <li>Durango-S: colour mode only (128 x 128 px., 4 bpp)</li> <li>Durango-R: HIRES mode only (256 x 256 px., 1 bpp)</li> <li>Durango-X: both modes available (recommended option)</li> </ul>"},{"location":"hardware/durango/#video-output-options","title":"Video output options","text":"<ul> <li>RGB-SCART (recommended option): will display colour on RGB mode only, as composite output needs the PAL encoder.</li> <li>Sync-on-green: suitable for some monitors, especially the Sony PVM range, via RCA connectors. Note that greyscale mode is not available.</li> </ul> <p>Note</p> <p>Future revisions (v2 onwards) of the Durango-X board will replace the Sync-on-green option by a Component video output, which is both suitable for the PVM monitors and more modern TV sets, lacking SCART socket.</p>"},{"location":"hardware/durango/#pal-encoder-option","title":"PAL encoder option","text":"<ul> <li>with PAL encoder (AD724): composite output (from SCART and/or RCA) may be in colour.</li> <li>No PAL encoder (recommended option): composite output is greyscale.</li> </ul> <p>Bug</p> <p>The PAL encoder option was an afterthought, thus picture quality may be poor or, on some devices, may not display any colour at all. This has been deprecated on revision 2 of the board.</p>"},{"location":"hardware/durango/#second-composite-output-option","title":"Second composite output option","text":"<p>This adds an RCA jack (together with a couple more for audio) with composite video output, although it will be grayscale unless the PAL encoder option is installed. If both this output and the one on the SCART are to be used at the same time, you may wish to swap <code>R15</code> for a lower value (say, 180 ohm) for picture stability.</p> <p>Tip</p> <p>The Sync-on-green option, unlike the SCART, does NOT provide audio output, thus the extra 3 RCA jack set intended for the Second video output may be desired for audio, even if the second video output isn't functional.</p>"},{"location":"hardware/hardware/","title":"Hardware","text":"<p>Here you can find all the Information about the hardware of the Durango-X computer. From the technichal specifications, to information related to the physical installation.</p>"},{"location":"hardware/hardware/#durango-computer-hardware","title":"Durango Computer Hardware","text":"<ul> <li>Durango-X computer: Technical information about the Durango-X computer.</li> <li>Durango Keyboard and control pads interface: Technical information about Durango Keyboard and control pads interface.</li> <li>Durango cartridge: technical information about the base Durango Cartridge.</li> <li>Durango Development cartridge: Technical Information about Durango RAM/SD card Development Cartridge.</li> </ul> <p>Also, you can find all the schematics about Durango in the Durango Computer Repositories: Durango Retro Repositories.</p>"},{"location":"hardware/keyboard/","title":"Keyboard and Controller pad interface","text":"Durango KeyBoard &amp; Gamepad Board <p>Using the \"Expansion connector\" you can daisy-chain up to 16 devices; some peripherals may integrate several of these devices, like the Keyboard and Gamepad controller interface board intended as standard.</p>"},{"location":"hardware/keyboard/#gamepads","title":"Gamepads","text":"<p>This board provides a 40-key keyboard and two gamepad ports, which are available in two flavours:</p> <ul> <li>NES Flavour; you can connect up to two NES controllers pad using NES connectors.</li> <li>MD/Atari flavour; you can connect up to two Mega Drive/Genesis/Atari controllers using DE-9 connectors.</li> </ul> <p>Bug</p> <p>Current revision (v1 2022\u00b711) of the Keyboard/Gamepad Interface has two known bugs:</p> <ul> <li>The keyboard silkscreen shows another <code>(</code> where actually <code>)</code> should be.</li> <li>The Mega Drive version controller does not work; a workaround has been made, but it swaps the <code>START</code> and <code>C</code> buttons.</li> </ul> <p>All of these will be fixed in the next revision (most likely v1.3)</p>"},{"location":"hardware/keyboard/#keyboard","title":"Keyboard","text":"<p>The keyboard interface is electrically compatible with the Sinclair ZX Spectrum keyboard matrix; room for the 5-pin and 8-pin sockets is provided in the board, allowing the use of a Sinclair or any other compatible 5x8 matrix keyboard. With suitable connectors, the keys on the board may be connected to a ZX Spectrum, too!</p>"},{"location":"hardware/keyboard/#layout","title":"Layout","text":"<p>Not only the electrical connections, but the key layout closely follows that of the ZX Spectrum as well, thus will seem familiar to former users of the famous British computer; younger people may find it a bit idiosyncratic, though.</p> <p>Notable differences are:</p> <ul> <li>Access to localised Spanish characters. Most notably, the <code>;</code> character had to be moved to the <code>ALT</code>+<code>S</code> combo.</li> <li>More conventional <code>SHIFT</code> and <code>ALT</code> modifiers, instead of the original CAPS SHIFT and SYMBOL SHIFT.</li> <li><code>CONTROL</code> key is replaced by a CONTROL mode via <code>SHIFT</code>+<code>9</code> key combo (similarly to the Spectrum's GRAPHIC mode).</li> </ul> <p>Other than that, key silkscreen follows the usual conventions: use <code>SHIFT</code> for capitals and the upper character, use <code>ALT</code> for the character at right. There's no <code>CAPS LOCK</code> nor dead keys.</p>"},{"location":"hardware/keyboard/#overlay","title":"Overlay","text":"<p>For convenience, improved tactile feel and larger silkscreen, an optional overlay board has been designed, and will fit suitable holes on the keyboard PCB.</p> <p></p> Render of Durango Keyboard Overlay"},{"location":"hardware/md_fix/","title":"Keyboard/Gamepad Interface v1.0 fix","text":""},{"location":"hardware/md_fix/#for-mega-drive-version-only","title":"For Mega Drive version ONLY","text":"<p>While the NES flavour of the Keyboard/Gamepad Interface board works flawlessly, a bug is present on the MD version v1.0 revision of this board. Please use the workaround described below:</p> <p>Warning</p> <p>This workaround is for the Mega Drive version of the Interface; do NOT apply these mods to the NES version.</p> <ul> <li>Disconnect pin 11 of U9 in the Interface board (either bending or cutting the IC's leg, or by removing the corresponding socket pin -- this pin should be NOT in contact with the board.</li> <li>On the back of the board, make a bridge between pins 11 and 12 of U9, as shown on the pictures below.</li> </ul> <p></p> Bent pin 11 on U9 (74HC86) <p></p> Solder bridge between pins 11 and 12 <p>Bug</p> <p>This fix allows operation of a MD controller pad, although <code>C</code> and <code>START</code> buttons will be swapped.</p> <p>Note</p> <p>All of these issues are already fixed on revision v1.3 or later.</p>"},{"location":"other/future/","title":"Future Projects","text":"<p>Here You can find Information about Future projects that can be in development in the future. You can find new features or revisions of the Durango Computer Project.</p>"},{"location":"other/future/#durango-imager","title":"Durango Imager","text":"<p>If you are going to use the Durango Development Cartridge, you can use this application to select all the Durango Roms, generate an image, and flash to the SDCard.</p> <p>Warning</p> <p>This Project is under design stage, the current features, can be changed in the future.</p>"},{"location":"other/future/#veracruz","title":"VeraCruz","text":"<p>A quantum leap above the 8-bit, 6502-based Durango home computers. The use of the advanced 65C816 CPU will allow full compatibility of well-behaved minimOS applications, but also the availability of a much larger address space and higher speed (especially with 16-bit math).</p> <p>The ultimate goal is to reach the 3M benchmark (1 MiB of memory, 1 Mpixel on screen, 1 MIPS). The current Veracruz model lacks only the \"second M\", topping at ~0.25 Mpixel (512x512).</p> <ul> <li>Veracruz: the entry-level 5 MHz 65C816 workstation</li> <li>SIXtation\u00b7P: ~7 MHz portrait display workstation<sup>1</sup></li> <li>Jalisco: 9 MHz 65C816 workstation with 1360 x 768 px. colour display<sup>2</sup></li> <li>Tabasco: Top of the range 13.5 MHz 65C816 workstation with high resolution colour display<sup>2</sup></li> </ul> <p>Info</p> <p>This Project is under construction; is only in design and definition stage and is not ready yet.</p>"},{"location":"other/future/#veracruz-basic-specs","title":"Veracruz Basic Specs","text":"<ul> <li>CPU: 65C816 @ 5 MHz</li> <li>ROM: 32 KiB built in firmware plus extended cartridge slot up to 1 MiB</li> <li>RAM: 256 KiB, expandable to 1 MiB</li> <li>Use of some dedicated chips (65C22 VIAs, 6445 CRTC, PLDs...) for reduced chip count</li> <li>Video output: via SVGA monitor</li> <li>Other ports to be determined</li> </ul>"},{"location":"other/future/#video-modes","title":"Video Modes","text":"<p>Video Modes: (to be determined)</p> <ul> <li>256 x 256 px. 4 bpp (16-colour GRgB fixed palette, no restrictions)</li> <li>512 x 512 px. 1 bpp (monochrome)</li> <li>128 x 256 px. 8 bpp (256-colour fixed palette) (under development)</li> <li>Inverse Video mode (hardware)</li> <li>128 x 128 px. 4 bpp (16-colour GRgB fixed palette, for Durango compatibility) (under development)</li> <li>Two 32 KiB screens software-switchable</li> </ul> <ol> <li> <p>Full specs to be determined\u00a0\u21a9</p> </li> <li> <p>Name and full specs to be determined.\u00a0\u21a9\u21a9</p> </li> </ol>"},{"location":"other/other/","title":"Other Projects","text":"<p>Here you can find information about other projects related with Durango. You can find information about future projects, or projects that are in development or in design status.</p> <ul> <li>Future Projects: Information about Future Projects about Durango Projects (future implementations, New Development Tools or other peripherals).</li> </ul> <p>The information in theses pages can be changed due to new Implementations or features.</p>"},{"location":"soft/games/","title":"Games","text":"<p>Home &gt; Software &gt; Games</p>"},{"location":"soft/games/#games","title":"Games","text":"<p>Here you can download ROM images with games, and their Source Code.</p>"},{"location":"soft/games/#games-to-download","title":"Games to Download","text":""},{"location":"soft/games/#breakout","title":"Breakout","text":"Durango Breakout Game <p>breakout.dux Breakout/Arkanoid Game for Durango.</p> <ul> <li>ROM.</li> <li>Source Code.</li> </ul>"},{"location":"soft/games/#pacman","title":"Pacman","text":"Durango Pacman Game (Poc) <ul> <li> <p>pacman.bin : Pacman for Durango (under development).</p> </li> <li> <p>ROM</p> </li> <li>Source Code</li> </ul>"},{"location":"soft/games/#pong","title":"Pong","text":"Durango Pong Game (Poc) <p>pong.dux . Pong Game for Durango. This is a Two Player Game. Compatible with Gamepads.</p> <ul> <li>ROM</li> <li>Source Code.</li> </ul>"},{"location":"soft/games/#witch-halloween-2022","title":"Witch (halloween 2022)","text":"Durango Witch Game <ul> <li> <p>witch.dux . 2022 Halloween game (under development). Press AWSD keys to move.</p> </li> <li> <p>ROM.</p> </li> <li>Source Code.</li> </ul>"},{"location":"soft/games/#telesketch","title":"Telesketch","text":"Durango telesketch Game <p>telesketch.dux : Etch-a-sketch  Durango Game. Press AWSD to draw the line.</p> <ul> <li>ROM</li> <li>Source Code.</li> </ul>"},{"location":"soft/games/#columns","title":"Columns","text":"Durango Columns Game <ul> <li> <p>columns.bin : Puzzle Durango Game (Under Development). Press Start to begin, directions to move the pieces and A,B,(C) to rotate.</p> </li> <li> <p>ROM</p> </li> <li>Source Code</li> </ul>"},{"location":"soft/utils/","title":"Utils","text":"<p>Home &gt; Software &gt; Utility Software</p> <p>Note</p> <p>This page is under construction</p>"},{"location":"soft/utils/#utility-software","title":"Utility Software","text":"<p>Here you can find information about Durango's programs or utilities.</p>"},{"location":"soft/utils/#download","title":"Download","text":"<p>You can download the Binary ROM image, or see the source code. Most of the assembly source code can be assembled with the xa65 assembler.</p> <p>Note</p> <p>Most of these ROM images are intended to be used with the Perdita emulator, or downloaded into an SD card for bootstrapping. In order to \"blow\" an EPROM/EEPROM with them, make sure the contents stay at the end of the memory range, adding an appropriate leader (usually consisting of <code>$FF</code>s) to match your chip's capacity, if needed.</p>"},{"location":"soft/utils/#ehbasic","title":"EhBASIC","text":"EhBASIC for Durango-X <p>basic.dux: EhBASIC Interpreter. With this ROM you can run BASIC programs in your Durango. This is an MS-BASIC-based interpreter, but it adds Durango-specific BASIC commands for graphics, colour and sound.</p> <ul> <li>ROM image (32 KiB, EPROM/EEPROM-ready)</li> <li>Source Code</li> </ul> <p>More information about EhBASIC interpreter:</p> <ul> <li>EhBASIC Reference Manual.</li> <li>Durango-Specific BASIC Commands</li> </ul>"},{"location":"soft/utils/#nano-python","title":"Nano Python","text":"<p>Durango Python Interpreter (Proof-of-Concept) under development.</p>"},{"location":"soft/utils/#nanoboot","title":"nanoBoot","text":"<p>This is the bootstrap firmware loader from a Raspberry Pi or SD card).</p> <p>With this ROM you can launch ROM images using the nanoLink interface connected to a Raspberry Pi, or from an SD card. Needs the Development Cartridge.</p> <ul> <li>Bootstrap ROM (16 KiB, EPROM/EEPROM-ready) for RasPi &amp; SD.</li> <li>Source Code depends on some other files, check <code>#include</code>s.</li> </ul> <p>There is an specific version for the SD card interface] on the Development Cartridge, or even the new FastSPI interface; it allows selection between several concatenated ROM images to boot, plus works as a screen dump viewer (both HIRES and colour modes):</p> <ul> <li>Bootstrap ROM (16 KiB, EPROM/EEPROM-ready), SD card only.</li> <li>Source Code depends on some other files, check <code>#include</code>s.</li> </ul> <p>For more information, please see Raspberry Pi Server tool Section and the ROM images in SD card section</p>"},{"location":"soft/utils/#gamepads-tester-standalone","title":"GamePads Tester (standalone)","text":"Durango-X Gamepads Test <ul> <li> <p>gamepads.bin : Standalone Durango Gamepad Tester; Press Gamepad buttons to check that they're working. This test is compatible with the integrated 40-key Keyboard and gamepad interface.</p> </li> <li> <p>ROM</p> </li> <li>Source Code</li> </ul>"},{"location":"soft/utils/#keyboard-tester-standalone","title":"Keyboard Tester (standalone)","text":"Durango Keyboard Test <ul> <li> <p>keyboard_tester.bin : Standalone Durango Keyboard Tester. Press keyboard buttons to check that it's working properly. This test is compatible with the integrated 40-key Keyboard and gamepad interface.</p> </li> <li> <p>ROM.</p> </li> <li>Source Code.</li> </ul> <p>Note</p> <p>If three or more keys are pressed at the same time, ghosting may happen. The simple matrix used on the 40-key Keyboard cannot avoid this, unfortunately.</p>"},{"location":"soft/utils/#durango-full-test","title":"Durango Full Test","text":"Durango Full Test <ul> <li> <p>fulltest.dux : Full Hardware Test for Durango and basic peripherals; use <code>NMI</code> (F2 on perdita) key to cycle between all tests. Includes a compact version of the gamepads &amp; keyboard tests above.</p> </li> <li> <p>ROM</p> </li> <li>Source Code depends on some other files, check <code>#include</code>s.</li> </ul> <p>For more information about Full Test, please check Full Test documentation page.</p>"},{"location":"soft/os/conio/","title":"Conio","text":"<p>Home &gt; Software &gt; Operating Systems &gt; BIOS/BDOS &gt; CONIO</p>"},{"location":"soft/os/conio/#the-conio-terminal-emulator","title":"The CONIO terminal emulator","text":"<p>Although the Durango-X computer is intended to use ad hoc software in standalone cartridges, without the need for any underlying OS, the availability of a console-type I/O is always welcome, allowing easy text display and keyboard interaction.</p>"},{"location":"soft/os/conio/#firmware-requeriments","title":"Firmware Requeriments","text":"<p>As a firmware module, <code>CONIO</code> (CONsole Input/Output) needs some basic support to operate:</p> <ul> <li>The <code>CONIO</code> code itself.</li> <li>An 8x8 bitmap font (usually included, but can be switched)</li> <li>A keyboard driver (one for the standard 5x8 matrix keyboard is supplied but, if not detected, paralell input at <code>$DF9A</code> is supported.</li> <li>A minimal interrupt handler which, besides any application-specific needs, should increment the <code>ticks</code> counter and call the keyboard scanning routine.</li> <li>Basic initialisation for all of the above.</li> </ul> <p>You can check an example of the software package installation for CONIO support on the standalone version of EhBASIC from address <code>$E000</code> on the binary file (label name: <code>reset</code>).</p>"},{"location":"soft/os/conio/#supported-features","title":"Supported features","text":"<p>CONIO supports both HIRES and colour modes, displaying 32 x 32 or 16 x 16 characters respectively. All four screen areas are supoported and, in case of the first area (<code>$0000-$1FFF</code>) where zeropage &amp; stack reside, it's automatically limited to the bottom half of the screen to protect the important system variables.</p> <p>Being a bitmap-only display, alternative fonts are supported; just change a pointer to a 2 KiB font definition of your choice (256 chars of 8x8 pixels).</p> <p>Note</p> <p>These features have no support from the CONIO interface, and will need to manually set some memory addresses and/or hardware registers.</p>"},{"location":"soft/os/conio/#character-set","title":"Character set","text":"<p><code>CONIO</code> makes use of a slightly custom variant of ISO/IEC 8859-1 for convenience and localisation reasons. C1 control codes, undefined on the standard, are used by:</p> <ul> <li>The Sinclair ZX Spectrum semi-graphic characters (128-143, <code>$80-$8F</code>)</li> <li>Selected Greek for Maths based on $E0-$EF of code page 437 (144-159, <code>$90-$9F</code>) but including check mark, approximation and non-strict inequalities.</li> </ul> <p>Other differences:</p> <ul> <li>Non-Breaking space (160, <code>$A0</code>) is replaced by a hollow square/rectangle (code 128/<code>$80</code> Spectrum graphic might be used as a substitute)</li> <li>Currency symbol (164, <code>$A4</code>) is replaced by the Euro sign from ISO 8859-15.</li> <li>Soft hyphen (173, <code>$AD</code>) is replaced by the (seldom found on single-byte encodings!) slashed equal.</li> <li>Cedilla (184, <code>$B8</code>) is replaced by lowercase omega. This encoding is already used on some HD44780-based LCD text displays.</li> <li>Superscript 1 (185, <code>$B9</code>) is replaced by uppercase delta.</li> <li>Fractions (188-190, <code>$BC-$BE</code>) are replaced by the bullet character, the lowercase oe ligature and the eng character.</li> </ul> <p>Codes 191 (<code>$BF</code>) and beyond are the same as ISO 8859-1 -- and also like Windows-1252, for that matter.</p>"},{"location":"soft/os/conio/#extended-ascii-character-table","title":"extended-ASCII character table","text":"mOS $x0 $x1 $x2 $x3 $x4 $x5 $x6 $x7 $x8 $x9 $xA $xB $xC $xD $xE $xF $8x \u259d \u2598 \u2580 \u2597 \u2590 \u259a \u259c \u2596 \u259e \u258c \u259b \u2584 \u259f \u2599 \u2588 $9x \u03b1 \u2713 \u0393 \u03c0 \u03a3 \u03c3 \u2264 \u03c4 \u2265 \u03f4 \u03a9 \u03b4 \u221e \u2248 \u2208 \u2229 $Ax \u25a1 \u00a1 \u00a2 \u00a3 \u20ac \u00a5 \u00a6 \u00a7 \u00a8 \u00a9 \u00aa \u00ab \u00ac \u2260 \u00ae \u00af $Bx \u00b0 \u00b1 \u00b2 \u00b3 \u00b4 \u00b5 \u00b6 \u00b7 \u03c9 \u0394 \u00ba \u00bb \u2022 \u0153 \u014b \u00bf $Cx \u00c0 \u00c1 \u00c2 \u00c3 \u00c4 \u00c5 \u00c6 \u00c7 \u00c8 \u00c9 \u00ca \u00cb \u00cc \u00cd \u00ce \u00cf $Dx \u0110 \u00d1 \u00d2 \u00d3 \u00d4 \u00d5 \u00d6 \u00d7 \u00d8 \u00d9 \u00da \u00db \u00dc \u00dd \u00de \u00df $Ex \u00e0 \u00e1 \u00e2 \u00e3 \u00e4 \u00e5 \u00e6 \u00e7 \u00e8 \u00e9 \u00ea \u00eb \u00ec \u00ed \u00ee \u00ef $Fx \u00f0 \u00f1 \u00f2 \u00f3 \u00f4 \u00f5 \u00f6 \u00f7 \u00f8 \u00f9 \u00fa \u00fb \u00fc \u00fd \u00fe \u00ff"},{"location":"soft/os/conio/#c0-control-characters","title":"C0 Control characters","text":"<p>Usually single-byte sequences for efficiency. Most of bash key shortcuts are implemented here, while a few other are just traditional ASCII. A notable difference is the use of plain <code>CR</code> as newline, unlike the common UNIX (<code>LF</code>) and DOS/Windows (<code>CR</code> plus <code>LF</code>) alternatives.</p> <p>Some other changes are the cursor up/down (made from <code>VT</code> and <code>LF</code>), the CR-without-LF (used as <code>HOML</code>, line home) and the <code>XON</code>/<code>XOFF</code>, which make little sense on a glass tty but are used instead to enable/disable the cursor.</p> <p>Colour commands, on the other hand, are generated in a similar way to the ZX Spectrum although with different codes (18 for <code>INK</code>, 20 for <code>PAPER</code>).</p> <p>Note</p> <p>When required, the normally hidden glyph is obtained by preceeding the code with a <code>DLE</code> (16/<code>$10</code>).</p> Ctl-key Dec Hex ASCII name glyph &amp; description effect - 0 <code>$00</code> <code>NUL</code> <code>SWTC</code> \u25a3 square with block (1) A 1 <code>$01</code> <code>SOH</code> <code>CRTN</code> \u219e double arrow left carriage return (without line feed) B 2 <code>$02</code> <code>STX</code> <code>LEFT</code> \u21e6 arrow left cursor left (no backspace) C 3 <code>$03</code> <code>ETX</code> <code>TERM</code> \u23fb ball switch send TERM signal(7)/BREAK key (6) D 4 <code>$04</code> <code>EOT</code> <code>ENDT</code> \u21f2 arrow to SE corner (7) E 5 <code>$05</code> <code>ENQ</code> <code>ENDL</code> \u21a0 double arrow right move cursor to end of line (7) F 6 <code>$06</code> <code>ACK</code> <code>RGHT</code> \u21e8 arrow right cursor right (no space) G 7 <code>$07</code> <code>BEL</code> <code>BELL</code> \ud83d\udd14 bell acoustic alert H 8 <code>$08</code> <code>BS</code> <code>BKSP</code> \u232b left sign with x backspace, clear previous character I 9 <code>$09</code> <code>HT</code> <code>HTAB</code> \u21e5 right arrow with bar advance to next tab, printing spaces J 10 <code>$0A</code> <code>LF</code> <code>DOWN</code> \u21e9 arrow down cursor down (no CR) K 11 <code>$0B</code> <code>VT</code> <code>UPCU</code> \u21e7 arrow up cursor up one line L 12 <code>$0C</code> <code>FF</code> <code>CLRS</code> \ud807\udfc4 paper sheet clear screen (2) M 13 <code>$0D</code> <code>CR</code> <code>NEWL</code> \u23ce angled arrow newline, ZX Spectrum-like N 14 <code>$0E</code> <code>SO</code> <code>EON</code> \u21d2 imply emphasis (inverse) on O 15 <code>$0F</code> <code>SI</code> <code>EOFF</code> \u21d0 reverse imply emphasis (inverse) off P 16 <code>$10</code> <code>DLE</code> <code>DLE</code> \u2665 heart suit show glyph for next char, do not interpret it (3) Q 17 <code>$11</code> <code>DC1</code> <code>XON</code> \u2605 star cursor on R 18 <code>$12</code> <code>DC2</code> <code>INK</code> \u270f pencil set foreground colour (3)(4) S 19 <code>$13</code> <code>DC3</code> <code>XOFF</code> \u2666 diamond suit cursor off T 20 <code>$14</code> <code>DC4</code> <code>PAPR</code> \u2663 club suit set background colour (3)(4) U 21 <code>$15</code> <code>NAK</code> <code>HOME</code> \u21f1 arrow to NW corner reset cursor without clearing screen V 22 <code>$16</code> <code>SYN</code> <code>PGDN</code> \u21a1 double arrow down page down (7) W 23 <code>$17</code> <code>ETB</code> <code>ATYX</code> \u2660 spade suit set cursor position (5) X 24 <code>$18</code> <code>CAN</code> <code>BKTB</code> \u21e4 left arrow with bar backwards tabulation (7) Y 25 <code>$19</code> <code>EM</code> <code>PGUP</code> \u219f double arrow up page up (7) Z 26 <code>$1A</code> <code>SUB</code> <code>STOP</code> \u26d4 no entry send STOP signal (7) - 27 <code>$1B</code> <code>ESC</code> <code>ESC</code> \u2b09 NW arrow/mouse cursor escape (7) - 28 <code>$1C</code> <code>FS</code> <code>PLOT</code> \u25e2 wedge pointing SE (7) - 29 <code>$1D</code> <code>GS</code> <code>DRAW</code> \u25e3 wedge pointing SW (7) - 30 <code>$1E</code> <code>RS</code> <code>INCG</code> \u2592 light pattern (7) - 31 <code>$1F</code> <code>US</code> <code>TXTM</code> \u2593 mid pattern (7) - 127 <code>$7F</code> <code>DEL</code> <code>DEL</code> \u2327 square with x delete (7)"},{"location":"soft/os/conio/#notes","title":"Notes:","text":"<p>1.If sent to <code>CONIO</code>, will issue an input.</p> <p>2.If sent to <code>CONIO</code>, will reset the standard device.</p> <p>3.Takes a second character to complete.</p> <p>4.Currently only low nibble used as <code>BgRG</code> or <code>B1 G0 R1 G1</code> -- official values are 32...47, thus always printable.</p> <p>5.Takes another TWO chars, ASCII 32 and up, stating row &amp; column (home is <code>0,0</code> or ASCII 32,32).</p> <p>6.Read value from keyboard.</p> <p>7.Not yet implemented.</p>"},{"location":"software/filesys/","title":"minimOS file system","text":""},{"location":"software/filesys/#rationale","title":"Rationale","text":"<p>While a ROM-based system like Durango-X may not depend on it, a file system for managing a mass-storage device is always desirable. But a limited 8-bit system may struggle with the large file systems found on today's storage devices. Thus, a simplified file system should be implemented.</p> <p>The idea behind this is to simply add a header to any \"file\" which creates, by simple concatenation, a linked list, easily sorted out by the filesystem software by jumping between headers. This very same principle has been used on the minimOS Operating System as a means to manage ROM contents, but it's suitable for implementing a barebones filesystem in mass-storage devices as well, especially Solid-State ones (like a readily available SD card).</p>"},{"location":"software/filesys/#durango-x-volumes","title":"Durango-X volumes","text":"<p>Simply put, a volume is a concatenation of files, each of them preceded by a suitable header. Some padding must be applied at the end of every file, in case its length is not a 512-byte multiple, as required by most storage devices.</p> <p>From the very first sector (the leading 256 bytes would suffice) of a volume, any file can be accessed as all headers form a linked list; from the file's size (conveniently rounded up to the nearest 512-byte multiple) you may compute the next file's sector number, and so on. When this points to a non-valid header (at least three magic numbers must be checked), the volume has ended.</p> <p>Note</p> <p>A single file (with the proper header) is suitable as a whole volume as well, as the sector following it is (very) likely to contain garbage, and will thus fail the header validation procedure.</p> <p>Warning</p> <p>In very rare circumstances, older device contents after the volume's end may be recognised as a valid header; this shouldn't be a concern as the only ill effect would be the \"recovery\" of older files after the volume's contents; but in case of doubt, you may add a fake sector suitably filled (<code>$FF</code> is convenient for most devices) after every volume, for extra safety.</p> <p>Tip</p> <p>Concatenating files and ROM images can be easily done with the <code>cat</code> command, like the following example:</p> <p><code>cat image1.dux image2.dux image3.dux &gt; durango.av</code></p>"},{"location":"software/filesys/#volume-location","title":"Volume location","text":"<p>From the point of view of the storage device filesystem, the Durango-X volume is represented by the <code>durango.av</code> file in the root directory of any FAT32-formatted device (valid with bootloader v2.0 and beyond)</p> <p>Warning</p> <p>Current bootloader software (up to v1.3) does NOT check for any host filesystem, assuming the volume is written from the very first block of the device. In Linux, a <code>dd</code> command is suitable for raw writing the volume onto the storage device.</p> <p>Danger</p> <p>The use of the <code>dd</code> command or any equivalent one is very risky as any incorrect parameter may result in data loss. Exert extreme caution when writing raw images!</p> <p>Tip</p> <p>Flashing the volume into the storage device with the current bootloader software (up to v1.3) can be done in Linux like this:</p> <p><code>dd if=path-to/durango.av of=/dev/_your-device_</code></p> <p>Take extreme caution when determining <code>your-device</code>, as any wrong choice will cause data loss.</p>"},{"location":"software/filesys/#header-format","title":"Header format","text":"<p>Check the ROM image format for details.</p>"},{"location":"software/fulltest/","title":"Full Test","text":"<p>The Full Test ROM contains useful tests to check that your Durango is working properly. Here you can find information about each test.</p> <p>First of all, you need to know that you can switch between tests using the NMI button of your Durango, or <code>F2</code> if you are running on Perdita Emulator.</p> <p>Note</p> <p>Rev. 1 of the Durango-X board has no debouncing on the NMI button. Depending on your particular tactile switch, hitting NMI may skip some tests. This will be addressed on the next Durango revision, and will never be an issue under emulation.</p>"},{"location":"software/fulltest/#durango-test","title":"Durango Test","text":"Durango test with legend <p>The first test checks that the built-in features of the Durango board are working. This test checks the following features:</p> <ul> <li>Zeropage test: exhaustive test of this essential memory area. A brief high-pitched chirp is heard.</li> <li>Address lines and mirroring test: looks for shorts on the CPU and/or MUX address lines. Hardly noticeable.</li> <li>RAM test: The whole 32 K is tested, which takes about one second. A moving pattern of vertical white bars can be seen on the screen.</li> <li>ROM test: the ROM checksum is verified and the Durango-X logo is shown if passed; otherwise, <code>ROM</code> in the middle of a flashing screen will show up.</li> <li>Line and Frame Blanking test: checks that these signals can be read by the CPU at <code>$DF88</code>. If everything is OK, you will see the letters <code>L F</code> in green on the top left corner. If vertical blanking is not reported, the <code>F</code> will show up in red; orange letters mean timing is way off, or even the horizontal blanking is not reported (usually much less of an issue). Some flashing on the screen may be noticed during this test.</li> <li>Video mode port: Out of 8 bits, only 6 are actually functional; and just the upper 4 are needed to be readable. The colour of each bit is coded as follows:<ul> <li>GREEN: required and readable (the 4 leftmost dots MUST be green)</li> <li>CYAN: readable but not required (some mods may allow this to happen)</li> <li>MAGENTA: not required and neither readable (usually the 4 rightmost dots, repeated below for convenience)</li> <li>RED: required but not readable. This is a malfunction in any case and will show up repeated below.</li> </ul> </li> <li>NMI test: After the <code>NMI</code> text appears, you have about 2 seconds to press the NMI button as many times as you like (a faint click will be heard every time), then a dot for every detected hit will be displayed. Without button debouncing, more dots than the number of hits will appear, but this is normal. Less dots than the number of hits is a malfunction.</li> <li>Interrupt test: This test counts the number of interrupts in a time period (~129 ms); the screen will flash while doing it. If the number of interrupts differs from the expected one (32) give or take one, the test fails. Please check IRQ troubleshoot section for more information.</li> <li>6502 model shows the exact variant of the 6502 CPU:<ul> <li><code>6502</code>: Classic NMOS 6502 is not oficially supported, thus shown in red.</li> <li><code>65C02</code>: original CMOS 65C02 (No <code>SMB/RMB/BBS/BBR</code> opcodes).</li> <li><code>R'C02</code>: 65C02 with Rockwell/WDC extensions (<code>SMB/RMB/BBS/BBR</code>).</li> <li><code>65816</code> (in pink): 65C802/65C816, but the latter will need a suitable adapter.</li> </ul> </li> <li>Full Test Result: If ALL the tests have passed, after a sweeping sound you can see an <code>OK</code> text in green.</li> </ul>"},{"location":"software/fulltest/#error-codes","title":"Error codes","text":"<p>If any of the above tests fails, the <code>ERROR</code> LED will blink, while the screen will flash in sync. The pattern of flashes indicate the failed test.</p> Test flashing pattern Zeropage <code>@........</code> Address lines <code>@.@......</code> RAM <code>@.@.@....</code> ROM checksum <code>@.@.@@@@@</code> VSYNC blanking <code>@..@@@@@@</code> HSYNC blanking <code>@.@@.@@.@</code> IRQ (slow) <code>@@@@.....</code> IRQ (fast) <code>@.@.@.@..</code> <p>Where <code>@</code> means LED on and <code>.</code> means LED off. Each state lasts ~0.3 seconds, for a total ~2.7 s. cycle.</p>"},{"location":"software/fulltest/#gamepad-test","title":"GamePad Test","text":"Durango Gamepad test <p>With this test, You can see if all the buttons are working properly on your gamepad. Each time you press a gamepad button, you can see the red dot on screen. Gamepad 1 is shown at bottom in blue, while Gamepad 2 is at top in pink.</p>"},{"location":"software/fulltest/#keyboard-test","title":"Keyboard Test","text":"Durango Keyboard test <p>With this test, you can see if all the keys of your keyboard are working properly. Each time you press a key, you can see the corresponding dot on screen changing its colour from red to cyan.</p>"},{"location":"software/fulltest/#colour-test-chart","title":"Colour Test Chart","text":"Durango Colour test chart <p>This test is intended for proper adjustment of <code>RV127</code> and <code>RV128</code> on Durango-X's main board. All colours are shown as a reference. See Video Output calibration for details.</p>"},{"location":"software/fulltest/#high-resolution-test-chart","title":"High Resolution Test Chart","text":"Durango High Resolution test chart <p>This test is intended for proper adjustment of <code>RV231</code> on Durango-X's main board, only affecting HIRES mode. See Video Output calibration for details.</p>"},{"location":"software/header/","title":"Standard file header","text":""},{"location":"software/header/#rationale","title":"Rationale","text":"<p>Although Durango-X is a ROM-based computer, thus not depending on a proper filesystem, the use of a mass-storage device with ROM image files instead of \"blowing\" and switching physical (E)EPROMs is certainly convenient. Having into account the limitations of an 8-bit computer, especially when dealing with huge modern storage devices, a fully-featured filesystem implemented on the 6502 side would be pretty cumbersome; thus, an intermediate solution is proposed.</p> <p>The idea behind this is to simply add a standard header to any ROM image (like any individual \"file\") which creates, by simple concatenation, a linked list of ROM images, easily sorted out by the Durango-X computer thru jumping between headers. This very same principle has been used on the minimOS Operating System as a means to manage ROM contents, but does apply to mass-storage devices as well, especially Solid-State ones (like a readily available SD card).</p> <p>Tip</p> <p>This kind of file system has been already implemented for use with the SD card interface on the Development Cartridge, and it's available for source code storage with EhBASIC</p> <p>This header will provide adequate metadata, with some room for expansion. By the way, even if the desired software is going to live on an EPROM permanently and never downloaded from SD, it does not harm to have the Standard Header all the time, if you have 256 spare bytes for it.</p>"},{"location":"software/header/#hardware-support","title":"Hardware support","text":"<p>The Durango-X Development Cartridge provides a convenient way to upload and run software on the Durango-X computer. It provides an extra 32 KiB RAM switchable with the standard ROM, plus an inexpensive SD-card interface. While standard ROMs (up to 16 KiB) can be placed on this cartridge for regular use, with a suitable bootloader firmware it allows choosing whithin the ROM images stored in the card, downloading any of them in a matter of seconds, and running the selected software flawlessly -- as the Development Cartridge may lock its RAM after downloading, making it read-only just like a regular ROM.</p>"},{"location":"software/header/#rom-images","title":"ROM images","text":"<p>The use of a standardised format for ROM images allows the use of both EPROM blowers and convenient download from SD card or Raspberry Pi from the very same binary.</p> <p>Just like any other 6502 system, ROMs for Durango-X must have appropriate <code>NMI/RESET/IRQ</code> hardware vectors at the last addresses <code>$FFFA-$FFFF</code>. However, in order to be fully compliant, a suitable header plus some extra information at the end must be provided, according to this document.</p> <p>Note</p> <p>In order to be fully compliant with all devices, all ROM images must have a 512-byte multiple size, including all headers and footers.</p>"},{"location":"software/header/#header-format","title":"Header format","text":"<p>A simple 256-byte block must be provided in front of any ROM image in order to be properly identified and linked to other images on the device.</p> Offset Size (bytes) Contents Description 0 1 $00 Magic number #1 (<code>NUL</code>) 1 2 see table below Signature 3 2 16-bit pointer or <code>**</code> if unused Loading address (for Pocket format only) 5 2 16-bit pointer or <code>**</code> if unused Execution address (for Pocket format only) 7 1 $0D Magic number #2 (<code>CR</code>) 8 n Filename C-string with filename 8+n 1 $00 <code>NUL</code>-termination for the above 9+n m Comment C-string with optional comment (n+m \u2264 220 in current version) 9+n+m 1 $00 <code>NUL</code>-termination for the above (mandatory: if no comment is present, two <code>NUL</code>s are expected after filename) 10+n+m 220-n-m usually $FF padding 230 ($E6) 8 User Field 2 8-char string, free for the user, usually library commit hash 238 ($EE) 8 User Field 1 8-char string, free for the user, usually main code commit hash 246 ($F6) 2 Version (if applies) Little-endian 16-bit <code>%vvvvrrrrppbbbbbb</code>, where <code>v</code> is version number, <code>r</code> revision, <code>b</code> build and <code>p</code> phase (<code>%00</code>=alpha, <code>%01</code>=beta, <code>%10</code>=Release Candidate, <code>%11</code>=final). Optionally <code>%vvvvrrrrpphhbbbb</code>, where the whole revision number is a 6-bit number <code>%hhrrrr</code>. 248 ($F8) 2 Time Last modification time in FAT format 250 ($FA) 2 Date Last modification date in FAT format 252 ($FC) 3 file size Includes the 256-byte header. Cannot be over 16 MiB in the current implementation; most likely below 64 KiB. 255 ($FF) 1 $00 Magic number #3 (<code>NUL</code>) <p>Note</p> <p>additional metadata may be included just before the user field 2 (offset &lt; 230), as long as a tighter limit is set to filename+comment total length.</p>"},{"location":"software/header/#signatures-list","title":"Signatures list","text":"<p>In order not to depend on file extensions, the minimOS file system adds a non-mutable file signature which describes the type of file stored afterwards. Currently supported signatures are shown in the table below:</p> Signature Size Type <code>dX</code> &lt; 64 KiB executable ROM image <code>pX</code> &lt; 24 KiB Pocket executable to be loaded into standard RAM (under development) <code>dA</code> &lt; 16 MiB generic file <code>dL</code> &lt; 16 MiB free space <code>dR</code> 8.5 KiB HIRES screen dump (256x256 1bpp) <code>dS</code> 8.5 KiB Colour screen dump (128x128 4bpp) <code>dr</code> &lt; 8.5 KiB RLE-compressed HIRES screen dump (256x256 1bpp) <code>ds</code> &lt; 8.5 KiB RLE-compressed Colour screen dump (128x128 4bpp) <p>Note</p> <p>Uncompressed screen dumps include a 256-byte empty leader, in order to be sector-aligned. Compressed pictures aren't yes (as of v2.0) supported by the bootloader, and neither are Pocket executables.</p>"},{"location":"software/header/#footer-format","title":"Footer format","text":"<p>In order to be fully compliant with the Development Cartridge, some extra content must be provided at the end of the ROM image. More often than not, the actual code from any ROM will end before the standard <code>$FFFA</code> vectors initial address. We need to reserve the last 42 bytes for compliance, just as shown in the following example:</p> <pre><code>; (actual ROM code above)\n    .dsb  $FFD6 - *, $FF    ; padding to reserved area\n    .asc  \"DmOS\"            ; Durango-X ROM signature\n    .dsb  $FFE1 - *, $FF    ; padding to Development Cartridge interface\n    JMP ($FFFC)             ; jump to (downloaded) RESET vector\n\n    .dsb  $FFFA - *, $FF    ; standard padding\n    .word nmi               ; standard 6502 hard vectors for the supplied ROM\n    .word reset\n    .word irq\n</code></pre> <p>Note</p> <p>While not absolutely necessary, it is highly recommended that the interrupt hard vectors point to <code>JMP ($0200)</code> (for IRQ) and <code>JMP($0202)</code> (for NMI), for ease of integration with debuggers. In this case, the startup code must fill the RAM vectors at <code>$0200-$0203</code> to make them point to the supplied IRQ and NMI service routines (or to a stored <code>RTI</code> opcode, if not used).</p> <p>Tip</p> <p>Pocket format cannot supply the <code>IRQ</code> and <code>NMI</code> hard vectors, thus relies on setting the standard interrupt vectors at <code>$0200</code> and <code>$0202</code> as described above. The footer is not needed for this format.</p>"},{"location":"software/header/#using-rom-images","title":"Using ROM images","text":"<p>ROM images compliant with the aforementioned format are suitable for ROM chips, downloadable files stored in a Raspberry Pi server, or even joined into a Durango-X volume. Check the following link for more information about getting these running in Durango-X</p>"},{"location":"software/roms/","title":"Utility Software","text":"<p>Home &gt; Software &gt; Utility Software</p>"},{"location":"software/roms/#utility-software","title":"Utility Software","text":"<p>Here you can find information about Durango's programs or utilities.</p>"},{"location":"software/roms/#download","title":"Download","text":"<p>You can download the Binary ROM image, or see the source code. Most of the assembly source code can be assembled with the xa65 assembler.</p> <p>Note</p> <p>Most of these ROM images are intended to be used with the Perdita emulator, or downloaded into an SD card for bootstrapping. In order to \"blow\" an EPROM/EEPROM with them, make sure the contents stay at the end of the memory range, adding an appropriate leader (usually consisting of <code>$FF</code>s) to match your chip's capacity, if needed.</p>"},{"location":"software/roms/#ehbasic","title":"EhBASIC","text":"EhBASIC for Durango-X <p>basic.dux: EhBASIC Interpreter. With this ROM you can run BASIC programs in your Durango. This is an MS-BASIC-based interpreter, but it adds Durango-specific BASIC commands for graphics, colour and sound.</p> <ul> <li>ROM image (32 KiB, EPROM/EEPROM-ready)</li> <li>Source Code</li> </ul> <p>More information about EhBASIC interpreter:</p> <ul> <li>EhBASIC Reference Manual.</li> <li>Durango-Specific BASIC Commands</li> </ul>"},{"location":"software/roms/#nano-python","title":"Nano Python","text":"<p>Durango Python Interpreter (Proof-of-Concept) under development.</p>"},{"location":"software/roms/#nanoboot","title":"nanoBoot","text":"<p>This is the bootstrap firmware loader from a Raspberry Pi or SD card).</p> <p>With this ROM you can launch ROM images using the nanoLink interface connected to a Raspberry Pi, or from an SD card. Needs the Development Cartridge.</p> <ul> <li>Bootstrap ROM (16 KiB, EPROM/EEPROM-ready) for RasPi &amp; SD.</li> <li>Source Code depends on some other files, check <code>#include</code>s.</li> </ul> <p>There is an specific version for the SD card interface] on the Development Cartridge; it allows selection between several concatenated ROM images to boot, plus works as a screen dump viewer (both HIRES and colour modes):</p> <ul> <li>Bootstrap ROM (16 KiB, EPROM/EEPROM-ready), SD card only.</li> <li>Source Code depends on some other files, check <code>#include</code>s.</li> </ul> <p>For more information, please see Raspberry Pi Server tool Section and the ROM images in SD card section</p>"},{"location":"software/roms/#gamepads-tester-standalone","title":"GamePads Tester (standalone)","text":"Durango-X Gamepads Test <ul> <li> <p>gamepads.bin : Standalone Durango Gamepad Tester; Press Gamepad buttons to check that they're working. This test is compatible with the integrated 40-key Keyboard and gamepad interface.</p> </li> <li> <p>ROM</p> </li> <li>Source Code</li> </ul>"},{"location":"software/roms/#keyboard-tester-standalone","title":"Keyboard Tester (standalone)","text":"Durango Keyboard Test <ul> <li> <p>keyboard_tester.bin : Standalone Durango Keyboard Tester. Press keyboard buttons to check that it's working properly. This test is compatible with the integrated 40-key Keyboard and gamepad interface.</p> </li> <li> <p>ROM.</p> </li> <li>Source Code.</li> </ul> <p>Note</p> <p>If three or more keys are pressed at the same time, ghosting may happen. The simple matrix used on the 40-key Keyboard cannot avoid this, unfortunately.</p>"},{"location":"software/roms/#durango-full-test","title":"Durango Full Test","text":"Durango Full Test <ul> <li> <p>fulltest.dux : Full Hardware Test for Durango and basic peripherals; use <code>NMI</code> (F2 on perdita) key to cycle between all tests. Includes a compact version of the gamepads &amp; keyboard tests above.</p> </li> <li> <p>ROM</p> </li> <li>Source Code depends on some other files, check <code>#include</code>s.</li> </ul> <p>For more information about Full Test, please check Full Test documentation page.</p>"},{"location":"software/software/","title":"Software","text":"<p>Home &gt; Software</p>"},{"location":"software/software/#software","title":"Software","text":"<p>In this section you can find software for the Durango-X computer. You can find Utility Software and Games for use with Durango-X.</p> <p>From utility Software like the EhBASIC interpreter to write programs for Durango-X using the BASIC programming language, to games using all the power of the 16 colours of Durango.</p> <p>You can run these programs using a Durango-X Home Computer, or using the Durango Emulator (Perdita)</p>"},{"location":"software/software/#durango-software","title":"Durango Software","text":"<ul> <li>Utility Software</li> <li>Games</li> </ul>"},{"location":"start/building/","title":"Building","text":"<p>Site map) Home &gt; Getting Started &gt; Building the Durango\u00b7X computer</p>"},{"location":"start/building/#building-the-durangox-computer","title":"Building the Durango\u00b7X computer","text":"<p>Make your own!</p>"},{"location":"start/building/#pcb-manufacturing","title":"PCB manufacturing","text":"<p>Fortunately, the chore of creating homebrew PCBs is over... Nowadays, tons of PCB manufacturers and free CAD software allows getting professional-looking PCBs in a quite inexpensive way. And we already took the job of designing them!</p>"},{"location":"start/building/#assembly-guide-computer","title":"Assembly guide (computer)","text":"<ol> <li>Building options</li> <li>BOM</li> <li>Step by step</li> <li>Video Output Calibration</li> <li>Troubleshooting</li> </ol>"},{"location":"start/building/#assembly-guide-keyboardgamepads-interface","title":"Assembly guide (keyboard/gamepads interface)","text":"<ol> <li>Building options</li> <li>BOM</li> <li>Step by step</li> </ol>"},{"location":"start/building/#assembly-guide-cartridge","title":"Assembly guide (cartridge)","text":"<ol> <li>Building options</li> <li>BOM</li> <li>Step by step</li> </ol>"},{"location":"start/running/","title":"Running","text":"<p>Home &gt; Getting Started &gt; Running Durango Software</p>"},{"location":"start/running/#running-durango-software","title":"Running Durango Software","text":""},{"location":"start/running/#on-actual-hardware","title":"On actual hardware","text":"<ol> <li>ROM cartridges</li> <li>ROM images on SD card</li> <li>Pocket executables on SD card</li> <li>Pocket executables from Raspberry Pi</li> </ol>"},{"location":"start/running/#emulation","title":"Emulation","text":"<ul> <li>Perdita</li> <li>MAME</li> </ul>"},{"location":"start/build/cartridge/","title":"Cartridge","text":"<p>Site map) Home &gt; Getting Started &gt; Building Durango\u00b7X &gt; Assembly guide (cartridge)</p>"},{"location":"start/build/cartridge/#assembly-guide-cartridge","title":"Assembly guide (cartridge)","text":"<p>Since the Durango\u00b7X computer has no built-in ROM or any kind of firmware, it's essential to have at least one cartridge in order to boot the computer!</p> <p>Many of these cartridges fit into a standard Commodore 64 cartridge shell for convenience.</p>"},{"location":"start/build/cartridge/#building-options","title":"Building options","text":"<p>There are several types of available cartridges:</p> <ol> <li>mini-cartridge allows simple, instant-on execution of stored software, much like a classic console cartridge. Note: you may need an EPROM/EEPROM/Flash programmer in order to store the software (The MiniPro TL866 is a popular choice).</li> <li>Development Cartridge includes 32 KiB of RAM which can emulate ROM, allowing the use of ROM images conveniently stored in an SD card. You still need at least an EPROM/EEPROM/Flash memory chip with a suitable bootloader installed, though.</li> <li>ShadowRAM is a more elegant, compact version of the Development Cartridge, suitable for larger bootloaders (32 KiB instead of 16).</li> <li>Bankswitching allows multiple ROM images on a single cartridge which may be switched via software (128K-1M) or the <code>RESET</code> button (multi-cartridge).</li> <li>Universal Cartridge (NEW) combines the functionality of the mini-cartridge, bankswitching cartridge and PSG riser boards, supporting almost all EPROM/EEPROM/Flash chips from 2 KiB up to 1 MiB with improved sound thru the SN76489 Programmable Sound Generator with a newly developed amplifier. </li> <li>Riser boards add extra capabilities which might be built in custom cartridges, like enhanced sound output. You still need another kind of cartridge (loaded with the desired software) plugged into the riser's top slot.</li> </ol> <p>For starters, either the mini-cartridge or the original Development cartridge is recommended</p>"},{"location":"start/build/cartridge/#bom","title":"BOM","text":"<p>Check any particular cartridge page (links above) for detailed component list and other advice.</p> <p>Check the BOM for the Development Cartridge</p>"},{"location":"start/build/cartridge/#step-by-step","title":"Step by step","text":"<p>Note</p> <p>Unlike most boards from the Durango project, cartridge boards intended to be fitted into a C64 cartridge shell will NOT accept IC sockets.</p> <p>For generic advice, please read the common build procedures for any other boards. Detailed instructions are given on any particular cartridge page (links above).</p>"},{"location":"start/build/durango/","title":"Durango","text":"<p>Home &gt; Getting Started &gt; Building Durango\u00b7X &gt; Assembly guide (computer)</p>"},{"location":"start/build/durango/#assembly-guide-computer","title":"Assembly guide (computer)","text":""},{"location":"start/build/durango/#building-options","title":"Building options","text":"<p>Whithin the same board, you may choose from several building options:</p> <ul> <li>Supported video modes:<ul> <li>Colour only (Durango\u00b7S)</li> <li>HIRES only (Durango\u00b7R)</li> <li>Both modes (Durango\u00b7X, recommended option)</li> </ul> </li> <li>Monitor output:<ul> <li>SCART (colour via RGB, recommended option)</li> <li>Sync-on-green (v1) / Component video (v2+)</li> </ul> </li> <li>Composite encoding:<ul> <li>Greyscale (standard in v1)</li> <li>Luminance (standard in v2+, recommended option)</li> </ul> </li> </ul> <p>Warning</p> <p>It is known that many modern TVs are not compatible with the 240/288p signal supplied by Durango-X thru the Component Video input. In such cases, if a suitable YPbPr-to-HDMI converter is not available (we're researching on that), you may always use the composite video input, although in greyscale mode. Note that this will perform fine in HIRES mode.</p> <p>Tip</p> <p>If you can hook a PlayStation 2 thru Component video input and properly play a PS1 game on it, your TV is most likely compatible with Durango-X.</p> <p>There are some independent options as well, you may add them as desired:</p> <ul> <li>Second audio/video output</li> <li>PAL encoder (for composite output, NOT recommended)</li> <li>Piezo buzzer for audio</li> </ul>"},{"location":"start/build/durango/#bom","title":"BOM","text":"<p>Before you begin soldering, please make sure you've got both the PCB and ALL of the components needed, and that they fit the footprints on the PCB. Depending on the chosen configuration, some components may vary. In some cases, values are not mandatory and might be changed to fit your stock.</p> <p>Since this is a modular board which allows several configuration options, make sure you get the right components for your choice. Generally speaking:</p> <ul> <li>Single-digit designator: common components needed for all configurations.</li> <li><code>1xx</code> (<code>100</code> to <code>199</code>) designators: if colour mode is required (Durango\u00b7S and \u00b7X).</li> <li><code>2xx</code> (<code>200</code> to <code>299</code>) designators: if HIRES mode is required (Durango\u00b7R and \u00b7X).</li> <li><code>3xx</code> (<code>300</code> to <code>399</code>) designators: whenever both video modes coexist (Durango\u00b7X only, otherwise is a single-mode Durango).</li> <li><code>4xx</code> (<code>400</code> to <code>499</code>) designators: for the video mode settings register (resolution, inverse, greyscale, screen-switching, Emilio's LED).</li> <li><code>5xx</code> (<code>500</code> to <code>599</code>) designators: for the extra video features (readable video mode, horizontal &amp; vertical blanking detection).</li> <li><code>6xx</code> (<code>600</code> to <code>699</code>) designators: components for Component Video output (v2 only)/PAL encoder option (v1 only)</li> <li><code>7xx</code> (<code>700</code> to <code>799</code>) designators: if the second video output is required (includes audio for the option above). Range not used on v1</li> <li><code>8xx</code> (<code>800</code> to <code>899</code>) designators: if HIRES mode is NOT fitted (Durango\u00b7S only).</li> <li><code>9xx</code> (<code>900</code> to <code>999</code>) designators: if SCART video output is required. Range not used on v1</li> </ul> <p>v1 with Sync-on-green option adds <code>J005</code> as well.</p> <p>Tip</p> <p>The standard build (SCART-equipped fully software-featured Durango\u00b7X) would use all components except designators <code>6xx</code>, <code>7xx</code> and <code>8xx</code>.</p>"},{"location":"start/build/durango/#step-by-step","title":"Step by step","text":"<p>Warning</p> <p>This is a particularly complex project so it's assumed you've got some experience soldering electronic circuits.</p> <p>First of all, please read the general advice suitable for all of the boards. But before soldering, have into account this particular board's peculiarities:</p> <ul> <li>IOx and Expansion (sidecar) connectors must be placed ABSOLUTELY FLUSH to the board, otherwise fitting peripherals may become difficult or right impossible!</li> <li>Some video output options are compatible and may be installed simultaneously, but some others have overlapping footprints and aren't. Other than that, all the components can be fitted to the board without any problems, no matter the selected configuration.</li> <li>If you plan to use the suggested keyboard/gamepads interface board, do NOT solder <code>D6</code> and <code>D4</code> yet (<code>POWER</code> and <code>ERROR</code> LEDs) as they must be set at the proper height in order to be visible over the keyboard PCB.</li> </ul> <p>Bug</p> <p>v2 and v2.1 PCBs have a design bug which displays the picture heavily shifted to the left of the screen (although the whole area stays visible). Check the hacks and fixes section for an easy mod to fix this. v2.2 and later are NOT affected by this bug, as wasn't v1.</p>"},{"location":"start/build/durango/#video-output-calibration","title":"Video Output Calibration","text":"<p>Adjustment procedure in order to get the best video output from a Durango computer</p>"},{"location":"start/build/durango/#troubleshooting","title":"Troubleshooting","text":"<p>Not working? Don't panic!</p>"},{"location":"start/build/general/","title":"General","text":"<p>Site map) Home &gt; Getting Started &gt; Building Durango\u00b7X &gt; General advice</p>"},{"location":"start/build/general/#general-advice-for-assembly","title":"General advice for assembly","text":"<p>Warning</p> <p>This a VERY COMPLEX project (especially the computer board, now with over 1000 pads to be soldered). This is NOT an ideal project to learn soldering techniques! You've been warned... In any case, take your time, read throughfully all the directions FIRST, then start building step-by-step as indicated -- and be patient!.</p> <p>Danger</p> <p>Soldering is a risky activity! From severe burns to toxic fumes inhalation and MANY other hazards! Make sure you follow ALL of the Safety Advice stated on this document BEFORE attempting any soldering!</p>"},{"location":"start/build/general/#tools-and-materials","title":"Tools and materials","text":"<ul> <li>Obviously, you'll need a soldering iron. Doesn't need to be a fancy one, but you'll definitely need a very fine tip -- some people prefer the chisel-shaped ones. Temperature regulation is not essential, but might be helpful -- some pads are connected to broad ground planes, which do \"stole\" quite a bit of heat from the iron. In case a fixed power iron is used, anything between 11 and 30 Watts seems suitable.</li> <li>About solder (tin) itself, since these are very dense boards, fine (~0.5 mm) solder wire is recommended; however, thicker wire (~1 mm) may be useful for bigger joints (connectors etc). Depending on your local regulations and health concerns, you might use leaded or lead-free solder; the latter will need somewhat higher temperatures and may require some extra experience (this is NOT a project for newbies, anyway). Most solder wire nowadays include a flux core for easier soldering.<ul> <li>If leaded solder is to be used, make certain proper safety procedures are used: the use of gloves is recommended and, of course, do wash your hands throughly after a soldering session.</li> </ul> </li> <li>In any case, avoid inhaling fumes (actually from the flux core inside most soldering wires) by working in a well ventilated area or using a suitable fume extractor! This is a MUCH bigger concern than the use of leaded solder, by the way.</li> <li>Flux is not essential, but sometimes helpful as it cleans the soldering surfaces. Fumes are harmful, thus check the ventilation advice above.</li> <li>On projects of such complexity, errors are to be expected... Some way to desolder components is really helpful:<ul> <li>A desoldering pump is a cheap and relatively efficient way for casual desoldering.</li> <li>A desoldering iron combines a regular iron with a (usually bulb-operated) pump, for convenience.</li> <li>Solder wick is somewhat slower, but usually gives the best finish. Adding liquid flux to the braid may improve performance, especially when using lower-priced wicks.</li> <li>For higher volume and utmost convenience, a desoldering station is best -- at a price.</li> </ul> </li> </ul>"},{"location":"start/build/general/#soldering-advice","title":"Soldering advice","text":"<p>Besides following all of the safety advice, it is assumed that you already have some experience with soldering, as this is NOT a project for newbies... In any case, here are some general advice:</p> <ul> <li>Place one or more components on the board (component side, where the outlines and values are silkscreened). Since soldering is done on the opposite side (where the component designators are the only silkscreen) you need some way to preclude components from falling off the board: adhesive tape, blue tack or even a suitable rag are helpful. Do NOT bend component leads as tempting as it may look, since that will make future repairs WAY more difficult.</li> <li>Take your time on each solder joint! The usual procedure is:         1.  Put the soldering iron heating both the pad and the component lead for a couple of seconds.         1.  Apply the solder wire to the heated pad -- never on the iron tip! It should melt and flow easily around the pad, perhaps a tiny movement of the soldering iron might help.             -   Some pads are connected thru <code>Vcc</code> or <code>GND</code> to broad ground planes. Depending on your soldering iron and the particular tip, these pads might need a few seconds more to heat up properly.             -   If solder does not \"embrace\" the pad, but forms a \"ball\" besides the component lead, you probably need some cleaning on the surfaces. A previous wipe with Iso-Propyl Alcohol is useful in these cases, as is the use of flux before soldering.         1.  After removing the solder wire, keep the iron for a couple of seconds to let the solder flow completely. Power and ground pins may need a longer time here; as a rule of thumb, keep the iron after soldering as long as it was preheating the pad before.         1.  Check (at least from time to time) the quality of your solder joint: it should look shiny, not matte. Reflowing the solder joint (repeating the step above) will usually fix a rushed soldering work and may avoid future malfunction. Beware of short circuits between nearby pads!</li> <li>For components with several pins (e.g. integrated circuits, sockets, resistor packs etc) it's best to solder two opposite corners first, check alignment and then continue with the remaining pins. If you are doing several similar components in a row, it's advisable to do one pin on each component, then the next pin etc, in order not to build excessive heat on the same component in a short amount of time.</li> </ul> <p>Warning</p> <p>Some components (especially semiconductors, like diodes, transistors and non-socketed integrated circuits are sensitive to heat! Solder them in a diligent, timely fashion. If you're having trouble with a pin, try another component and get back to that pin later -- or wait at least 10 seconds or so before resoldering it.</p>"},{"location":"start/build/general/#build-procedure","title":"Build procedure","text":"<ol> <li>First of all, get the desired PCB(s). Take note of the version number on the silkscreen, as well as the desired build option (if available), since both the BOM and required fixes may change between revisions! Don't forget to read the appropriate Hacks &amp; Fixes document linked on each step-by-step page.</li> <li>Get the components as stated on the BOM, having into account the selected option and revision number, if available!</li> <li>Proceed with soldering, following each and every safety advice as stated above! For best results, fit the components in reverse height order -- that is, place shallower components first, and let the tallest ones for the end. Generally speaking this order results in:<ol> <li>Horizontally mounted axial components, like resistors and diodes (e.g. on the Keyboard PCB)</li> <li>IC sockets and resistor packs. Very small capacitors are likely to be fitted now as well.</li> <li>Pin sockets and small connectors. Note that the expansion connector on the Durango PCB must be mounted absolutely flush!!!</li> <li>Vertically mounted components: resistors, diodes, transistors and small electrolytic capacitors.<ul> <li>Beware of polarity! Most resistor packs have a dot on the common pin, diodes and electrolytic caps have a band near the negative pin; for transistors, check the outline on the silkscreen. On LEDs, the negative side is the shorter lead; usually they have a flatter capusule near that lead.</li> </ul> </li> <li>Pin headers are usually fitted now, depending on height.</li> <li>Power resistors (like <code>R27</code> on the Durango\u00b7X PCB, if fitted) are somewhat taller and thus mounted afterwards. Ditto for taller capacitors -- just sort everything by height.</li> <li>Big connectors usually go last.</li> </ol> </li> </ol> <p>Danger</p> <p>Once again, beware of polarity. A transistor fitted backwards will work weakly, a backwards diode won't work at all; but an electrolytic capacitor mounted the other way round will actually EXPLODE!!!.</p>"},{"location":"start/build/keyboard/","title":"Keyboard","text":"<p>Home &gt; Getting Started &gt; Building Durango\u00b7X &gt; Assembly guide (keyboard)</p>"},{"location":"start/build/keyboard/#assembly-guide-keyboardgamepads-interface","title":"Assembly guide (keyboard/gamepads interface)","text":""},{"location":"start/build/keyboard/#building-options","title":"Building options","text":"<p>Whithin the same board, you may choose from two building options:</p> <ul> <li>NES gamepad version</li> <li>Megadrive/Genesis/Atari 2600 version</li> </ul> <p>For improved typing experience, you may consider adding the keyboard overlay.</p>"},{"location":"start/build/keyboard/#bom","title":"BOM","text":"<p>This is a modular board which not only allows the choice of gamepad interface, but also makes the keyboard optional. Much like the main computer board, a prefix on component designators indicate what option that component is needed:</p> <ul> <li>Single-digit designator: common components needed for all configurations.</li> <li><code>1x</code> (<code>10</code> to <code>19</code>) designators: if keyboard is required.</li> <li><code>2x</code> (<code>20</code> to <code>29</code>) designators: for Megadrive/Genesis/VCS keypad 1</li> <li><code>3x</code> (<code>30</code> to <code>39</code>) designators: for NES keypad 1</li> <li><code>4x</code> (<code>40</code> to <code>49</code>) designators: for Megadrive/Genesis/VCS keypad 2</li> <li><code>5x</code> (<code>50</code> to <code>59</code>) designators: for NES keypad 2</li> </ul> <p>...with the exception of the keyboard switches (<code>SW1</code> to <code>SW40</code>) which are all obviously related to the keyboard.</p> <p>Warning</p> <p>Unlike most multi-option boards on the Durango ecosystem, some components for the NES or Megadrive options are NOT compatible with each other and must NOT be fitted together, otherwise malfunction (or even component damage!) may occur.</p>"},{"location":"start/build/keyboard/#step-by-step","title":"Step by step","text":"<p>As usual, follow all the usual recommendations. Exert special caution when mounting the connection to computer (<code>J5</code>), although this board can be used externally (i.e., not sitting atop the Durango\u00b7X main PCB) by using an IDC-16 cable.</p> <p>Bug</p> <p>Versions of this board prior to v1.3 had a bug affecting the MD/Genesis/VCS option. A workaround is described for these boards but it swaps the functionality of the <code>START</code> and <code>C</code> (a.k.a. <code>SELECT</code>) buttons. NES version was never affected but v1.3 is anyway recommended because of the improved silkscreen. ALWAYS make sure to read the Hacks and fixes section.</p>"},{"location":"start/build/pcb/","title":"Pcb","text":"<p>Home &gt; Getting Started &gt; Building Durango\u00b7X &gt; PCB</p>"},{"location":"start/build/pcb/#pcb-manufacturing","title":"PCB manufacturing","text":"<p>(under construction)</p> <p>Get the Gerber files (in a <code>.zip</code> package) from the desired board and send them to JLC PCB.</p> <p>Alternatively, if you want to use any other PCB manufacturer, or customise the board in some way:</p> <ol> <li>Open the design files in KiCAD 5.x</li> <li>Edit the Pcbnew file if desired</li> <li>Generate the Gerber files according to your manufacturer instructions</li> <li>Order your PCBs from your favourite manufacturer via the Gerber files</li> </ol>"},{"location":"start/build/cart/bom/","title":"Bom","text":"<p>Site map) Home &gt; Getting Started &gt; Building &gt; Cart &gt; BOM</p>"},{"location":"start/build/cart/bom/#bill-of-materials","title":"Bill Of Materials","text":"<p>Once you get the Development Cartridge (ShadowRAM) PCB, it's time to gather all the necessary components. Make sure you pick up all the component for a particular configuration; some components differs due to the chose options and the desired configuration.</p> <p>Note</p> <p>Assume all ICs are in DIP package, resistors are rated 1/4 W and capacitors 10 V or higher, unless noted otherwise.</p> Class Type Qty (*) Notes Static Memory 62256 1 SMD surface welding EEPROM or Flash 27/28C256 1 32KB ROM DIP Socket 32 Pin DIP Socket 1 DIP Socket 16 Pin DIP Socket 3 DIP Socket 20 Pin DIP Socket 1 Integrated Circuit 74HC139 2 Integrated Circuit 74HC245 1 Integrated Circuit 74HC174 1 Passive Capacitor 22nF 1 SPI Reader SD Reader SPI 16 Pin 1"},{"location":"start/build/computer/bom/","title":"Bom","text":"<p>Site map) Home &gt; Getting Started &gt; Building &gt; Durango\u00b7X &gt; BOM</p>"},{"location":"start/build/computer/bom/#bill-of-materials-v2x","title":"Bill Of Materials (v2.x)","text":"<p>Once you've got the PCB, it's time to gather all the necessary components. Make sure you decide on a particular configuration as some components differ according to the chosen option.</p> <p>Also, don't forget to check the Notes below for alternative values.</p> <p>Tip</p> <p>If you are building Durango\u00b7R (HIRES mode only), since it generates no colour signal at all, it makes no sense to select the Component Video option. If SCART is not available, use the second video output option for a suitable monochrome signal thru an RCA jack. You may delete <code>C5</code> and <code>R30</code> as these provide the SCART output only.</p> <p>If you want to build the older v1 PCB, check this BOM instead! </p> <p>Note</p> <p>Assume all ICs are in DIP package, resistors are rated 1/4 W and capacitors 10 V or higher, unless noted otherwise.</p> Class Type Qty. (*) \u00b7S \u00b7R Component video Second video output Buzzer Notes Piezo Buzzer passive 0 +1 Capacitor 68 pF 1 3 Capacitor 22 nF 1 1 Capacitor 100 nF 1 2 E.Capacitor 1 \u00b5F 0 13 E.Capacitor 10 \u00b5F 2 1 E.Capacitor 100 \u00b5F 1 +2 +1 1 E.Capacitor 220 \u00b5F 1 1 E.Capacitor 470 \u00b5F 1 +1 1 Diode 1N4148 6 4 LED 3 mm 2 5 Transistor BC548 7 -1 -1 +3 4 Resistor 27 (0.5 W) 0 +1 7 Resistor 75 1 +2 +1 12 Resistor 120 4 -1 -1 6, 13 Resistor 330 0 +2 Resistor 470 4 -2 Resistor 680 2 -1 5 Resistor 1 K 2 +4 9 Resistor 1.2 K 1 -1 Resistor 3.3 K 5 -2 -1 +2 8 Resistor 5.6 K 0 +2 10 Resistor 6.8 K 2 +2 Resistor 8.2 K 1 -1 Resistor 12 K 2 -1 5 Resistor 18 K 1 -1 Resistor 22 K 2 +1 Resistor 33 K 2 -1 -2 +1 Resistor 39 K 0 +1 Resistor 47 K 0 +1 Resistor 56 K 0 +1 11 Resistor 82 K 0 +1 Resistor 100 K 1 3 Resistor 220 K 0 +2 14 Res. network 8x 3.3 K 1 15 Res. network 4x 4.7 K 1 16 Variable Res. 5 K 1 -1 17 Variable Res. 10 K 2 -1 -1 17, 18 Microprocessor 65C02 1 Static RAM 62256 1 Integrated circuit 74HC00 1 Integrated circuit 74HC02 1 Integrated circuit 74HC20 1 -1 Integrated circuit 74HC21 1 Integrated circuit 74HC30 1 Integrated circuit 74HC32 1 Integrated circuit 74HC74 1 Integrated circuit 74HC85 2 Integrated circuit 74HC86 2 -1 Integrated circuit 74HC139 2 Integrated circuit 74HC157 4 -1 -2 Integrated circuit 74HC166 1 -1 Integrated circuit 74HC174 1 19 Integrated circuit 74HC175 1 Integrated circuit 74HC245 3 -1 Integrated circuit 74HC257 4 -2 -2 20 Integrated circuit 74HC367 1 19 Integrated circuit 74HC574 1 -1 Integrated circuit 74HC688 1 Integrated circuit 74AC4040 1 21 Integrated circuit 74HC4040 2 21 <p>*) Standard build is a Durango\u00b7X v2.2 with SCART output and no second video output, piezo buzzer or any extra simplifications.</p>"},{"location":"start/build/computer/bom/#notes","title":"Notes","text":"<ol> <li>Non-critical value, as long as it's kept within the same order of magnitude. Higher values are usually preferable, although component footprint might be the limiting factor.</li> <li><code>C2</code> works as a low pass filter for audio output. May be reduced down to 39 nF or so, if more treble is desired. Does NOT affect piezo buzzer anyway.</li> <li>Nominal value, may be changed in case of interrupt problems.</li> <li>Non-critical. Any small signal equivalent device (e.g. 1N914 diodes, or 2N3904 transistors) will do, but make sure about alternative pinouts.</li> <li>Colours are personal preference, of course, but the proposed resistors expect the <code>POWER</code> LED to be a high efficiency type (Gallium Nitride, e.g. blue) whereas the <code>ERROR</code> LED may use an older Gallium Arsenide-Phosphide (red) unit. Resistors <code>R29 (POWER)</code> and <code>R6 (ERROR)</code> should be adapted to the LED type and preferred brightness.</li> <li>If the second video output is not fitted, or never to be used simultaneously with the main one, <code>R15</code> can be up to 330 ohm. SCART-equipped Durangos may reduce power consumption by upping <code>R922</code> up to 220 ohm or so, although some TVs may not switch reliably into RGB mode.</li> <li>Change according to desired piezo buzzer volume. Could be down to a zero-ohm bridge, although that might overload <code>Q3</code>. Notice relatively high power dissipation!</li> <li><code>R3</code>,<code>R34</code> and, to some extent, <code>R337</code> are just strong pull-ups and may be chosen from around 1 Kohm up to 10 Kohm or so.</li> <li><code>R32</code> is for Emilio's LED and may be suited to the desired brightness (down to 680 ohm). If you intend to use this pin as a general purpose output, you may replace this resistor with a jumper.</li> <li>Theoretical value is 6.2 Kohm from the E24-series, but the E12 standard 5.6 Kohm seems acceptable.</li> <li>Theoretical value is 62 Kohm from the E24-series, but the E12 standard 56 Kohm seems acceptable.</li> <li>Correct value (as per RS-170 standard) is 75 ohm from the E24-series, although the E12 standard 68 ohm is acceptable.</li> <li><code>C10</code> was originally 1 \u00b5F, but fitting it does actually impair NMI debouncing and should not be used. In this case, <code>R35</code> can be safely replaced by a jumper as well.</li> <li>These are just weak pull-ups/pull-downs and may be chosen from around 1 Kohm up to 330 Kohm or so. Even if they're only needed for the Durango\u00b7S variant, fitting them won't harm in any case!</li> <li>Strong pull-downs in SIP-9 package. This is the nominal value but could be modified slightly without any ill effect.</li> <li>Strong pull-ups in SIP-5 package. Nominal value is 3.3 Kohm, but 4.7 has worked fine always.</li> <li>PIHER PT-6-V package.</li> <li>Originally specified as 5 K, the new value allows for a broader adjustment margin.</li> <li>Could be ommited in certain configurations, see options.</li> <li>Single-mode Durangos (\u00b7S, \u00b7R) may use <code>74HC157</code> instead.</li> <li>Although HC versions may serve well in any case, the faster AC version is recommended for <code>U15</code>, while <code>U14</code> may be safely replaced by a slower non-HC CD4040. In some cases, <code>U19</code> could be of this slower type as well, but display may become slightly glitchy.</li> </ol>"},{"location":"start/build/computer/bom/#logic-families","title":"Logic families","text":"<p>Warning</p> <p>Some sellers on eBay, AliExpress and the like, seem to be selling non-compliant parts -- they seem to work fine on less demanding circuits, but fail whenever they're \"pushed\" within spec. In the case of the Durango computers, U15 and U125 are particularly sensitive parts, thus a reputable source is recommended or, at the very least, make sure you purchase under a reasonable return policy.</p> <p>The Durango\u00b7X computer is designed around high-speed CMOS (HC) technology. SRAM chips are nearly always of such type, as is the 65C02 CPU_; the rest of the circuit is made from standard 74HC parts. Some considerations have to be done:</p> <ul> <li>Generally speaking, 74HC and 74HCT are both suitable and normally interchangeable. However, the use of an HCT for <code>U32</code> (or <code>U8</code> on v1 boards) may affect interrupt performance, check here for details.</li> <li>In case of <code>U14</code>, a non-HC CD4040 may be used without any ill effect. In some cases, <code>U19</code> can be replaced by a non-HC unit as well, although some glitches on the screen might be seen.</li> <li>Performance of <code>U15</code> is critical. v1 boards work fine with a 74HC unit but, in case of v2, a 74AC4040 is highly recommended -- some displays may become unstable with the HC part.</li> <li>Again, <code>U125</code>'s performance is critical for optimum display quality. Some questionable parts may not be up to the official performance level, thus beware! Any other use of the <code>74HC157</code> seems more tolerant, though.</li> </ul> <p>Warning</p> <p>The use of bipolar TTL logic circuits (e.g. 74LS) is NOT recommended. Neither is the use of an NMOS 6502, since the software library does not necessarily support it!</p>"},{"location":"start/build/computer/bom/#component-equivalences","title":"Component equivalences","text":"<ul> <li>The 74HC00 may be replaced by a 74HC132 (v1 had one of these too), but the opposite is not true.</li> <li>In this circuit, any 74HC157 may be replaced by a 74HC257 without any problems; note that single-mode Durangos need no '257s at all, and may use '157 or '257 at any position.</li> <li>74HC688 has same pinout and functionality as the '521 (usually available from faster logic families) and should be interchangeable.</li> <li>Transistors and diodes are not critical, and any small signal reference may be used instead -- as long as you keep the pinout in mind.</li> </ul>"},{"location":"start/build/computer/bom2/","title":"Bom2","text":"<p>Site map) Home &gt; Getting Started &gt; Building &gt; Durango\u00b7X &gt; BOM</p>"},{"location":"start/build/computer/bom2/#bill-of-materials-v2x","title":"Bill Of Materials (v2.x)","text":"<p>Once you've got the PCB, it's time to gather all the necessary components. Make sure you decide on a particular configuration as some components differ according to the chosen option.</p> <p>Also, don't forget to check the Notes below for alternative values.</p> <p>Tip</p> <p>If you are building Durango\u00b7R (HIRES mode only), since it generates no colour signal at all, it makes no sense to select the Component Video option. If SCART is not available, use the second video output option for a suitable monochrome signal thru an RCA jack. You may delete <code>C5</code> and <code>R30</code> as these provide the SCART output only.</p> <p>If you want to build the older v1 PCB, check this BOM instead! </p> <p>Note</p> <p>Assume all ICs are in DIP package, resistors are rated 1/4 W and capacitors 10 V or higher, unless noted otherwise.</p> <p>Info</p> <p>This BOM is used for only SCART Video Output and with the High Res and low Res mode (Durango-x); if You want to see how to create a Durango with multiple Video Output or only one Video Mode see the next BOM</p>"},{"location":"start/build/computer/bom2/#resistors","title":"Resistors","text":"Class Type Qty Notes Resistor 120 5 6,13 Resistor 330 2 Resistor 470 4 Resistor 680 2 5 Resistor 100K 1 3 Variable Resistor 10K Variable 2 PIHER PT-6-V package. Resistor 12K 2 5 Resistor 18K 1 Resistor 1K 6 9 Resistor 1K2 1 Resistor 220K 2 14 Resistor 22K 3 Resistor 27 .5W 1 12 Resistor 47K 1 Resistor 33K 3 Resistor 39K 1 Resistor 3K3 7 8 Resistor Network 3K3x8 9-pin 1 15 Resistor 4K7 2 Resistor Network 4K7x4 5-pin 1 16 Resistor 56K 1 11 Variable Resistor 5K Variable 1 PIHER PT-6-V package 5KOhm Resistor 5K6 2 10 Resistor 6K8 4 Resistor 75 4 12 Resistor 8K2 1"},{"location":"start/build/computer/bom2/#capacitors","title":"Capacitors","text":"Class Type Qty (*) Notes Capacitor 10 uF 25v 2 1 Capacitor 100 nF 1 2 Capacitor 100 uF 10v 4 1 Passive Capacitor 22 nF 1 1 Capacitor 220 uF 50v 1 1 Capacitor 470 uF 10v 2 1 Passive Capacitor 68 pF 1 3"},{"location":"start/build/computer/bom2/#transistors-and-diodes","title":"Transistors and Diodes","text":"Class Type Qty (*) Notes Passive Buzzer 1 Diode 1N4148 6 4 Transistor BC548 11 4 LED Red Led 1 5 LED Green Led 1 5"},{"location":"start/build/computer/bom2/#sockets-dip","title":"Sockets DIP","text":"Class Type Qty (*) Notes DIP Socket 14 pin DIP Socket 9 DIP Socket 16 pin DIP Socket 16 DIP Socket 20 pin DIP Socket 5 DIP Socket 28 pin DIP Socket 1 DIP Socket 28 pin DIP Socket small 1 DIP Socket 40 pin DIP Socket 1"},{"location":"start/build/computer/bom2/#integrated-circuits","title":"Integrated Circuits","text":"Class Type Qty (*) Notes Static Memory 62256 1 MicroProcessor 65C02 1 Integrated Circuit 74HC00 1 Integrated Circuit 74HC02 1 Integrated Circuit 74HC139 1 Integrated Circuit 74HC157 4 Integrated Circuit 74HC166 1 Integrated Circuit 74HC174 1 19 Integrated Circuit 74HC175 1 Integrated Circuit 74HC20 1 Integrated Circuit 74HC21 1 Integrated Circuit 74HC245 3 Integrated Circuit 74HC257 4 20 Integrated Circuit 74HC30 1 Integrated Circuit 74HC32 1 Integrated Circuit 74HC367 1 19 Integrated Circuit 74HC4040 3 21 Integrated Circuit 74HC574 1 Integrated Circuit 74HC688 1 Integrated Circuit 74HC74 1 Integrated Circuit 74HC85 2 Integrated Circuit 74HC86 2"},{"location":"start/build/computer/bom2/#sockets-and-connectors","title":"Sockets and Connectors","text":"Class Type Qty (*) Notes Edge Connector Edge 36 pin 1 Cartridge Edge Connector DIP Socket IDC-6 1 Socket IDC-16 1 KeyBoard Connector Pin Header 2 Pin header Jumper (Yellow) 1 Pin Header 2 Pin header Jumper (Blue) 1 Pin Header 4 Pin header Jumper (Black) 1 nanoLink Pin Header 2 Pin header Jumper (Red) 1 Pin Header 2 Pin header Jumper (Green) 1 Pin Header pin socket 90\u00ba 2x8 1 Pin Header pin socket 17 Pin DEBUG 1 SCART Header SCART 1 SCART Video RGB Output Power Header USB-B 1 USB 5V"},{"location":"start/build/computer/bom2/#other-components","title":"Other Components","text":"Class Type Qty (*) Notes Cristal 28 MHz DIP-14 1 Only for V2.x use 24Mhz for v1 Passive Passive Buzzer 1 Swtich Small Switch 1 Can be used a 2 Pin Header Button Button 6x6x21 2"},{"location":"start/build/computer/bom2/#assembly-components","title":"Assembly Components","text":"Class Type Qty (*) Notes Assembly feet M3x10 4 Assembly separator 4mm 4 Assembly screw M3x10 4 overlay Assembly screw M3x8 4 Assembly tuerca M3 4 overlay <p>*) Standard build is a Durango\u00b7X v2.2 with SCART output and no second video output, piezo buzzer or any extra simplifications.</p>"},{"location":"start/build/computer/bom2/#notes","title":"Notes","text":"<ol> <li>Non-critical value, as long as it's kept within the same order of magnitude. Higher values are usually preferable, although component footprint might be the limiting factor.</li> <li><code>C2</code> works as a low pass filter for audio output. May be reduced down to 39 nF or so, if more treble is desired. Does NOT affect piezo buzzer anyway.</li> <li>Nominal value, may be changed in case of interrupt problems.</li> <li>Non-critical. Any small signal equivalent device (e.g. 1N914 diodes, or 2N3904 transistors) will do, but make sure about alternative pinouts.</li> <li>Colours are personal preference, of course, but the proposed resistors expect the <code>POWER</code> LED to be a high efficiency type (Gallium Nitride, e.g. blue) whereas the <code>ERROR</code> LED may use an older Gallium Arsenide-Phosphide (red) unit. Resistors <code>R29 (POWER)</code> and <code>R6 (ERROR)</code> should be adapted to the LED type and preferred brightness.</li> <li>If the second video output is not fitted, or never to be used simultaneously with the main one, <code>R15</code> can be up to 330 ohm. SCART-equipped Durangos may reduce power consumption by upping <code>R922</code> up to 220 ohm or so, although some TVs may not switch reliably into RGB mode.</li> <li>Change according to desired piezo buzzer volume. Could be down to a zero-ohm bridge, although that might overload <code>Q3</code>. Notice relatively high power dissipation!</li> <li><code>R3</code>,<code>R34</code> and, to some extent, <code>R337</code> are just strong pull-ups and may be chosen from around 1 Kohm up to 10 Kohm or so.</li> <li><code>R32</code> is for Emilio's LED and may be suited to the desired brightness (down to 680 ohm). If you intend to use this pin as a general purpose output, you may replace this resistor with a jumper.</li> <li>Theoretical value is 6.2 Kohm from the E24-series, but the E12 standard 5.6 Kohm seems acceptable.</li> <li>Theoretical value is 62 Kohm from the E24-series, but the E12 standard 56 Kohm seems acceptable.</li> <li>Correct value (as per RS-170 standard) is 75 ohm from the E24-series, although the E12 standard 68 ohm is acceptable.</li> <li><code>C10</code> was originally 1 \u00b5F, but fitting it does actually impair NMI debouncing and should not be used. In this case, <code>R35</code> can be safely replaced by a jumper as well.</li> <li>These are just weak pull-ups/pull-downs and may be chosen from around 1 Kohm up to 330 Kohm or so. Even if they're only needed for the Durango\u00b7S variant, fitting them won't harm in any case!</li> <li>Strong pull-downs in SIP-9 package. This is the nominal value but could be modified slightly without any ill effect.</li> <li>Strong pull-ups in SIP-5 package. Nominal value is 3.3 Kohm, but 4.7 has worked fine always.</li> <li>PIHER PT-6-V package.</li> <li>Originally specified as 5 K, the new value allows for a broader adjustment margin.</li> <li>Could be ommited in certain configurations, see options.</li> <li>Single-mode Durangos (\u00b7S, \u00b7R) may use <code>74HC157</code> instead.</li> <li>Although HC versions may serve well in any case, the faster AC version is recommended for <code>U15</code>, while <code>U14</code> may be safely replaced by a slower non-HC CD4040. In some cases, <code>U19</code> could be of this slower type as well, but display may become slightly glitchy.</li> </ol>"},{"location":"start/build/computer/bom2/#logic-families","title":"Logic families","text":"<p>Warning</p> <p>Some sellers on eBay, AliExpress and the like, seem to be selling non-compliant parts -- they seem to work fine on less demanding circuits, but fail whenever they're \"pushed\" within spec. In the case of the Durango computers, U15 and U125 are particularly sensitive parts, thus a reputable source is recommended or, at the very least, make sure you purchase under a reasonable return policy.</p> <p>The Durango\u00b7X computer is designed around high-speed CMOS (HC) technology. SRAM chips are nearly always of such type, as is the 65C02 CPU_; the rest of the circuit is made from standard 74HC parts. Some considerations have to be done:</p> <ul> <li>Generally speaking, 74HC and 74HCT are both suitable and normally interchangeable. However, the use of an HCT for <code>U32</code> (or <code>U8</code> on v1 boards) may affect interrupt performance, check here for details.</li> <li>In case of <code>U14</code>, a non-HC CD4040 may be used without any ill effect. In some cases, <code>U19</code> can be replaced by a non-HC unit as well, although some glitches on the screen might be seen.</li> <li>Performance of <code>U15</code> is critical. v1 boards work fine with a 74HC unit but, in case of v2, a 74AC4040 is highly recommended -- some displays may become unstable with the HC part.</li> <li>Again, <code>U125</code>'s performance is critical for optimum display quality. Some questionable parts may not be up to the official performance level, thus beware! Any other use of the <code>74HC157</code> seems more tolerant, though.</li> </ul> <p>Warning</p> <p>The use of bipolar TTL logic circuits (e.g. 74LS) is NOT recommended. Neither is the use of an NMOS 6502, since the software library does not necessarily support it!</p>"},{"location":"start/build/computer/bom2/#component-equivalences","title":"Component equivalences","text":"<ul> <li>The 74HC00 may be replaced by a 74HC132 (v1 had one of these too), but the opposite is not true.</li> <li>In this circuit, any 74HC157 may be replaced by a 74HC257 without any problems; note that single-mode Durangos need no '257s at all, and may use '157 or '257 at any position.</li> <li>74HC688 has same pinout and functionality as the '521 (usually available from faster logic families) and should be interchangeable.</li> <li>Transistors and diodes are not critical, and any small signal reference may be used instead -- as long as you keep the pinout in mind.</li> </ul>"},{"location":"start/build/computer/options/","title":"Options","text":"<p>Site map) Home &gt; Getting Started &gt; Building &gt; Durango\u00b7X &gt; Options</p>"},{"location":"start/build/computer/options/#durango-computer-buliding-options","title":"Durango computer buliding options","text":"<p>Designed in a modular way, several configurations are available for the Durango range of home computers. Thus, you may simplify the building process or simply make the computer that suits your actual needs.</p>"},{"location":"start/build/computer/options/#video-modes","title":"Video modes","text":"<p>The main difference between the Durango home computer and many other retro-inspired SBCs is the built-in display output thru a suitable TV or monitor. Display characteristics make a great difference in circuitry, thus it's worth having the option of limiting the available video modes:</p>"},{"location":"start/build/computer/options/#durangor","title":"Durango\u00b7R","text":"<p>This is the simplest build, where the display output is monochromatic 256 x 256 pixels (a.k.a. HIRES mode). For writing code and any text-based applications (including some games) this is the preferred mode, but for graphical games is usually less attractive, due to the lack of colour.</p> <p>If this option is chosen, you don't need any component with <code>1xx</code> designators (e.g. <code>U127</code>). Note that any single video mode Durango build must replace components with <code>3xx</code>designators by suitable jumper wires; check here for details</p>"},{"location":"start/build/computer/options/#durangos","title":"Durango\u00b7S","text":"<p>Somewhat simpler than the fully-featured version, the display output is 4-bit-per-pixel (16-colour) 128 x 128 pixels, allowing a nice, colourful presentation much suited for games. The limited text area (16 x 16 characters) makes it less convenient for code or lots of text on screen, though.</p> <p>If this option is chosen, you don't need any component with <code>2xx</code> designators (e.g. <code>U227</code>). Also, this is the only configuration that needs components with <code>8xx</code> designators -- in fact, just a couple of pull-up resistors. Note that any single video mode Durango build must replace components with <code>3xx</code>designators by suitable jumper wires; check here for details</p> <p>Note</p> <p>Even if <code>R824</code> and <code>R825</code> are needed for this configuration only, they're harmless in any case and could be fitted for all options with no ill effect.</p>"},{"location":"start/build/computer/options/#durangox","title":"Durango\u00b7X","text":"<p>Tip</p> <p>This is the full-featured, recommended option.</p> <p>This option combines the functionality of both Durango\u00b7R and Durango\u00b7S options. <code>3xx</code>-designated components are also needed to allow software-switching between modes.</p>"},{"location":"start/build/computer/options/#monitor-output","title":"Monitor output","text":"<p>Several options are available, depending on you preferred display device. There are big changes from v1 to v2, for improved compatibility with modern TV sets.</p> <p>Warning</p> <p>Due to the slightly non-standard video output, some TVs and monitors may not be compatible with Durango's signal.</p>"},{"location":"start/build/computer/options/#scart","title":"SCART","text":"<p>Tip</p> <p>This is the originally intended port, and it's the recommended option as it provides the best image quality.</p> <p>SCART connections have been pretty much standard for European TV sets since the early 80's, and they provide both a composite video input (and output, if suitable) and RGB signals for optimum picture quality. A fast blanking signals allow automatic switching between both modes. This is particularly well fitted to the Durango\u00b7X video circuitry, as colour mode signals go directly (thru a crude DAC) to the RGB inputs, while the monochrome (HIRES) video goes into composite video, after being mixed with the sync signals.</p> <p>Since some SCART-equipped devices (e.g. VCRs and combos) do NOT support RGB inputs, another crude Luminance DAC is added to the aforementioned mixer which adds a greyscale version of the colour picture, so the device does at least display the image. There's the option in colour mode to switch off the fast blanking signal, thus making the TV ignore the RGB signals and displaying a grayscale mode image instead.</p> <p>Note that, in colour (RGB) mode, sync signals are expected to be present at the SCART composite input in any case.</p> <p>Note</p> <p>The greyscale mode is deprecated, although all SCART-equipped Durangos up to 2.x do support it. Check the Composite output DAC section below for details.</p>"},{"location":"start/build/computer/options/#sync-on-green-v1-only","title":"Sync-on-green (v1 only)","text":"<p>Originally intended for the Sony PVM range of monitors, quite popular within the retro-computing community, as they sport RGB inputs but NOT a SCART connection. Tapping off the separate sync from Durango would be cumbersome, thus this option allows easy connection to these monitors. As a side effect, monochrome (HIRES) mode will display as green-on-black, for a further retro experience!</p> <p>Bug</p> <p>Despite what the schematics stated, <code>R111</code> and <code>R113</code> must be fitted (maybe with values down to 330 ohm) and pin 11 of <code>J105</code> must be grounded (easily done from the nearby pins 9 or 13) for best colour accuracy.</p> <p>Note</p> <p>This option has been replaced since v2.0 for Component video, which is more popular within modern TVs and the PVM monitors support as well. In any case, greyscale mode is not supported on either type of connection.</p>"},{"location":"start/build/computer/options/#component-video-v2x-only","title":"Component Video (v2.x only)","text":"<p>Tip</p> <p>If you are building Durango\u00b7R (HIRES mode only), since it generates no colour signal at all, it makes no sense to select the Component Video option. If SCART is not available, use the second video output option for a suitable monochrome signal thru an RCA jack. You may delete <code>C5</code> and <code>R30</code> as these provide the SCART output only.</p> <p>Since SCART is pretty much phased out in Europe (and was never a thing in other continents, anyway), this option has been included. The aforementioned PVM monitor do support Component Video as well, thus will remain compatible.</p> <p>Tip</p> <p>You might want to add <code>J706</code> for the audio output, even if you don't fit <code>R731</code> and <code>C709</code>  (which enable the second video output from the third RCA jack on it)</p> <p>Note</p> <p>RGB is still the native video output of a Durango computer, thus colours may differ a bit thru Component video, but this is to be expected.</p> <p>Warning</p> <p>It is known that many modern TVs are not compatible with the 240p/288p signal supplied by Durango-X thru the Component Video input. In such cases, if a suitable YPbPr-to-HDMI converter is not available (we're researching on that), you may always use the composite video input, although in greyscale mode. Note that this will perform fine in HIRES mode.</p> <p>Tip</p> <p>If you can hook a PlayStation 2 thru Component video input and properly play a PS1 game on it, your TV is most likely compatible with Durango-X.</p>"},{"location":"start/build/computer/options/#composite-output-dac","title":"Composite output DAC","text":"<p>In the original, standard form (SCART-equipped v1), display info in colour mode is sent via the RGB lines, while the sync pulses are sent thru the composite video output present on the SCART (pin 19) and the second video output as well (if fitted). Since not every SCART-equipped device does support the RGB mode (as enabled by the fast blanking line at pin 16), a crude DAC (Digital-to-Analog Converter) is made up from <code>R107</code> thru <code>R110</code>, providing a backup signal which will display an acceptable greyscale version of the image, and not a blank screen.</p> <p>As an afterthought, a greyscale mode was added to v1 (bit 3 of the video mode register at <code>$DF80</code>, write-only) by temporarily negating the fast blanking signal, thus allowing the composite output to be displayed on the TV, ignoring the signals on the RGB lines. For that matter, the values of <code>R107</code> thru <code>R110</code> were chosen to get an acceptably linear greyscale.</p> <p>However, the SCART connector is hard to find on modern TVs, so an alternative connection was needed. Component Video is widely supported nowadays, and it's relatively simple to obtain from the native RGB signals, thus this became a built-in option in v2, and an external Component Video converter was designed for improved compatibility on v1 units. But these converters just generate the needed <code>Pb</code> and <code>Pr</code> signals from the original RGB outputs, while the needed <code>Y</code> (luminance) signal is taken directly from the composite output, again from the crude DAC and intended for greyscale. On the other hand, proper luminance values are expected on this signal when in Component Video mode for accurate colour display, thus a new set of valued for <code>R107</code> thru <code>R110</code> must be used. Check at the end of palette considerations for suitable replacement values.</p> <p>Note</p> <p>Since the greyscale mode is seldom used and will still work with the Luminance DAC values (even if somewhat less linear), these new values are always recommended in any case.</p> <p>v2+ silkscreen uses Luminance values as standard. Greyscale mode is still operative (when using the SCART option) but deprecated.</p>"},{"location":"start/build/computer/options/#pal-encoder","title":"PAL encoder","text":"<p>Since RGB signals are natively generated in Durango\u00b7S/\u00b7X and they give the highest picture quality, initially no provision to add chrominance (colour) information on the composite video output (both at the SCART and the optional second video output). But again, it might be desired for compatibility reasons.</p> <p>v1 boards provide space for a PAL chrominance encoder (components with <code>6xx</code> designators) based around the <code>AD724</code> IC (unfortunately, only available as a less hobbyist-friendly Surface-Mounted Device). But being an afterthough and, specially, due to the non-standard sync frequencies from the Durango v1 video output, performance might be poor or not display any colour at all, depending on the particular TV set used. Thus, this option is NOT recommended.</p>"},{"location":"start/build/computer/options/#second-video-output","title":"Second video output","text":"<p>Essentially the same signal as the one available at the composite signal on the SCART (pin 19), but for impedance matching reasons it's obtained thru a separate RC network (<code>R31</code> and <code>C9</code> on v1, <code>R731</code> and <code>C709</code> on v2+). If these components are fitted, this signal is available at the yellow (leftmost) RCA jack on <code>J6</code>. The remaining RCA jacks (red &amp; white) provide monoaural audio output for convenience, just in parallel with the SCART audio signal.</p> <p>Tip</p> <p>If both composite signals are to be used simultaneously, it's recommended to use a lower value for <code>R15</code> (down to 120 ohm). v2 boards silkscreen already state this updated value and, in any case, using it won't do any harm, just a somewhat increased power consumption.</p>"},{"location":"start/build/computer/options/#piezo-buzzer-for-audio","title":"Piezo buzzer for audio","text":"<p>The Durango-generated audio (usually a square wave from <code>U12</code>, but also any arbitrary signal thru the <code>AUDIO IN</code> line supplied by suitable cartidges) goes into a simple mixer around <code>Q3</code>, then it takes two routes:</p> <ul> <li>Line-level audio at SCART <code>J105</code> (and <code>J6</code> if fitted), thru a low-pass filter and attenuator made around <code>R4</code>, <code>R5</code> and <code>C2</code>.</li> <li>Internal buzzer <code>BZ1</code> thru an attenuation resistor <code>R23</code> and a disabling jumper <code>JP2</code>.</li> </ul> <p>If the buzzer is not needed, these three components don't need to be fitted. Also, <code>R23</code> can be modified for volume control.</p> <p>Warning</p> <p><code>R23</code> may dissipate quite a lot of heat, thus a half-watt rated resistor is highly recommended. For maximum loudness it may be replaced by a jumper wire, but that might overload <code>Q3</code>.</p> <p>In any case, the use of the buzzer does increase power consumption considerably.</p>"},{"location":"start/build/computer/smod/","title":"Smod","text":"<p>Site map) Home &gt; Getting Started &gt; Building &gt; Durango\u00b7X &gt; Single-mode</p>"},{"location":"start/build/computer/smod/#single-mode-durango-computer","title":"Single-mode Durango computer","text":"<p>Since making a relatively versatile video output from off-the-shelf components adds quite a bit of complexity, some people may desire building a limited Durango configuration.</p>"},{"location":"start/build/computer/smod/#single-video-resolution","title":"Single video resolution","text":"<p>The original, full-spec Durango\u00b7X sports two video modes:</p> <ul> <li>Colour mode: 128 x 128 pixels, 16-colour (4 bpp)</li> <li>HIRES mode: 256 x 256 pixels, monochrome (1 bpp)</li> </ul> <p>Components with designators <code>1xx</code> are used for colour mode only, whereas designators <code>2xx</code> are for HIRES mode. Thus, a simple approach would be not fitting either of these component groups according to the desired (fixed) video mode.</p> <p>However, since the RAM addresses are multiplexed depending on the selected video mode (thru enabling either <code>U104/U105</code> or <code>U204/205</code>, accordingly), if the unsupported video mode is selected via software, the CPU will lose access to RAM, immediately crashing the computer. Thus, some extra connections must be fitted in order to ignore the selected resolution, allowing normal operation of the computer (within the hardwired video mode, of course).</p> <p>This hack mainly affects components with designators like <code>3xx</code>-- check below for differences between v1 and v2.</p> <p>Tip</p> <p>When a single-resolution configuration is fitted, either <code>U104/U105</code> or <code>U204/205</code> may be replaced by 74HC157 instead of the specified '257. Any of these types will do fine.</p>"},{"location":"start/build/computer/smod/#mods-for-hires-only-durangor","title":"Mods for HIRES-only Durango\u00b7R","text":"<ul> <li>Do NOT fit <code>U104/U105/U321</code> neither any other <code>1xx</code> designated component (you may keep <code>J105</code> for convenience, though)</li> <li>(v1 only) Do NOT fit <code>Q306</code></li> <li>(v2 only) Do NOT fit <code>Q906/Q307/R336/R337/R922</code></li> <li>Make sure <code>R824/R825</code> ARE fitted (value is not critical)</li> <li>Cut trace to pin 10 on <code>U428</code> (back side) or remove its pin from the socket</li> <li>Bridge pins 1 and 16 on <code>U321</code> empty footprint</li> <li>Bridge pins 4 and 3 on <code>U321</code> empty footprint</li> <li>Bridge pins 7 and 6 on <code>U321</code> empty footprint</li> <li>Bridge pins 9 and 10 on <code>U321</code> empty footprint</li> <li>Bridge pins 12 and 13 on <code>U321</code> empty footprint</li> <li>(v2 only) Bridge emitter and collector (pins 1 &amp; 3) on <code>Q307</code> empty footprint -- you may bridge ALL of its pins as well, since <code>R336</code> is not fitted anyway.</li> </ul> <p>Tip</p> <p>If you are building Durango\u00b7R (HIRES mode only), since it generates no colour signal at all, it makes no sense to select the Component Video option. If SCART is not available, use the second video output option for a suitable monochrome signal thru an RCA jack. You may delete <code>C5</code> and <code>R30</code> as these provide the SCART output only.</p> <p>Since SCART is pretty much phased out in Europe (and was never a thing in other continents, anyway), a newly designed option has been included. The aforementioned PVM monitor do support Component Video as well, thus will remain compatible.</p>"},{"location":"start/build/computer/smod/#mods-for-colour-only-durangos","title":"Mods for colour-only Durango\u00b7S","text":"<ul> <li>Do NOT fit <code>U204/U205/U321</code> neither any other <code>2xx</code> designated component</li> <li>(v2 only) Do NOT fit <code>Q307/R336/R337</code></li> <li>Cut trace to pin 10 on <code>U428</code> (back side)</li> <li>Bridge pins 1 and 15 on <code>U321</code> empty footprint</li> <li>Bridge pins 4 and 2 on <code>U321</code> empty footprint</li> <li>Bridge pins 7 and 5 on <code>U321</code> empty footprint</li> <li>Bridge pins 9 and 11 on <code>U321</code> empty footprint</li> <li>Bridge pins 12 and 14 on <code>U321</code> empty footprint</li> </ul> <p>Plus, if you do not intend to use the (deprecated) greyscale mode:</p> <ul> <li>Do NOT fit <code>Q306</code> (v1) or <code>Q906</code> (v2)</li> <li>Bridge emitter and collector (pins 1 &amp; 3) on <code>Q306</code> (v1) or <code>Q906</code> (v2) empty footprint</li> </ul>"},{"location":"start/build/computer/smod/#removing-software-switchable-modes","title":"Removing software-switchable modes","text":"<p>Tip</p> <p>Since the only component redundant on this mod is <code>U428</code>, it's rarely worth it, thus NOT recommended.</p> <p>This mod removes the video mode register (<code>U428</code>) which controls:</p> <ul> <li>Video resolution (HIRES/colour)</li> <li>Inverse video mode</li> <li>Selected screen area (0 to 3, the last one being the standard)</li> <li>RGB/Greyscale mode (deprecated)</li> <li>Emilio's LED (also useable as a general purpose output)</li> </ul> <p>The empty footprint must be wired appropriately:</p> <ul> <li>Bridge pin 10 to +5 V (pin 16) for HIRES or GND (pin 8) for colour. This is not needed on single-mode Durangos.</li> <li>Bridge pin 7 to +5 V (pin 16) for Inverse video or GND (pin 8) for normal video.</li> <li>Bridge pins 5 and 12 to +5 V (pin 16) for the standard screen (3, at <code>$6000-$7FFF</code>).</li> <li>Bridge pin 15 the opposite way as pin 10 (+5 V for colour, GND for HIRES). This is not needed on single-mode Durangos, neither for greyscale/sync-on-green/component video versions.</li> </ul> <p>Since Emilio's LED is no longer available, the associated components (<code>R32</code> and <code>J4</code>) aren't needed.</p> <p>In the rare case you'd want to use a different screen memory from the standard 3, wire up **pins and ** as follows:</p> Pin 12 Pin 5 Screen Addresses <code>GND</code> <code>GND</code> 0 <code>$0000-$1F00</code>* <code>GND</code> <code>+5V</code> 1 <code>$2000-$3FFF</code> <code>+5V</code> <code>GND</code> 2 <code>$4000-$5FFF</code> <code>+5V</code> <code>+5V</code> 3 <code>$6000-$7FFF</code> <p>*) Note that the beginning of RAM is used by zero page, stack and system variables -- make sure your software does NOT access that area for display purposes! The <code>$1000-$1FFF</code> range seems quite safe in this case.</p>"},{"location":"start/build/computer/smod/#removing-extra-video-features","title":"Removing extra video features","text":"<p>This mod removes the ability to read back the status of the video mode register (upper nybble only) and, most noticeably, the status of the video blanking signals (both horizontal and vertical). Deleted components are <code>U530</code> and, in case of v1 only, <code>U529</code>; if so, the empty <code>U529</code> footprint must be wired appropriately:</p> <ul> <li>Bridge pin 12 to 15.</li> </ul> <p>Note</p> <p>If you have no software-switchable modes (i. e., <code>U428</code> is NOT fitted), don't bother rewiring the empty <code>U529</code> footprint (in case of v1 anyway)</p> <p>Warning</p> <p>In v1 boards with this mod (but software-switchable modes still installed), any attempt of reading the video mode register will corrupt its value!</p>"},{"location":"start/build/computer/steps/","title":"Steps","text":"<p>Site map) Home &gt; Getting Started &gt; Building &gt; Durango\u00b7X &gt; Step-by-step</p>"},{"location":"start/build/computer/steps/#building-the-durango-computer-step-by-step","title":"Building the Durango computer, step-by-step","text":""},{"location":"start/build/computer/steps/#general-guidelines","title":"General guidelines","text":"<p>Please check the general guidelines for building these PCBs, but do not attempt soldering until you have read this document IN FULL.</p>"},{"location":"start/build/computer/steps/#critical-points","title":"Critical points","text":"<p>Besides the aforementioned guidelines, you must pay attention to some items on the Durango\u00b7X PCB:</p> <ul> <li>IOx and Expansion (sidecar) connectors must be placed ABSOLUTELY FLUSH to the board, otherwise fitting peripherals may become difficult or right impossible!</li> <li>If you plan to use the suggested keyboard/gamepads interface board, do NOT solder <code>D6</code> and <code>D4</code> yet (<code>POWER</code> and <code>ERROR</code> LEDs) as they must be set at the proper height in order to be visible over the keyboard PCB.</li> </ul> <p>Make sure to read the hack and fixes section according to your PCB's revision.</p>"},{"location":"start/build/computer/steps/#video-output-options","title":"Video output options","text":"<p>Tip</p> <p>Except for the overlapping output connectors, all components can be soldered no matter the chosen video option (although some values may differ)</p> <ul> <li>The SCART connector (<code>J905</code> in v2+, <code>J105</code> in v1) and the 3x RCA for Sync-on-green (v1, <code>J005</code>) or Component video (v2+, <code>J605</code>) do overlap, thus only one can be physically mounted.</li> <li>The 3x RCA for the second video output (<code>J706</code> in v2+, <code>J6</code> in v1) may be desired for the Component video option, as audio is always available there. That second video output won't be enabled unless the associate components for the second output (<code>C709</code>, <code>R731</code> on v2+; <code>C9</code>, <code>R31</code> on v1) are fitted.</li> </ul>"},{"location":"start/build/computer/steps/#hacks-and-fixes","title":"Hacks and fixes","text":""},{"location":"start/build/computer/steps/#fix-colours-when-using-the-component-video-adapter-board-v1","title":"FIX colours when using the Component video adapter board (v1)","text":"<p>Make sure the proper Luminance DAC values are used in the Durango\u00b7X PCB. In short:</p> Designator Silkscreen values Luminance values <code>R107</code> 5K6 8K2 <code>R109</code> 22K 18K <code>R110</code> 39K 33K <p>Tip</p> <p>v2+, even if using the SCART option, bear the new Luminance values in the silkscreen.</p>"},{"location":"start/build/computer/steps/#fix-unstable-or-missing-image-on-the-component-video-option-v2-v21","title":"FIX unstable or missing image on the Component video option (v2-v2.1)","text":"<ol> <li>Make sure resistors <code>R911</code> thru <code>R914</code> are fitted (even if they were intended for SCART only)</li> <li>Ground the SCART red, green and blue outputs, by putting jumper wires between pins 7-9, 11-13 and 15-17 of (non-installed) <code>J905</code> -- or connect those 6 pins together, as preferred.</li> </ol> Make these jumpers (or connect all those pins altogether) <p>Tip</p> <p>v2.2+ renames those resistors as <code>R111</code> thru <code>R114</code>, making them compulsory whenever the colour mode is used, no matter the interface. Solder bridges are provided on the PCB's front side for convenience. </p>"},{"location":"start/build/computer/steps/#fix-colours-on-the-component-video-option-v2-v21","title":"FIX colours on the Component video option (v2-v2.1)","text":"<p>Original silkscreen shows wrong values, resulting on weird colours. Use these values instead:</p> Designator Silkscreen values Corrected values <code>R643</code> 4K7 6K2* <code>R644</code> 12K 22K <code>R645</code> 22K 47K <code>R646</code> 56K 82K <code>R653</code> 4K7 6K2* <code>R654</code> 15K 33K <code>R655</code> 27K 62K** <code>R656</code> 33K 39K <p>*) Theoretically, this is the most accurate value from E24 series, but 5K6 from the standard E12 series seems to work just fine.</p> <p>**) Theoretically, this is the most accurate value from E24 series, but 56K from the standard E12 series seems to work just fine.</p> <p></p> Do not fit these resistors as indicated on the silkscreen! <p>Tip</p> <p>This is fixed in v2.2+ (using 5K6 and 56K values)</p>"},{"location":"start/build/computer/steps/#image-is-shifted-to-the-left-in-v2-v21","title":"Image is shifted to the left in v2-v2.1","text":"<p>In the original design (v1), image was not perfectly centered on screen by design, but slightly towards the right. For v2.0 and v2.1 there is a design error which notably shifts the display to the left. It is fully fuctional and the whole screen area is visible, but not as aesthetically pleasing, especially now with perfectly square pixels...</p> <p>The fix for this is a relatively simple mod, all done within the back of the board:</p> <ol> <li>Cut the connections to pins 9 and 11 of <code>U18</code> (coming from the left hand side, towards the video connectors)</li> <li>Use a bodge wire to connect <code>U18</code> pin 9 to <code>U22</code> pin 15</li> <li>Use a bodge wire to connect <code>U18</code> pin 11 to <code>U22</code> pin 14 (or, alternatively, to the nearby via next to pin 9 of <code>U18</code>, if possible)</li> </ol> <p></p> Cut these traces <p></p> Place these bodge wires <p>Tip</p> <p>This is completely fixed in v2.2+</p>"},{"location":"start/build/computer/steps/#somewhat-unstable-horizontal-sync-especially-in-turbo-mode-v2","title":"Somewhat unstable horizontal sync, especially in TURBO mode (v2+)","text":"<p>Use a 74AC4040 for <code>U15</code> instead of the HC version. Unfortunately, these are somewhat hard to come by, especially in DIP package as required by this board.</p> <p>Tip</p> <p>v2.2 already states <code>74AC4040</code> on the silkscreen.</p>"},{"location":"start/build/computer/troubleshoot/","title":"Troubleshoot","text":"<p>Site map) Home &gt; Getting Started &gt; Building &gt; Durango\u00b7X &gt; Troubleshooting</p>"},{"location":"start/build/computer/troubleshoot/#troubleshooting-guide","title":"Troubleshooting guide","text":"<p>Since the Durango-X computer is based on off-the-shelf components, it's a rather complex circuit. On the other hand, every needed function can be clearly located into specific components, A gazillion things can go wrong, of course, but with some method and a few observations, any possible fault may be easily figured out. A multimeter is essential for basic probing; an oscilloscope (nothing especially fancy) will be helpful, but not absolutely necessary. A logic probe can be quite useful, too.</p> <p>Before any further investigation, a visual inspection may be helpful. Look for:</p> <ul> <li>Short-circuits on the board -- including from pads to nearby vias.</li> <li>Bad solder joints.</li> <li>Bent IC pins -- try reseating any suspect IC.</li> </ul> <p>Tip</p> <p>For better understanding of this document, you may want to have a look at the Theory of Operation, although it's not really needed for troubleshooting.</p> <p>v2 changes</p> <p>These instructions are intended for the v1 issue of Durango\u00b7X. For the v2, replace all references to <code>U8</code> (74HC132), using <code>U32</code> instead (74HC245) and follow any particular notes added.</p>"},{"location":"start/build/computer/troubleshoot/#no-signs-of-life-no-leds-nor-picture","title":"No signs of life (no LEDs nor picture)","text":"<p>Check power supply and power switch, if fitted. Measuring the voltage across the power pins of any IC (usually 14/7, 16/8, 20/10 or 28/14 for +/-) should ideally read out between 4.75 and 5.25 volts, although it should be fine with voltages as low as 4.5 V (prototypes have been running OK at a mere 4.25 V, even less!).</p> <p>If measured voltage is way too low, and the power supply is trusted, check resistance between the power pins (being careful with your meter's polarity!). Because of capacitors charging up, you won't get an instant reading; but it should asymptotically lead to around 9-10 kOhm. Any unusually low value might be caused, in rare cases, by C7 or C6.</p>"},{"location":"start/build/computer/troubleshoot/#power-led-lights-up-but-no-sound-or-picture","title":"Power LED lights up, but no sound or picture","text":"<ul> <li>If an oscilloscope or a very good multimeter is available, check for a ~24.5 MHz signal at U15 pin 10 (74HC4040). If no good signal there: suspect X1.</li> <li>If there is, check for a somewhat asymmetric ~15.7 kHz signal at U15 pin 15. If not: suspect U15. If frequency is exactly 12 kHz: suspect U17 (74HC21) as well.</li> <li>Check for a quite asymmetric ~50 Hz signal at U19 pin 12. If not: suspect U19 but if more like 30.6 Hz: suspect U17 too.</li> <li>Check for ~15.7 kHz at U18 pin 6 and for ~50 Hz at U20 pin 6. Suspect these chips in case of failure. Those signals should show up (inverted) at U22 pins 11 and 14, respectively.</li> <li>If an oscilloscope is available, look for a valid <code>CSYNC</code> signal at U23 pin 6 -- or just some activity, near (but not quite at) 5 volts.</li> </ul> <p>v2 changes</p> <p>The updated values are: - <code>U15</code> pin 10: 28 MHz instead of 24.5. - <code>U15</code> pin 15 (when wrong): ~13.67 kHz instead of 12.</p> <p>If all of the above signals look OK, it might be a problem in the analogue section of the video outpuct circuit. Use a multimeter to check the following voltages (all referenced to GND). They do not need to match exactly the specified values and will certainly be dependent of the actual Power Supply voltage, but any deviation over ~10% is suspicious).</p> <ul> <li>First of all, verify R19 (one pin will carry a valid 5 Vpp <code>CSYNC</code> signal while the other should stay around 1 volt.</li> <li>5 Volts between C4's pins; check this and the power supply otherwise.</li> <li>1.6 Volts at the base (centre pin) of Q4; if not, suspect R17, R18 or Q4.</li> <li>1 Volt at the emitter (right pin with the flat side towards you) of Q4; if not, and the above is correct, suspect Q4 or R21.</li> <li>3 - 3.7 Volts at the base (centre pin) of Q5 (actual value depends on overall picture brightness); if not, suspect R16 or Q5.This very same voltage should show up at the collector of Q4, leftmost pin, as they're interconnected.</li> <li>2.3 - 3 Volts at the emitter (right pin with the flat side towards you) of Q5 (actually ~0.7 V below the above one); if not, suspect Q5, R30 or C5 (and, if the second composite output is mounted, R31 and C9 as well).</li> </ul>"},{"location":"start/build/computer/troubleshoot/#monitor-detects-valid-signal-but-screen-is-black","title":"Monitor detects valid signal, but screen is black","text":"<p>Note</p> <p>Lack of image (but good sync signals) is likely to be a fault on some of the following items but, if nothing seems to fix the problem, check U2 SRAM and U6 as well.</p> <p>Check logic level at U321 pin 11 for currently set video mode: \"1\" (~5 V) for HIRES, \"0\" for colour. If this pin lacks a stable value, suspect U428 or U321. Once the current video mode is determined, check the following:</p>"},{"location":"start/build/computer/troubleshoot/#hires-mode","title":"HIRES mode","text":"<p>After checking R220 in the very first place, look for activity at the following pins, preferably in this order:</p> <ul> <li>~6.1 MHz signal at U16 pin 9 (suspect U15) and U224 pin 7 (suspect U16)</li> <li>767 kHz square wave at U16 pin 5 (suspect U15) and U321 pin 13 (suspect U16)</li> <li>Same 767 kHz at U22 pin 9 (suspect U321)</li> <li>U321 pin 3, like <code>CSYNC</code> but quite more symmetric, near 2.6 Volts (suspect U16, maybe U15 and/or U19)</li> <li>U22 pin 4, like the above (suspect U321, maybe U428)</li> <li>U227 pin 10, again like the previous signal (suspect U22)</li> <li>767 kHz asymmetric signal at U224 pin 15, maybe measuring near 4.7 Volts (suspect U227 or U15)</li> <li>U23 pin 9 (suspect U224 or R824 if fitted)</li> <li>U227 pin 9 (suspect U23 or RV231)</li> <li>U23 pin 12 (suspect U227 or R825 if fitted) and pin 11 (U23 itself or R220 is to blame)</li> </ul>"},{"location":"start/build/computer/troubleshoot/#colour-mode","title":"Colour mode","text":"<p>After checking R107-114 in the very first place, look for activity at the following pins:</p> <ul> <li>~1.5 MHz square wave at U124 pin 11 and U321 pin 14 (suspect U16 or even U15)</li> <li>Same signal at U22 pin 9 (suspect U321)</li> <li>U321 pin 5, like <code>CSYNC</code> but quite more symmetric, near 2.6 Volts (suspect U16, maybe U15 and/or U19)</li> <li>U22 pin 5, like the above (suspect U321)</li> <li>U127 pin 19, again like the previous signal (suspect U22 or RV128)</li> <li>U124 pins 12-19 should show activity in some of them, unless a completely blank screen is on display -- powering up without cartridge should create a random image in case of doubt, adequate for this test.</li> <li>Similar but somewhat faster activity at U126 pins 1, 4, 9 &amp; 12 (suspect U125)</li> <li>Pretty much the same at U127 pins 2-9 (suspect U126)</li> <li>A similar kind of signal, but interrupted every ~64 \u00b5s, should show up at U127 pins 11-18.</li> </ul>"},{"location":"start/build/computer/troubleshoot/#garbage-is-displayed-but-no-further-activity","title":"Garbage is displayed, but no further activity","text":"<ul> <li>Check <code>/RESET</code> signal (U1 CPU pin 40), upon powerup should go low for a split second and then become (and stay) high.<ul> <li>If it doesn't, but the computer operates normally after pressing the <code>RESET</code> button: suspect C1, perhaps R3.</li> <li>If it stays low all the time: suspect U8 (74HC132) and/or C1.</li> <li>If <code>RESET</code> button makes no effect: suspect U8 (74HC132).<ul> <li>In any case, if while holding <code>RESET</code> the <code>ERROR</code> LED does NOT stay lit: suspect U8 (74HC132) or U12(74HC74).</li> </ul> </li> </ul> </li> <li>If an oscilloscope or a good multimeter is available, check for a ~1.5 MHz signal at <code>VCLK</code> (U1 CPU pin 37). If no good signal there: suspect  U16 (74HC02), perhaps U15 (74HC4040).</li> <li>Try another cartridge and/or U2 SRAM (displayed pattern is likely to change between different SRAM pieces). Running without a valid cartridge may display similar symptoms.</li> <li>U1 65C02 CPU might be dead, too. Look for an irregular signal at U1 CPU pin 7, around 450 kHz (will vary widely) and, if possible, activity at address pins (9-20 and 22-25), especially the lowest ones.</li> <li>If of the above looks OK: suspect U9 (74HC00). Check U6 (74HC157) as well.</li> </ul>"},{"location":"start/build/computer/troubleshoot/#erratic-behaviour-leds-flashing-garbage-on-screen-chirpy-sounds","title":"Erratic behaviour (LEDs flashing, garbage on screen, chirpy sounds...)","text":"<p>Suspect U10 (74HC139)</p>"},{"location":"start/build/computer/troubleshoot/#software-appears-to-start-up-but-no-keyboard-of-gamepad-effect-at-all-irq-test-fails","title":"Software appears to start up, but no keyboard of gamepad effect at all. IRQ test fails.","text":"<p>Check <code>ERROR</code> LED. If lit: suspect U12 (74HC74). Otherwise suspect U8 (74HC132) or U14 (74HC4040)</p>"},{"location":"start/build/computer/troubleshoot/#poorno-keyboardgamepad-response-andor-erratic-timing-on-some-software","title":"Poor/no keyboard/gamepad response and/or erratic timing on some software","text":"<p>This is likely to be an interrupt problem.</p>"},{"location":"start/build/computer/troubleshoot/#computer-runs-ok-but-colour-programs-go-instead-into-greyscale-mode","title":"Computer runs OK, but colour programs go instead into greyscale mode","text":"<p>If Durango-X cannot go into RGB colour mode, or doesn't stay reliably in it, first of all make certain that U321 pin 9 is at logic \"1\" (~5 V). If so, check Q306 (its emitter should measure at around 4.3 V) and R122. Some TVs may be quite picky about this resistor's value, thus you may want to try a lower value (say, 100 ohms).</p> <p>Warning</p> <p>In RGB mode, R122 accounts for almost one third of Durango's power consumption. Lowering the resistor's value will draw further power, thus make sure you're using a properly dimensioned Power Supply.</p>"},{"location":"start/build/computer/troubleshoot/#marginal-picture-quality-with-choppy-pixels-ghost-lines","title":"Marginal picture quality, with choppy pixels, ghost lines...","text":"<p>As the timing of the video circuitry is very tight, some adjustments have been provided. See Video Output Calibration for details.</p>"},{"location":"start/build/computer/troubleshoot/#apparently-running-but-only-chunks-of-valid-image-visible-maybe-repeated-on","title":"Apparently running but only chunks of valid image visible, maybe repeated on","text":"<p>the screen; perhaps affecting just one video mode</p> <ul> <li>Check U7 and/or U6. Depending on affected video mode, check also:<ul> <li>U104/105 for colour mode.</li> <li>U204/205 for HIRES.</li> </ul> </li> </ul> <p>Tip</p> <p>Swapping ICs between each pair might help detecting the malfunctioning chip. While U6/U7 are specified as 74HC157, you may use 74HC257 as well.</p>"},{"location":"start/build/computer/troubleshoot/#picture-ok-but-distorted-sound-or-no-sound-at-all","title":"Picture OK, but distorted sound or no sound at all","text":"<ul> <li>Check U12 and, most importantly, Q3. Check D2, R4, R5, C2 and C3 as well.</li> <li>Rarely, D7 might cause problems; you may remove it with no more effect than losing the audio feedback during Raspberry Pi transfers.</li> <li>If the internal buzzer is being used: check R23 (and the buzzer itself). Weak power supplies may be troublesome while using the internal buzzer.</li> </ul> <p>Note</p> <p>Some cartridges may include custom sound hardware. If so, check D3 or try another sound-enabled cartridge.</p>"},{"location":"start/build/computer/vdu_calib/","title":"Vdu calib","text":"<p>Home &gt; Getting Started &gt; Building</p> <p>Durango\u00b7X &gt; Calibrating</p>"},{"location":"start/build/computer/vdu_calib/#video-output-calibration","title":"Video Output Calibration","text":"<p>The Video Circuitry of the Durango-X home computer has very tight timing. Thus, some adjustment is needed in order to cope with component tolerances, by means of a few variable resistors which, in turn, generate slight delays for some critical signals, in an attempt to match their timing.</p> <p>Note</p> <p>Admittedly, the Durango-X design is far from perfect... adding performance differences according to the source of components, no perfect picture is guaranteed, no matter the adjustment procedure executed. Most of the times you'll be able to reach a reasonable compromise, though.</p> <p>Tip</p> <p>A non-metallic screwdriver is recommended for these adjustments, as the proximity of metal might alter the values themselves, thus forging the setting somewhat.</p>"},{"location":"start/build/computer/vdu_calib/#colour-mode","title":"Colour mode","text":"<p>Two adjustable resistors are provided for this video mode: RV127 (<code>PIXEL DELAY</code>) and RV128 (<code>ENABLE DELAY</code>). These adjustments may interact with each other, thus make sure to recheck them a few times for the best possible picture quality.</p>"},{"location":"start/build/computer/vdu_calib/#pixel-delay","title":"PIXEL DELAY","text":"Close-up of wrong PIXEL DELAY setting <p>This is the most important setting with the most noticeable effect in picture quality. Since the multiplexer U125 (74HC157) has slightly shorter propagation delay than the latch U124 (74HC574), a thin ghost image of every even pixel will show up to the right of odd pixels. Thus, a suitable delay between switching their inputs will compensate for this; however, too much of it may lead into uneven pixels.</p> <p></p> Too little: turn COUNTERclockwise <p></p> Correct setting <p></p> Too much: turn clockwise <p>Note</p> <p>These are actual photgraphs of an LCD screen (Samsung 26C450), thus some colour artifacts are visible all the time.</p>"},{"location":"start/build/computer/vdu_calib/#enable-delay","title":"ENABLE DELAY","text":"<p>Since the video address counters keep supplying valid addresses all the time, video output must be disabled after the whole 128px (64 bytes in colour mode) or 256px (32 bytes in HIRES) have been displayed for every line, in order not to disturb the sync signal. The same goes true for the vertical blanking interval. Propagation delays may have the effect of repeating the leftmost pixel of every raster as a thin ghost line after the rightmost pixel. This can be mitigated by adding a slight delay to the Display Enable signal; in case of colour mode, this takes <code>/CDE</code> line from U22 pin 6 (74HC175) thru a variable resistor <code>RV128</code> -- this, combined with the U127 pin 19 (74HC245) input capacitance, creates the needed delay.</p> <p>However, these timing differences are NOT symmetrical, thus in practice the enable-off as described may need a different setting than the enable-on moment to the left of the picture; the latter one will actually sample the display RAM contents just before the horizontal counter is reset, thus some pixel around the centre of the screen (from the 33rd byte of the previous raster) shows up at the left of the picture. This is usually a more noticeable defect than the previous one, thus if no satisfactory compromise can be set, it's normally best to leave this setting in the low side.</p> <p></p> MOSTLY correct setting (note slight artifacts to the left of cyan and blue bars) <p></p> Too much: turn clockwise <p>Note</p> <p>This particular Durango-X unit looks almost OK at an extreme setting, thus no further correction is possible. Check for similar artifacts on the other side of the screen in case the setting is too low. Same in HIRES mode below.</p>"},{"location":"start/build/computer/vdu_calib/#high-resolution-mode","title":"High Resolution mode","text":""},{"location":"start/build/computer/vdu_calib/#hires-delay","title":"HIRES DELAY","text":"<p>This is the only adjustment available in HIRES mode, and it's equivalent to the aforementioned <code>ENABLE DELAY</code> for colour. The attempt is to minimise stray pixels to the left and right sides of the picture, although most of the times it must be a compromise setting.</p> <p>Technically speaking, this puts some delay on the video stream itself, thus too much of a setting may impair picture sharpness or, most likely, create some glitches.</p> <p></p> Correct setting <p></p> Too much: turn clockwise"},{"location":"start/build/computer/vdu_calib/#monitor-settings","title":"Monitor settings","text":"<p>Some adjustments can only be done on the monitor itself. Particularly, Durango-X generates 256 raster lines out from CCIR standard absolute maximum of 288 (288p) which some monitors may not display in full; some monitors may need a warm-up time for proper adjustment. Otherwise, look for vertical size/vertical pos./vertical hold settings on your display, while checking that both horizontal lines are visible (from the HIRES test pattern).</p> <p></p> The very last raster is cropped on this monitor (Sony PVM-9041Q) until it warms up. <p>Note</p> <p>The Durango-X screen is almost square (about 6:5 aspect ratio), so there's a lot of margin both sides. By design, the image is slightly off-centre towards the right. v2 issue, however, displays practically square pixels, being a bit better centred.</p>"},{"location":"start/build/kbd/bom/","title":"Bom","text":"<p>Site map) Home &gt; Getting Started &gt; Building &gt; KeyBoard &gt; BOM</p>"},{"location":"start/build/kbd/bom/#bill-of-materials-v13","title":"Bill Of Materials (v1.3)","text":"<p>Once you get the KeyBoard PCB, it's time to gather all the necessary components. Make sure you pick up all the component for a particular configuration; some components differs due to the chose options and the desired configuration.</p> <p>Note</p> <p>Assume all ICs are in DIP package, resistors are rated 1/4 W and capacitors 10 V or higher, unless noted otherwise.</p> Class Type Qty. (*) NES* MD* Notes Res. Network 220K - 9 Pin 2 1 2 Only one needed if Using NES controllers. Res. Network 6K8 - 9 Pin 1 1 1 10K can be used Diode 1N4148 8 8 8 Button Push Button 6x6x7mm 40 40 40 MD Socket Dsub9 2 0 2 Only for MD/atari Controllers NES Socket NES Socket 2 2 0 Only for NES Controllers Socket IDC-16 2 2 2 Socket Pin Socket 1x8 2 2 2 Separator M3x18mm 4 4 4 Integrated circuit 74HC138 1 1 1 Integrated circuit 74HC174 2 2 2 Integrated circuit 74HC245 3 1 3 Only one needed if using NES Controller Integrated circuit 74HC595 2 2 0 Only for NES Controllers Integrated circuit 74HC86 1 1 1 <p>Info</p> <p>The NES or MD columns show the total components needed for this configuration. Check the Board serigraphy for more information.</p> <p>Warning</p> <p>Remember to check at the PCB the Components needed for all the configurations check the MD or NES components at the Board.</p> <p>Note</p> <p>We recomend that all the IC must be places at DIP IC sockets.</p> <p>Here you have a Table with the Summary for the DIP Sockets needed.</p> Class Type Qty (*) NES MD Notes DIP Socket 20 Pin DIP Socket 3 1 3 Check at the PCB the MD or NES sockets needed DIP Socket 16 Pin DIP Socket 5 4 4 Check at the PCB the MD or NES sockets needed DIP Socket 14 Pin DIP Socket 1 1 1"},{"location":"start/run/emulation/","title":"Emulator (Perdita)","text":"<p>Home &gt; Getting Started &gt; Running &gt; Emulation</p>"},{"location":"start/run/emulation/#perdita","title":"Perdita","text":""},{"location":"start/run/emulation/#description-and-features","title":"Description and features","text":"<p>Perdita is a Durango Emulator that can run any ROM created for Durango. Perdita is based on the 65C02 instruction set and the Durango-X architecture, but currently does not support the Rockwell R65C02 extensions. However, the WDC <code>WAI</code> and <code>STP</code> opcodes are emulated, the former as a breakpoint.</p> <p></p> Durango Emulator <p>With Perdita you can test your developments and use the internal development tools, like memory dump or gamepad emulation. Emulation is complete and, on a reasonably powered computer, cycle-accurate. The only current caveats are:</p> <ul> <li>Sound is emulated, but some distortion may be heard.</li> <li>Real-time video mode switching won't display properly on the emulated screen.</li> </ul>"},{"location":"start/run/emulation/#using-perdita","title":"Using Perdita","text":""},{"location":"start/run/emulation/#installation","title":"Installation","text":"<p>Perdita uses the SDL2 framework to display the screen contents, so you need to install it on your system (Linux only):</p> <pre><code>apt install sdl2-dev\n</code></pre> <p>You can find the source code of Perdita in the following Repository:</p> <p>https://github.com/durangoretro/Perdita</p> <p>You can use Makefile to generate the perdita executable.</p> <pre><code>make\n</code></pre> <p>Generate Perdita for Windows</p> <p>If you want to build Perdita for windows, you need to use mingw32 to generate the <code>.exe</code> file, with the following <code>make</code> goal: <pre><code>make perdita.zip # Only for generating a Windows executable\n</code></pre></p> <p>Generate Perdita using Docker</p> <p>You can use the following DockerFile to generate a container with Perdita: https://github.com/zerasul/dockerretro/blob/master/sdl/Dockerfile.</p>"},{"location":"start/run/emulation/#use","title":"Use","text":"<p>To run Perdita, you can use the following instructions:</p> <pre><code>./perdita [options] &lt;path to romfile&gt;\n</code></pre> <p>The available options are:</p> <ul> <li><code>-a</code>: load ROM at supplied address, for example <code>0x8000</code>.</li> <li><code>-f</code>: fast mode.</li> <li><code>-s</code>: safe mode (will stop on warnings and BRK).</li> <li><code>-p</code>: start in STEP mode.</li> <li><code>-l</code>: enable error LED(s).</li> <li><code>-k</code>: keep GUI open after program end.</li> <li><code>-h</code>: headless -- no graphics!</li> <li><code>-v</code>: verbose (warnings/interrupts/jumps/events/all).</li> <li><code>-r</code>: do NOT randomize memory at startup.</li> <li><code>-g</code>: emulate controllers (Gamepads); you can use usb gamepads with durango emulator.</li> <li><code>-m</code>: do NOT emulate Minstrel-type keyboard.</li> </ul> <p>Also, you can execute some commands using functions keys:</p> <ul> <li><code>F1</code>: Stop emulation and quit.</li> <li><code>F2</code>: NMI Button (Non-Maskable Interrupt).</li> <li><code>F3</code>: IRQ (Interrupt ReQuest).</li> <li><code>F4</code>: Reset.</li> <li><code>F5</code>: Pause and display status.</li> <li><code>F6</code>: Dump memory (and register) contents.</li> <li><code>F7</code>: Single-Step execution (while paused).</li> <li><code>F8</code>: Resume normal execution (from pause).</li> <li><code>F9</code>: Load dump file (<code>dump.bin</code>).</li> <li><code>F10</code>: Load keystrokes file (<code>keystrokes.txt</code>), emulating each keystroke every 25 interrupts (1/10 second), or 50 interrupts in case of the <code>ENTER</code> key.</li> </ul>"},{"location":"start/run/emulation/#virtual-serial-port-vsp","title":"Virtual Serial Port (VSP)","text":"<p>As a valuable debugging tool, a Virtual Serial Port is provided. It allows communication with the host environment thru a predefined I/O device occupying two addresses: <code>$DF93</code> for data exchange and <code>$DF94</code> for configuration.</p>"},{"location":"start/run/emulation/#keyboard-emulation","title":"Keyboard emulation","text":"<p>Perdita includes two kind of keyboards: an \"intelligent\" PASK-like device (ASCII character received at <code>$DF9A</code>) and the Minstrel-like 40-key keyboard provided as standard (at <code>$DF9B</code>). The latter can be disabled with the <code>-m</code> option for debugging purposes.</p>"},{"location":"start/run/emulation/#gamepad-emulation","title":"Gamepad emulation","text":"<p>Two NES-type gamepads are emulated into the standard I/O addresses <code>$DF9C</code> and <code>$DF9D</code>, using the standard protocol. If no physical gamepads are available, they can be emulated by host keystrokes via the <code>-g</code> option.</p>"},{"location":"start/run/emulation/#mame","title":"MAME","text":"<p>MAME is a popular arcade/retro-system emulator. Currently, there is no support for Durango-X in MAME, but contributions are welcome!</p>"},{"location":"start/run/hard/","title":"Hard","text":"<p>Site map) Home &gt; Getting Started &gt; Running Durango Software &gt; On actual hardware</p>"},{"location":"start/run/hard/#running-durango-software-on-actual-hardware","title":"Running Durango Software on actual Hardware","text":"<p>Like any other computer, Durango\u00b7X needs the code to be in some form of primary memory in order to be able to execute it. This can be any form of non-volatile Read-Only Memory (ROM) (usually EPROM/EEPROM/Flash) or, if some downloading means is available, into volatile Random Access Memory (RAM), much like a modern computer does.</p>"},{"location":"start/run/hard/#rom-cartridges","title":"ROM cartridges","text":"<p>This is the originally intended way to execute code in Durango\u00b7X. Since there's no ROM at all in the Durango\u00b7X main board, a suitable cartridge with appropriate code must be fitted into the cartridge slot.</p> <p>In order to store suitable code in a cartridge, you'll need: - A non-volatile, programmable memory chip (EPROM, EEPROM, Flash) - A suitable programming device. A popular choice is the MiniPro TL866, but many others exist.</p> <p>For this application, you may use any kind of Durango cartridge; the base mini-cartridge is very adequate.</p> <p>Tip</p> <p>At boot time, the 65C02 looks for a RESET vector located at addresses <code>$FFFC-$FFFD</code> and jumps to the address stored there (little-endian), executing the code. The cartridge slot in Durango\u00b7X is mapped to the upper 32 KiB of memory (<code>$8000-$FFFF</code>, minus the I/O area at <code>$DF80-$DFFF</code>), thus the ROM inside must have its contents aligned to the upper addresses, if needed, so this RESET vector is available.</p>"},{"location":"start/run/hard/#rom-images-on-sd-card","title":"ROM images on SD card","text":"<p>A ROM image is the actual binary contents of a ROM chip stored in a file on some secondary memory (mass storage) device, intended to be transferred to some RAM and be executed there; but Durango\u00b7X's RAM is mapped to <code>$0000-$7FFF</code>, whereas the ROM code is expected to fill the top of the addressing range.</p> <p>The solution to this is the use of shadow RAM, which sits on the same address range of ROM and can be swapped with it -- starts in a write-only status to be loaded from a suitable bootloader in ROM, which then gets switched off and puts the shadow RAM in a read-only status, actually replacing the bootloader ROM and continuing the downloaded code execution.</p> <p>This shadow RAM is present in the Development cartridge, but for a clean swap between the ROM and RAM execution, a proper footer must be present on the ROM image which, besides the aforementioned RESET vector, consists of:</p> <ul> <li>The <code>DmOS</code> signature from address <code>$FFD6</code>.</li> <li>A <code>JMP ($FFFC)</code> instruction from address <code>$FFE1</code> (bytes <code>$6C, $FC, $FF</code>)</li> </ul> <p>Note</p> <p>The bootloader ROM code does swap to shadow RAM thru an instruction just before <code>$FFE1</code>, thus expects the RAM to be loaded with a suitable jump instruction -- <code>JMP ($FFFC)</code> goes to the specified RESET vector, actually bootstrapping the downloaded image as if it were in physical ROM.</p> <p>In addition to that, bootstrap and image managing utilities expect a standard header on any ROM image for proper identification and metadata access.</p> <p>A <code>.dux</code> file extension is recommended for ROM images in the host file system (but not mandatory).</p> <p>Tip</p> <p>Bootloaders expect to find a Durango volume (written raw in the card or, since multiBoot v2.0, as a <code>durango.av</code> file in the root directory of a FAT32 filesystem) containing at least one ROM image (or other executable). Note that a single ROM image may act as a whole volume.</p> <p>The aforementioned Development cartridge provides all that is needed to get ROM images up and running:</p> <ul> <li>32 KiB of Shadow RAM.</li> <li>A suitable (albeit a bit slow at ~3.4 KiB/s) SD card interface.</li> </ul>"},{"location":"start/run/hard/#pocket-executables-on-sd-card","title":"Pocket executables on SD card","text":"<p>Unlike a ROM image, a Pocket executable is a file containing code intended to be run on regular RAM (typically within <code>$0800-$5FFF</code> to stay clear of system variables and video memory). Thus, no shadow RAM or footer is needed; but the proper header becomes essential as it provides the load and execution addresses for the bootloader to be able to run the executable.</p> <p>From the hardware side, any cartridge is suitable for the bootloader to run these Pocket executables; but, in any case, some way to access the SD card is needed, like the FastSPI interface or the SD+RTC sidecar, both performing at ~19 KiB/s. The slower Development cartridge is suitable as well.</p> <p>Note</p> <p>The handheld Durango Pocket computer (still in early development) lacks any cartridge slot, relying on Pocket executables downloaded from SD into regular RAM, hence the format's name -- albeit they aren't directly compatible.</p>"},{"location":"start/run/hard/#pocket-executables-from-raspberry-pi","title":"Pocket executables from Raspberry Pi","text":"<p>Since the Pocket format has no special hardware requirements, the very same files can be transferred to the Durango\u00b7X computer from a Raspberry Pi or almost any other device with suitable GPIO pins, since all Durangos are equipped with a nanoLink input port which acts as an almost zero-hardware receiving interface, based on the use of both interrupt lines thru a simple three-wire connection (ground, clock &amp; data) at a nominal speed around 15 kbps (~1.1 KiB/s after adding overhead).</p> <p>Once again, any cartridge is suitable for the bootloader.</p> <p>Warning</p> <p>The concept of using the nanoLink port for receiving from a Raspberry Pi was first implemented on the nanoBoot protocol, but as of version 2.1.3 of the multiBoot bootstrapper, this option is NOT yet supported.</p>"},{"location":"tools/development/","title":"Develop programs for Durango","text":"<p>Durango is a Open Source ecosystem; and can be used to create new programs and games, using the Development Tools.</p> <p>Here, you can find information for all the tools and programs used for develop new software for Durango:</p> <ul> <li>Tools: Information about tools used to develop with Durango.</li> <li>Perdita (Emulator): Durango Emulator (Perdita); allows to run ROMs and dump information using this emulator.</li> <li>Durango Lib: Durango Computer Lib; C-based Library to create new Software for Durango.</li> <li>Docker: Docker image with all the Durango tools.</li> <li>Durango Code: Durango Code Visual Studio Code Extension for use with Durango.</li> </ul>"},{"location":"tools/docker/","title":"Docker","text":"<p>Home &gt; Development &gt; Docker</p>"},{"location":"tools/docker/#docker","title":"Docker","text":"<p>You can use Docker to compile and use tools for develop for Durango Ecosystem. You can find Durango Docker Images in Docker Hub.</p> <p>Arm tags</p> <p>The images for Arm based architecture, are taged with the sufix -arm.</p> <p>This image includes:</p> <ul> <li>xa65 assembler for 6502.</li> <li>cc65 C Compiler.</li> <li>Durango Computer Lib.</li> <li>Rescomp java Utility</li> </ul> <p>To locate the Durango computer lib files, you can use the <code>$DDK</code> environment variable.</p> <p>Under Development</p> <p>These images are under development and can be changed.</p> <p>To use this image, you can use the next command:</p> <pre><code>docker run --rm -v $PWD:/src/durango zerasul/durangodevkit\n</code></pre> <p>By default, the <code>make</code> command is executed.</p> <p>The current DockerFile, is located in the DurangoRetro repository.</p> <p>For more information about Docker, please check Docker Web Page.</p>"},{"location":"tools/docker/#github-codespaces","title":"Github CodeSpaces","text":"<p>You can use and Compile a new ROM using Github CodeSpaces.</p> <ol> <li>create a Fork from our Durango Example Template: https://github.com/durangoretro/Hello_Durango.</li> <li>Enter on Codespaces mode (press . or press codespaces button on code dropdown menu).</li> <li>On the current vscode Terminal, use the Durango Docker Image.</li> </ol> <p><pre><code>docker run -v $PWD:/src/durango zerasul/durangodevkit:latest\n</code></pre> 4. Now you can see the .dux file and dowload it.</p> <p>For more information about Github CodeSpaces please see: https://docs.github.com/en/codespaces/overview.</p>"},{"location":"tools/nanoboot/","title":"Nanoboot","text":"<p>Home &gt; Development &gt; Tools &gt; nanoBoot format</p>"},{"location":"tools/nanoboot/#nanoboot-format","title":"nanoBoot format","text":"<p>Warning</p> <p>This is under development.</p> <p>nanoBoot is the software protocol that allows to send code (or generic data) to a Durango or any other computer fitted with a nanoLink port.</p>"},{"location":"tools/nanoboot/#general-operation","title":"General operation","text":"<p>The idea is pretty simple: by using the <code>NMI</code> (or similar) line as a clock signal, the sender quickly gets the receiver's attention for every transmitted bit. Upon servicing this prioritary interrupt, any lower-privilege ones are masked. Then, this mask is temporarily lifted so, if the data line is asserted, an <code>IRQ</code> (or other lower privilege/maskable interrupt) is issued and a flag is marked, then returns. After this brief interrupt enabling, the NMI routine checks for the aforementioned flag: if that flag is not enabled, a zero was received. Otherwise, it's a one.</p> <p>The NMI routine should keep count of the times it was called, so after eight calls a whole byte was received (shifting the bits in as soon as they're checked). Then, that byte is written into the corresponding address and a suitable pointer is incremented to point to the following address, until the address limit is reached; at that point, loaded code is executed, if possible (more on this later).</p> <p>Note</p> <p>This is a best effort protocol, without any flow control, acknowledge or negotiation. Being a simplex link, there's no way for the receiver to request any 'file' from the sender -- if the receiver is ready before the sender starts the transmission, it may succeed. Also, in case of any framing error or link breakdown, the receiver will likely hang up.</p>"},{"location":"tools/nanoboot/#the-hardware","title":"The Hardware","text":""},{"location":"tools/nanoboot/#signals-definition","title":"Signals definition","text":"<p>This is a two-wire interface (plus ground) based on a Synchronous Serial link. The main feature is that the receiving side needs almost no additional hardware, as it simply repurposes the regular <code>/IRQ</code> and <code>/NMI</code> interrupt lines for DATA (<code>SERDAT</code>, LSB first) and CLOCK (<code>SERCLK</code>) transmission, respectively. Note that, even if this was designed around the 6502 CPU, it may be applied to almost any CPU, as long as it has two interrupt lines with different privilege levels.</p>"},{"location":"tools/nanoboot/#suggested-connector","title":"Suggested connector","text":"<p>The standard connector is a 4-way pin header, where one pin has been cut to prevent reversed connection. Pinout goes as follows:</p> Pin # Silkscreen Signal 1 <code>G</code> Ground 2 <code>C</code> <code>SERCLK</code> clock 3 <code>D</code> <code>SERDAT</code> data 4 <code>x</code> cut key"},{"location":"tools/nanoboot/#receiver-requisites","title":"Receiver requisites","text":"<p>Since this communication link uses two interrupt lines (one of them non-maskable or, at least, with different privileges), you'll need these exposed. The protocol uses active-high signals (unlike the interrupt lines in most CPUs) so you'll likely need a couple of open collector inverters, which will also isolate the computer's 5 V line from 3.3 V devices (like recent Raspberry Pi_s). Also, in order not to interfere with the data transmission, a way to disable regular interrupts (other than _masking them in software) must be provided.</p> <p>The <code>SERCLK</code> (Clock) signal will drive NMI or the interrupt with highest privileges, whereas the <code>SERDAT</code> (Data) signal will drive IRQ or the least privileged interrupt line. Of course, you need to connect the <code>GND</code> (Ground) pin as well.</p> <p>Tip</p> <p>The Durango\u00b7X home computer fits all requirements for nanoBoot, as do the simpler Chihuahua SBC and the recently developed Rosario 6301 computer.</p> <p>Note</p> <p>In case of the Durango\u00b7X computer, there's an <code>AUDIO_FB</code> jumper which connects the <code>SERDAT</code> input to the audio output, which makes a screeching sound during nanoLink transfers, as a crude (but sometimes helpful) form of feedback.</p>"},{"location":"tools/nanoboot/#sender-requisites","title":"Sender requisites","text":"<p>Being a synchronous serial interface on a simplex link, the output interface is just a couple of pins for clock and data signals -- no need for open collector or tristate. This can be achieved thru several ways, like:</p> <ul> <li>Two GPIO (output) pins, like those on the RaspberryPi or Arduino (3.3 V logic is OK).</li> <li>A VIA 6522 shift register thru <code>CB1</code> and <code>CB2</code>.</li> <li>Another Durango with a couple of latched output pins -- a suitable interface has been developed.</li> </ul> <p>Note</p> <p>The bits are sent with the least significative (LSB) first. That's compatible with the use of a VIA's shift register as a sender.</p> <p>Since Durango\u00b7X (as well as Chihuahua and Rosario) have the same receiving interface (BC548 BJT with 22K base resistor), there's no need for a full 5V level at these inputs. To be on the conservative side, anything over TTL levels (2.0 v active high), probably much less (but definitely over ~0.7 v). These inputs will sink 200 \u00b5A at most, thus almost any kind of circuit will be able to drive them.</p>"},{"location":"tools/nanoboot/#protocol","title":"Protocol","text":""},{"location":"tools/nanoboot/#transmission-header","title":"Transmission header","text":"<p>Prior to actual data transmission, a 40-bit header must be sent in order to identify the data type, start address and length. The receiver would be able to reject the transmission, although normal operation of the receiving computer might be affected by abnormal activity on interrupt lines during the rejected transfer, as the sender has no way to know about the desired rejection, an thus won't stop the transmission.</p> Byte 1 Byte 2 &amp; 3 Byte 4 &amp; 5 Magic number End address (BigEndian) Start address (BigEndian) <p>Note</p> <p>Unlike 6502 code, both addresses are in Big Endian format!</p> <p>The End address is the first address that will not be loaded from transmission. If, for instance, the transmitted block is to be loaded into the <code>$6000-$7FFF</code> area, the end address will be <code>$8000</code>, and thus bytes 2 to 5 will be sent precisely as <code>$80</code>, <code>$00</code>, <code>$60</code>, <code>$00</code>.</p>"},{"location":"tools/nanoboot/#magic-numbers","title":"Magic numbers","text":"<p>This is a byte to identify the activity as a valid nanoBoot transmission, and also determine its format. As of 2024-04-24, four formats are defined.</p> Magic number Type Load address Execution address <code>$4B</code> RAM bootloader (legacy) Specified to sender Same as load address <code>$4C</code> ROM image <code>$10000</code>-image size Vectored at <code>$FFFC</code> <code>$4D</code> Generic data Specified to sender N/A <code>$4E</code> Pocket executable Vectored at offset <code>$3-4</code> in file header Vectored at offset <code>$5-6</code> in file header <p>Warning</p> <p><code>$4B</code> was the only supported mode on older versions of nanoBoot client ROM, but timing and other details may be incompatible with modern implementations. Make sure you use recent (May 2024 and later) versions of both the server (sender) and receiver (client) software!</p> <p>Note</p> <p><code>$4B</code>, <code>$4C</code> and <code>$4E</code> are intended for executable code, when the receiver will keep waiting for something to be executed; whereas the <code>$4D</code> signature is about generic data for communication between Durangos (or any other nanoLink-equipped device) and still under development.</p>"},{"location":"tools/nanoboot/#software","title":"Software","text":""},{"location":"tools/nanoboot/#sender","title":"Sender","text":"<p>According to the available hardware, there are many ways to write suitable code. Usually will be a matter of generating the transmission header and sending out the bits with suitable delays (see Timing section below for details). So far (until April 2024) a simple C program for RaspberryPi has been used, although only binary blobs (type <code>$4B</code>) are supported.</p>"},{"location":"tools/nanoboot/#receiver","title":"Receiver","text":"<p>Since this is an interrupt-driven feature, unless the target computer has no use for interrupts at all, your firmware will usually provide user-defined interrupt vectors. Two common ways are available for 6502 systems:</p> <ul> <li>Make the <code>IRQ</code>/<code>NMI</code> hard vectors point to a <code>JMP</code> instruction in RAM, followed by the required ISR address.</li> <li>Make the <code>IRQ</code>/<code>NMI</code> hard vectors point to an indirect <code>JMP(abs)</code> in ROM, which will take the ISR address from some RAM vectors.</li> </ul> <p>Durango software takes the latter approach, with soft IRQ vector at <code>$0200</code>, and soft NMI vector at <code>$0202</code>. In any case, both the bootloader firmware and the executable code to be loaded are expected to set these vectors accordingly.</p> <p>Also, since the normal IRQ generation will interfere with the data line, the bootloader should shut off such generation before attempting to receive, and restore it just after loading has finished (or was aborted). In the case of Durango\u00b7X computer, this is done by clearing bit 0 at the Interrupt Enable Register (<code>$DFAx</code>) and then setting it afterwards; the <code>ERROR</code> LED will stay lit while reception is enabled.</p>"},{"location":"tools/nanoboot/#timing","title":"Timing","text":"<p>Generally speaking, nanoBoot timing is very loose, as long as the receiver is fast enough to handle the incoming data. Designed more for convenience and reliability than speed, these are the recommended minimum times to be observed.</p> <p>Warning</p> <p>Unlike a code bootloader, where the receiving computer keeps waiting for the code to arrive (or until cancelled by timeout or keystroke, if available), transmissions under the <code>$4D</code> signature (generic data) are intended to be serviced during normal operation of the receiving computer, thus must adhere to much stricter timing as most of the time the standard ISR should be kept available.</p>"},{"location":"tools/nanoboot/#header","title":"Header","text":"<p>In order to allow for timeouts, feedback etc., the header is transmitted at a slow pace of 500 bits per second. Current software waits 2 ms between bits, of which the <code>SERCLK</code> pulse is kept for at least 15 \u00b5S for reliability. After each byte is transmitted, and extra 1 mS delay** is used for reliable operation, although not strictly necessary.</p> <p>The whole header takes about 85 mS to be transmitted.</p>"},{"location":"tools/nanoboot/#data-stream","title":"Data stream","text":"<p>Originally designed to work reliably on a 1 MHz computer, which is the minimum expected for any 6502 system, each bit takes a total of 80 \u00b5S, of which the <code>SERCLK</code> pulse is kept for at least 15 \u00b5S as before. After all 8 bits are transmitted, an extra 125 \u00b5S delay is specified.</p> <p>However, unlike the header trasnmission, page boundary crossing may happen and extra delay must be added, especially if some kind of feedback is desired. Originally stated at 1 mS, current version specifies 2 mS allowing for graphic screens to be updated.</p> <p>Note</p> <p>Albeit most transmissions will be page-aligned, note that this 2 mS delay is not necessarily done every 256 transmitted bytes, but ever the next received byte will be stored at <code>$xx00</code>, when the actual page boundary is crossed.</p> <p>All of this means the nominal rate is 12.5 kbit per second, although the needed overhead will get the actual transfer rate a bit over 1 KByte per second, which is reasonable for its purpose.</p> <p>Note</p> <p>You may speed up the transmission if the receiving computer is fast enough; but reliability might be affected. Experiments with 1 MHz 65C02 were able to make successful transmissions up to 18 kb/s nominal rates, but sometimes it needed a few attempts to succeed.</p> <p>Tip</p> <p>Generally speaking, the <code>SERDAT</code> line should be updated before the <code>SERCLK</code> pulse is sent (<code>NMI</code> will be generated at the leading edge); but in most cases, there will be at least a 7-cycle margin while the NMI is acknowledged, allowing the use of a VIA Shift Register as a sender, for instance. This margin should be taken into account for the hold time as well, plus whatever delay creates your NMI code before briefly enabling the IRQ (<code>SERDAT</code>) line.</p>"},{"location":"tools/tools/","title":"Tools","text":"<p>Home &gt; Development &gt; Tools</p>"},{"location":"tools/tools/#durango-development-tools","title":"Durango Development Tools","text":"<p>Durango has several tools that can help you creating software.</p>"},{"location":"tools/tools/#rescomp","title":"Rescomp","text":"<p>Rescomp is a java application Based on SGDK`s rescomp. This Java Based tool allows to generate all the binary information to import any resource (image, sprite...) also, this tool allows you to sign any ROM created for Durango.</p> <p>To Run rescomp you can use the next approach.</p> <pre><code>java -jar rescomp.jar -n name - i file.png -o out.h -m BACKGROUND\n</code></pre> <p>Where the options are:</p> <ul> <li><code>-n name</code>: Resource Name.</li> <li><code>-i inputfile</code>: Input File.</li> <li><code>-o outputfile</code>: Output File.</li> <li> <p><code>-m MODE</code>: Mode; to select the operation Mode:</p> <ul> <li>BACKGROUND: Background mode; for generate a binary from a background Image.</li> <li>SPRITESHEET: Sprite Sheet mode; for generate binary from a Sprite Sheet and cut each frame.</li> <li>SCREENSHOT: Generate information for a screenshot.</li> <li>BINARY: Allow to store Binary Information.</li> <li>FONT: Allow to generate information from a Font in a Image File.</li> <li>SIGNER: Allow to Sign a Durango Rom.</li> <li>STAMP: Allow to STAMP a Durango Rom.</li> <li>MUSIC: Allow to generate a .h file from musicxml format file.</li> </ul> </li> <li> <p><code>-w width</code>: set the Sprite Frame With.</p> </li> <li><code>-h height</code>: set the Sprite Frame Height.</li> </ul> <p>For more information about Rescomp, please see the Source Code:</p> <p>https://github.com/durangoretro/rescomp</p>"},{"location":"tools/tools/#raspberry-pi-durango-server-nanoboot","title":"Raspberry Pi Durango Server (nanoBoot)","text":"<p>You can use the Durango nanoLink interface to load a program. You may use the Durango nanoBoot ROM to load a program using the Raspberry Pi GPIO thru the nanoLink interface.</p> <p>The nanoLink Interface its in the upper side of the durango board.</p> <p></p> Durango nanoLink Interface <p>This server uses the following GPIO pins:</p> <ul> <li>34: GND (G)</li> <li>36: CLK (C)</li> <li>38: DAT (D)</li> <li>40: STB (NOT USED)</li> </ul> <p>Or on BCM notation:</p> <ul> <li>16: CLK</li> <li>20: DAT</li> <li>21: STB</li> </ul> <p>You need to compile the source code downloaded from:</p> <p>https://github.com/durangoretro/nanobootserver/</p> <p>To compile this program you need the library WiringPI:</p> <p>After installing you can compile the program, using make.</p> <pre><code>make\n</code></pre> <p>To use this program, you need to send as a parameter the File Path:</p> <pre><code>nanoBootServer file\n</code></pre> <p>Remember to stick the nanoBoot ROM on Durango first.</p> <p>Under Development</p> <p>This software is under development and we are working to improve it. Of course, you can contribute in the github repository.</p> <p>For more information about the transmission format itself, check out the nanoBoot specifics page.</p>"},{"location":"tools/tools/#cc65","title":"CC65","text":"<p>CC65 is a freeware C compiler and other tools to work with 6502 microprocessor.</p> <p>You can use this compiler to create all the ROMS or, use the tools included to helps you the development of the software used for Durango.</p> <p>For more information about CC65, check CC65 Web Page:</p> <p>https://cc65.github.io/</p>"},{"location":"tools/tools/#xa65-assembler","title":"XA65 assembler","text":"<p>XA is a high-speed, two-pass portable cross-assembler. It understands mnemonics and generates code for NMOS 6502s, CMOS 65C02s and the 65C816.</p> <p>For more information about XA65, please see the project's web page.</p>"}]}